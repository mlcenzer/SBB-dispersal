# no egg change
points(df$mass_per[egg_0rows], pp[egg_0rows,1], col="red", type="l", lty=2) # did not fly in either
points(df$mass_per[egg_0rows], pp[egg_0rows,2], col="blue", type="l", lty=2) # flew in T1 only
points(df$mass_per[egg_0rows], pp[egg_0rows,3], col="black", type="l", lty=2) # flew in both
# eggs twice
points(df$mass_per[egg_2rows], pp[egg_2rows,1], col="red", type="l", lty=4) # did not fly in either
points(df$mass_per[egg_2rows], pp[egg_2rows,2], col="blue", type="l", lty=4) # flew in T1 only
points(df$mass_per[egg_2rows], pp[egg_2rows,3], col="black", type="l", lty=4) # flew in both
# only laid eggs in T2
points(df$mass_per[eggT2_rows], pp[eggT2_rows,1], col="red", type="l", lty=3) # flew in neither
points(df$mass_per[eggT2_rows], pp[eggT2_rows,2], col="blue", type="l", lty=3) # flew in T1 only
points(df$mass_per[eggT2_rows], pp[eggT2_rows,3], col="black", type="l", lty=3) # flew in both
text(70,0.68, labels="Flew in T1 only", col="blue") # 0.059,0.54
text(0,0.88, labels="Did Not Fly", col="red") # -0.036,0.95
text(-20,0.55, labels="Flew Twice", col="black") # -0.02,0.35
mtext(expression(italic("Females")), side=3, adj=0.05, line=-2, cex=1.5, font=2)
legend(76, 1.11,
legend = c("laid eggs in T1",
"no eggs laid",
"eggs laid twice",
"laid eggs in T2"),
lty=1:4,
col="black",
cex=1.1)
}
pp6 = fitted(M6)
df6 = df
plot4(df6,pp6)
library(cvms)  # cross-validating regressions
script_names = c("clean_flight_data-Fall.R",  # 1 function: clean_flight_data.Fall()
"unique_flight_data-Fall.R", # 1 function: create_delta_data.Fall()
"prediction_accuracy.R",     # 1 function: calculate_accuracy()
"confusion_matrix.R")        # 1 function: get_confusion_matrix()
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
data_path = paste0(dir,"/Dispersal/Winter_2020/stats/data/full_data-Fall2019.csv")
dataFall = clean_flight_data.Fall(data_path)
# extracted sets with an experimental design similar to the Winter tests
ongoing_data = dataFall[with(dataFall,!is.na(mass) & set_number > 71),]
# created unique data and sorted by % mass
d = create_delta_data.Fall(ongoing_data)
d = d[with(d, order(mass_per)),]
# stored the best fit model summary table in a new variable
mt = model_table5
# initiated vectors to store predicted probabilities of each flight case
none_pred = c()
T1_vs_none_pred = c()
T2_vs_none_pred = c()
both_vs_none_pred = c()
for (i in 1:nrow(d)) {
m = d$mass_per[[i]]
s = d$sex_c[[i]]
w = d$wing2body_c[i]
# extracted effects from the best fit model and exponentiated
top0 = exp(0) # none; equals 1 because it is the baseline
top1 = exp(mt[1,1] + mt[1,2]*m + mt[1,3]*s + mt[1,4]*w) # T1 rather than none
top2 = exp(mt[2,1] + mt[2,2]*m + mt[2,3]*s + mt[2,4]*w) # T2 rather than none
top3 = exp(mt[3,1] + mt[3,2]*m + mt[3,3]*s + mt[3,4]*w) # both rather than none
bottom = top0 + top1 + top2 + top3
# calculated predicted probabilities
none_pred = c(none_pred, top0/bottom)
T1_vs_none_pred = c(T1_vs_none_pred, top1/bottom)
T2_vs_none_pred = c(T2_vs_none_pred, top2/bottom)
both_vs_none_pred = c(both_vs_none_pred, top3/bottom)
}
d$index = 1:nrow(d)
females = d[d$sex=="F",]
males = d[d$sex=="M",]
Frows = females$index
Mrows = males$index
plot5 = function(d, T1_vs_none_pred, T2_vs_none_pred, both_vs_none_pred, none_pred) {
d$w2b_col = 0
plot(d$mass_per[Frows], T1_vs_none_pred[Frows],
ylim=c(0,1), xlim=c(-40,104), col="blue", type="l",
ylab="Flight Case Probability",
xlab="Percent Change in Mass From T1 to T2 (%)",
lty=1, cex.axis=1.2, cex.lab=1.3) #T1 only
points(d$mass_per[Frows], T2_vs_none_pred[Frows], col="darkgreen", type="l", lty=1)
points(d$mass_per[Frows], both_vs_none_pred[Frows], col="darkorange1", type="l", lty=1)
points(d$mass_per[Frows], none_pred[Frows], col="red", type="l", lty=1)
rbPal = colorRampPalette(c('black','royalblue1'))
d$w2b_col = rbPal(10)[as.numeric(cut(d$wing2body,breaks = 10))]
points(d$mass_per[Frows], T1_vs_none_pred[Frows], pch=20, col=d$w2b_col[Frows])
rbPal = colorRampPalette(c('black','palegreen2'))
d$w2b_col = rbPal(10)[as.numeric(cut(d$wing2body,breaks = 10))]
points(d$mass_per[Frows], T2_vs_none_pred[Frows], pch=20, col=d$w2b_col[Frows])
rbPal = colorRampPalette(c('black','orange')) #violetred1
df$w2b_col = rbPal(10)[as.numeric(cut(df$wing2body,breaks = 10))]
points(d$mass_per[Frows], both_vs_none_pred[Frows], pch=20, col=df$w2b_col[Frows])
rbPal = colorRampPalette(c('black','red'))
d$w2b_col = rbPal(10)[as.numeric(cut(d$wing2body,breaks = 10))]
points(d$mass_per[Frows], none_pred[Frows], pch=20, col=d$w2b_col[Frows])
text(-20,0.85, labels="Did Not Fly", col="red")
text(25,0.35, labels="Flew Twice", col="darkorange1")
text(55,0.25, labels="Flew in T1 only", col="blue")
text(40,0.1, labels="Flew in T2 only", col="darkgreen")
mtext(expression(italic("Females")), side=3, adj=0.05, line=-2, cex=1.5, font=2)
}
plot6 = function(d, T1_vs_none_pred, T2_vs_none_pred, both_vs_none_pred, none_pred) {
d$w2b_col = 0
plot(d$mass_per[Mrows], T1_vs_none_pred[Mrows],
ylim=c(0,0.8), xlim=c(-20,60), col="blue", type="l",
ylab="Flight Case Probability",
xlab="Percent Change in Mass From T1 to T2 (%)",
lty=1, cex.axis=1.2, cex.lab=1.3) #T1 only
points(d$mass_per[Mrows], T2_vs_none_pred[Mrows], col="darkgreen", type="l", lty=1)
points(d$mass_per[Mrows], both_vs_none_pred[Mrows], col="darkorange1", type="l", lty=1)
points(d$mass_per[Mrows], none_pred[Mrows], col="red", type="l", lty=1)
rbPal = colorRampPalette(c('black','royalblue1'))
d$w2b_col = rbPal(10)[as.numeric(cut(d$wing2body,breaks = 10))]
points(d$mass_per[Mrows], T1_vs_none_pred[Mrows], pch=20, col=d$w2b_col[Mrows])
rbPal = colorRampPalette(c('black','palegreen2'))
d$w2b_col = rbPal(10)[as.numeric(cut(d$wing2body,breaks = 10))]
points(d$mass_per[Mrows], T2_vs_none_pred[Mrows], pch=20, col=d$w2b_col[Mrows])
rbPal = colorRampPalette(c('black','orange')) #violetred1
df$w2b_col = rbPal(10)[as.numeric(cut(df$wing2body,breaks = 10))]
points(d$mass_per[Mrows], both_vs_none_pred[Mrows], pch=20, col=df$w2b_col[Mrows])
rbPal = colorRampPalette(c('black','red'))
d$w2b_col = rbPal(10)[as.numeric(cut(d$wing2body,breaks = 10))]
points(d$mass_per[Mrows], none_pred[Mrows], pch=20, col=d$w2b_col[Mrows])
text(-12,0.38, labels="Did Not Fly", col="red")
text(25,0.55, labels="Flew Twice", col="darkorange1")
text(30,0.25, labels="Flew in T1 only", col="blue")
text(30,0.1, labels="Flew in T2 only", col="darkgreen")
mtext(expression(italic("Males")), side=3, adj=0.05, line=-2, cex=1.5, font=2)
}
# generate small subset plots and scales in the top right hand corner
plot_histograms = function() {
x = 0.48
v = c(x-0.13,x, 0.85, 0.90)
par( fig=v, new=TRUE, mar=c(0,0,0,0) )
hist(d$wing2body[Frows], col="white", main="", cex.axis=0.9, xlim=c(0.68,0.78))
x = 0.88
v = c(x-0.13, x, 0.85, 0.90)
par( fig=v, new=TRUE, mar=c(0,0,0,0) )
hist(d$wing2body[Mrows], col="white", main="", cex.axis=0.9, xlim=c(0.68,0.78))
}
par(mfrow=c(1,2), tcl=-0.5) # length of tick marks set at default
par(mai=c(1,0.85,0.4,0)) # bottom, right, top, left
plot5(d, T1_vs_none_pred, T2_vs_none_pred, both_vs_none_pred, none_pred)
text(91, 0.99, labels="w2b", cex=0.9)
par(mai=c(1,0.6,0.4,0.05))
plot6(d, T1_vs_none_pred, T2_vs_none_pred, both_vs_none_pred, none_pred)
text(50,0.79, labels="Wing-to-body", cex=1.2)
text(23, 0.79, labels="w2b", cex=0.9)
plot_histograms()
plot_color_scale()
probs = round(cbind(none_pred, T1_vs_none_pred, T2_vs_none_pred, both_vs_none_pred),2)
summary_probs = cbind(as.character(d$flight_case), as.character(d$sex), probs)
colnames(summary_probs) = c("event", "sex", "none", "T1", "T2", "both")
df_probs = as.data.frame(summary_probs)
# overall
acc = calculate_accuracy(df_probs,3,6)
paste("Overall prediction accuracy, ", round(acc,2))
# by sex
femdata = df_probs[df_probs$sex=="F",]
maledata = df_probs[df_probs$sex=="M",]
accF = calculate_accuracy(femdata,3,6)
paste("Female prediction accuracy, ", round(accF,2))
accM = calculate_accuracy(maledata,3,6)
paste("Male prediction accuracy, ", round(accM,2))
acc_table = get_confusion_matrix(df_probs,3,6)
acc_table[,4:5]
confusion_matrix = acc_table$'Confusion Matrix'[[1]]
plot_confusion_matrix(confusion_matrix, add_sums=TRUE,
sums_settings = sum_tile_settings(
palette = "Oranges",
label = "total"),
palette="Greys", place_x_axis_above=FALSE,
add_zero_shading = FALSE)
cm1 = plot_confusion_matrix(confusion_matrix, add_sums=TRUE,
sums_settings = sum_tile_settings(
palette = "Oranges",
label = "total"),
palette="Greys", place_x_axis_above=FALSE,
add_row_percentages = FALSE,
add_col_percentages = FALSE,
add_zero_shading = FALSE)
dfem = d[d$sex=="F",]
dfem = dfem[with(dfem, order(mass_per)),]
mt = model_table6
neither = c()
T1_rather_than_none = c()
both_rather_than_none = c()
for (i in 1:nrow(dfem)) {
M = dfem$mass_per[[i]]
EC = dfem$egg_diff[[i]]
top0 = exp(0)
top1 = exp(mt[1,1] + mt[1,2]*M + mt[1,3]*EC)
top2 = exp(mt[2,1] + mt[2,2]*M + mt[2,3]*EC)
bottom = top0 + top1 + top2
neither = c(neither, top0/bottom)
T1_rather_than_none = c(T1_rather_than_none, top1/bottom)
both_rather_than_none = c(both_rather_than_none, top2/bottom)
}
probs = round(cbind(neither, T1_rather_than_none, both_rather_than_none),2)
summary_probs = cbind(as.character(dfem$flight_case), as.character(dfem$egg_diff), probs)
colnames(summary_probs) = c("event", "egg_diff", "none", "T1", "both")
egg2 = c(1,2,3,5,6,7,9,10,11,13)
noegg = c(4,8,12)
dataframe = as.data.frame(summary_probs)
dataframe$egg_cat = c(2,2,2,0,2,2,2,0,2,2,2,0,2)
plot(dfem$mass_per[egg2], T1_rather_than_none[egg2],
ylim=c(0,1), col="blue", type="l",
ylab="Flight Case Probability",
xlab="Percent Change in Mass From T1 to T2 (%)",
lty=2, cex.axis=1.2, cex.lab=1.3) #T1 only
points(dfem$mass_per[noegg], T1_rather_than_none[noegg], col="blue", type="l", lty=1)
points(dfem$mass_per[egg2], both_rather_than_none[egg2], col="black", type="l", lty=2)
points(dfem$mass_per[noegg], both_rather_than_none[noegg], col="black", type="l", lty=1)
points(dfem$mass_per[egg2], neither[egg2], col="red", type="l", lty=2)
points(dfem$mass_per[noegg], neither[noegg], col="red", type="l", lty=1)
text(0,0.42, labels="Did Not Fly", col="red")
text(0,0.60, labels="Flew Twice", col="black")
text(0,0.20, labels="Flew in T1 only", col="blue")
legend(20, 0.98,
legend = c("no eggs","2 eggs"),
lty=1:2,
col="black",
cex=1.1)
mtext(expression(italic("Females")), side=3, adj=0.05, line=-2, cex=1.5, font=2)
accF_eggs = calculate_accuracy(dataframe,3,5)
paste("Female prediction accuracy for mass diff and egg model, ", round(accF_eggs,2))
acc_table = get_confusion_matrix(dataframe,3,5)
acc_table[,4:5]
confusion_matrix = acc_table$'Confusion Matrix'[[1]]
plot_confusion_matrix(confusion_matrix, add_sums=TRUE,
sums_settings = sum_tile_settings(
palette = "Oranges",
label = "total"),
palette="Greys", place_x_axis_above=FALSE,
add_zero_shading = FALSE)
cm2 = plot_confusion_matrix(confusion_matrix, add_sums=TRUE,
sums_settings = sum_tile_settings(
palette = "Oranges",
label = "total"),
palette="Greys", place_x_axis_above=FALSE,
add_row_percentages = FALSE,
add_col_percentages = FALSE,
add_zero_shading = FALSE)
library(gridExtra)
?plot_confusion_matrix
grid.arrange(cm1,cm2, nrow=1)
library(gridExtra)
?plot_confusion_matrix
grid.arrange(cm1,cm2, nrow=1)
# library(gridExtra)
# ?plot_confusion_matrix
grid.arrange(cm1,cm2, nrow=1)
# library(gridExtra)
# ?plot_confusion_matrix
cm1 + ggtitle("A")
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A")
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A")
cm2.B = cm2 + ggtitle("B")
grid.arrange(cm1.A,cm2.B, nrow=1)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
axis.title=element_text(size=14,face="bold"))
cm2.B = cm2 + ggtitle("B")
grid.arrange(cm1.A,cm2.B, nrow=1)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=14, face="bold"))
cm2.B = cm2 + ggtitle("B")
grid.arrange(cm1.A,cm2.B, nrow=1)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=14))
cm2.B = cm2 + ggtitle("B")
grid.arrange(cm1.A,cm2.B, nrow=1)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=15))
cm2.B = cm2 + ggtitle("B")
grid.arrange(cm1.A,cm2.B, nrow=1)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=15))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=15))
grid.arrange(cm1.A,cm2.B, nrow=1)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
grid.arrange(cm1.A,cm2.B, nrow=1)
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model_per_plot.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model_per_plot.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model_per_plot.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model_per_plot.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model_per_plot.pdf", set)
ggsave("images/model_per_plot.png", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model_per_plot.png", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model_per_plot.png", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
```{r fig.height=2.3, fig.width=2.3*1.9}
# library(gridExtra)
# ?plot_confusion_matrix
cm1.A = cm1 + ggtitle("A") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
cm2.B = cm2 + ggtitle("B") + theme(axis.text=element_text(size=10),
title=element_text(size=16))
set = grid.arrange(cm1.A,cm2.B, nrow=1)
ggsave("images/model-perf.pdf", set)
