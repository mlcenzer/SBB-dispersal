abline(v=70, col="black")
legend(10.3, 260, legend=c("M + BV", "M + GRT", "F + GRT", "F + BV"), col=c("blue", "blue", "red", "red"), pch=c(1,16,16,1),cex=.7)
text(37, 50, "year = 2016", cex=.7)
text(64, 23, "year = 2019", cex=.7)
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/All_Morphology/stats/"
setwd(dir)
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat/All_Morphology/stats/"
setwd(dir)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(readr)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
knitr::purl("morph_PCA.Rmd", output = "morph_PCA.R") # convert Rmd to R script
Round <- function(number){
# for plotting
x <- round(number, 1)
if(x%%1 == 0){
return(paste(as.character(x), ".0", sep = ""))
}
else{
return(x)
}
}
PCA_graphs <- function(dataset, PCA_title){
# cos2 and the alpha.var: alpha.var colours variables by cos2
# (importance of most important PC to variable),
# see https://personal.utdallas.edu/~herve/abdi-awPCA2010.pdf
GFpca <- PCA(dataset, scale.unit = TRUE, graph = TRUE, ncp = 10)
eig.val <- get_eigenvalue(GFpca)
var.val <- GFpca$var
print(eig.val) #will only show in in console
print(var.val)
scree <- fviz_eig(GFpca, addlabels = TRUE, ylim = c(0, 100))
print(scree)
labX <- paste("PC1 (", Round(eig.val[1, 2]), "%)", sep = "")
labY <- paste("PC1 (", Round(eig.val[2, 2]), "%)", sep = "")
leplot <- fviz_pca_biplot(GFpca, geom.id = c("point"),
geom.var = c("arrow", "text"),
alpha.var = "cos2",
label = "var", repel = T,
col.ind = "gray", col.var = "black")
print(leplot)
ggpubr::ggpar(leplot, title = PCA_title, xlab = labX, ylab = labY,
ggtheme = theme_classic(), font.main = c(20, "bold"),
font.x = 14, font.y = 14, font.tickslab = 12
)
D = cor(dataset)
test <- cor.mtest(dataset)$p
par(mfrow=c(1,2))
corrplot.mixed(D,lower.col = "black", number.cex = .7, p.mat=test, sig.level=0.05)
corrplot.mixed(D,lower.col = "black", number.cex = .7)
return(GFpca)
}
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Rsrc/"
script_names = c("clean_morph_data2.R" # two functions: read_morph_data and remove_torn_wings
)
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Rsrc/"
script_names = c("clean_morph_data.R",
"remove_torn_wings.R"
)
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
data_list <- read_morph_data("data/allmorphology04.27.21-coors.csv")
raw_data = data_list[[1]]
all_bugs = nrow(raw_data)
data_long = data_list[[2]]
# Remove individuals with torn wings first
raw_data = remove_torn_wings(raw_data) # **don't need to remove torn wings for wing morph analysis
data_long = remove_torn_wings(data_long) # **don't need to remove torn wings for wing morph analysis
clean_bugs = nrow(raw_data)
cat("number of bugs with torn wings:", all_bugs - clean_bugs, "\n\n")
d <- raw_data %>%
select(thorax, body, wing, beak) %>%
filter(!is.na(body))
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
d <- raw_data %>%
select(thorax, body, wing, beak) %>%
filter(!is.na(body))
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat/All_Morphology/stats/"
setwd(dir)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(readr)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
# knitr::purl("morph_PCA.Rmd", output = "morph_PCA.R") # convert Rmd to R script
Round <- function(number){
# for plotting
x <- round(number, 1)
if(x%%1 == 0){
return(paste(as.character(x), ".0", sep = ""))
}
else{
return(x)
}
}
PCA_graphs <- function(dataset, PCA_title){
# cos2 and the alpha.var: alpha.var colours variables by cos2
# (importance of most important PC to variable),
# see https://personal.utdallas.edu/~herve/abdi-awPCA2010.pdf
GFpca <- PCA(dataset, scale.unit = TRUE, graph = TRUE, ncp = 10)
eig.val <- get_eigenvalue(GFpca)
var.val <- GFpca$var
print(eig.val) #will only show in in console
print(var.val)
scree <- fviz_eig(GFpca, addlabels = TRUE, ylim = c(0, 100))
print(scree)
labX <- paste("PC1 (", Round(eig.val[1, 2]), "%)", sep = "")
labY <- paste("PC1 (", Round(eig.val[2, 2]), "%)", sep = "")
leplot <- fviz_pca_biplot(GFpca, geom.id = c("point"),
geom.var = c("arrow", "text"),
alpha.var = "cos2",
label = "var", repel = T,
col.ind = "gray", col.var = "black")
print(leplot)
ggpubr::ggpar(leplot, title = PCA_title, xlab = labX, ylab = labY,
ggtheme = theme_classic(), font.main = c(20, "bold"),
font.x = 14, font.y = 14, font.tickslab = 12
)
D = cor(dataset)
test <- cor.mtest(dataset)$p
par(mfrow=c(1,2))
corrplot.mixed(D,lower.col = "black", number.cex = .7, p.mat=test, sig.level=0.05)
corrplot.mixed(D,lower.col = "black", number.cex = .7)
return(GFpca)
}
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Rsrc/"
script_names = c("clean_morph_data.R",
"remove_torn_wings.R"
)
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
data_list <- read_morph_data("data/allmorphology04.27.21-coors.csv")
raw_data = data_list[[1]]
all_bugs = nrow(raw_data)
data_long = data_list[[2]]
# Remove individuals with torn wings first
raw_data = remove_torn_wings(raw_data) # **don't need to remove torn wings for wing morph analysis
data_long = remove_torn_wings(data_long) # **don't need to remove torn wings for wing morph analysis
clean_bugs = nrow(raw_data)
cat("number of bugs with torn wings:", all_bugs - clean_bugs, "\n\n")
d <- raw_data %>%
select(thorax, body, wing, beak) %>%
filter(!is.na(body))
colnames(d) <- c("thorax", "body", "wing", "beak")
MorphPCA = PCA_graphs(d, "(a) ")
vars <- MorphPCA$ind
par(mfrow=c(2,3))
#Correlations
m <- lm(d$thorax ~ vars$coord[,1])
plot(vars$coord[,1], d$thorax, xlab="PC1", ylab="thorax (mm)")
cor_val <- paste("R = ", round(cor(vars$coord[,1], d$thorax), 2))
text(-2,2, cor_val)
abline(m, lty=2)
m <- lm(d$body ~ vars$coord[,1])
plot(vars$coord[,1], d$body, xlab="PC1", ylab="body (mm)")
cor_val <- paste("R = ", round(cor(vars$coord[,1], d$body), 2))
text(-2,2, cor_val)
abline(m, lty=2)
m <- lm(d$wing ~ vars$coord[,1])
plot(vars$coord[,1], d$wing, xlab="PC1", ylab="wing (mm)")
cor_val <- paste("R = ", round(cor(vars$coord[,1], d$wing), 2))
text(-2,2, cor_val)
abline(m, lty=2)
m <- lm(d$beak ~ vars$coord[,1])
plot(vars$coord[,1], d$beak, xlab="PC1", ylab="beak (mm)")
cor_val <- paste("R = ", round(cor(vars$coord[,1], d$beak), 2))
text(-2,2, cor_val)
abline(m, lty=2)
m <- lm(d$beak ~ vars$coord[,2])
plot(vars$coord[,2], d$beak, xlab="PC2", ylab="beak (mm)")
cor_val <- paste("R = ", round(cor(vars$coord[,2], d$beak), 2))
text(-0.5,3, cor_val)
abline(m, lty=2)
#Plot by host
host <- raw_data %>%
filter(!is.na(body)) %>%
select(pophost)
d$pophost <- host$pophost
fviz_pca_ind(MorphPCA,
geom.ind = "point",
col.ind = d$pophost,
legend.title = "Host Plant",
addEllipses=TRUE)
# Plot by sex
sex <- raw_data %>%
filter(!is.na(body)) %>%
select(sex)
d$sex <- sex$sex
fviz_pca_ind(MorphPCA,
geom.ind = "point",
col.ind = d$sex,
legend.title = "Sex",
addEllipses=TRUE)
# Plot by distance from the sympatric zone
# sym_dist <- raw_data %>%
#   filter(!is.na(body)) %>%
#   select(sym_dist)
#
# d$sym_dist <- sym_dist$sym_dist
# fviz_pca_ind(MorphPCA,
#              geom.ind = "point",
#              col.ind = d$sym_dist,
#              legend.title = "Sympatric Zone Distance")
# Plot by population
pop <- raw_data %>%
filter(!is.na(body)) %>%
select(population)
d$population <- pop$pop
fviz_pca_ind(MorphPCA,
geom.ind = "point",
col.ind = d$population,
legend.title = "Population",
addEllipses=TRUE)
raw_data$wing2body = raw_data$wing / raw_data$body
# No mass
d <- raw_data %>%
select(thorax, wing2body, beak) %>%
filter(!is.na(beak)) %>%
filter(!is.na(wing2body))
colnames(d) <- c("thorax", "wing2body", "beak")
MorphPCA = PCA_graphs(d, "(c) ")
# long wing only
data_long$wing2body = data_long$wing / data_long$body
# No mass
d <- data_long %>%
select(thorax, wing2body, beak) %>%
filter(!is.na(beak)) %>%
filter(!is.na(wing2body))
colnames(d) <- c("thorax", "wing2body", "beak")
MorphPCA = PCA_graphs(d, "(d) ")
## Read Libraries
rm(list=ls())
library(lme4)
library(zoo)
library(lubridate)
library(dplyr)
library(ggformula)
library(cowplot)
library(gridExtra) # remove after clean file
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat/All_Morphology/stats/"
setwd(dir)
## Read Source Files
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Rsrc/"
script_names = c("compare_models.R",
"regression_output.R",
"clean_morph_data3.R", # two functions: read_morph_data and remove_torn_wings
"AICprobabilities.R")
script_names = c("compare_models.R",
"regression_output.R",
"clean_morph_data3.R", # two functions: read_morph_data and remove_torn_wings
"AICprobabilities.R",
)
script_names = c("compare_models.R",
"regression_output.R",
"clean_morph_data.R",
"AICprobabilities.R",
"get_Akaike_weights.R",
"remove_torn_wings.R")
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
source("~/Desktop/git_repositories/SBB-dispersal/avbernat/RTsrc/vartests.R")
## Read the Data
data_list <- read_morph_data("data/allmorphology05.18.21.csv")
raw_data = data_list[[1]]
data_long = data_list[[2]] # long-wing bugs only
data_long = remove_torn_wings(data_long)
customPlot = list( theme_classic(),
theme(axis.text=element_text(size=13),
axis.title=element_text(size=16),
plot.title=element_text(size=20),),
theme(legend.position = c(0.2, 0.9)),
theme(legend.title = element_text(size=14, face="italic"),
legend.text = element_text(size = 13, face="italic"))
)
xlab_years = na.omit(sort(unique(data_long$dates))[-2])
xlab_dates = na.omit(sort(unique(data_long$month_of_year)))
xlab_months = xlab_dates[c(-2,-5)]
month_labs <- c("Feb", "May", "Aug", "Oct", "Dec")
#################################################################
SE = function(x){sd(x)/sqrt(length(x))}
w_morph_summary<-aggregate(wing_morph_binom~sex*pophost*month_of_year*months_since_start, data=raw_data, FUN=mean)
w_morph_summary$se<-aggregate(wing_morph_binom~sex*pophost*month_of_year*months_since_start, data=raw_data, FUN=SE)$wing_morph_binom
jitter = runif(n=nrow(w_morph_summary), min=-0.5, max=0.5) #jitter slightly
w_morph_summary$dates <- w_morph_summary$month_of_year + jitter
dd = w_morph_summary
dd$pophost = factor(dd$pophost, levels = c("K. elegans", "C. corindum") )
dd$`Host Plant` = dd$pophost
## Read the Data
data_list <- read_morph_data("data/allmorphology05.18.21.csv")
raw_data = data_list[[1]]
data_long = data_list[[2]] # long-wing bugs only
## Read Libraries
rm(list=ls())
library(lme4)
library(zoo)
library(lubridate)
library(dplyr)
library(ggformula)
library(cowplot)
library(gridExtra) # remove after clean file
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat/All_Morphology/stats/"
setwd(dir)
## Read Source Files
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Rsrc/"
script_names = c("compare_models.R",
"regression_output.R",
"clean_morph_data.R",
"AICprobabilities.R",
"get_Akaike_weights.R",
"remove_torn_wings.R")
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
source("~/Desktop/git_repositories/SBB-dispersal/avbernat/RTsrc/vartests.R")
## Read the Data
data_list <- read_morph_data("data/allmorphology05.18.21.csv")
raw_data = data_list[[1]]
data_long = data_list[[2]] # long-wing bugs only
data_long = remove_torn_wings(data_long)
customPlot = list( theme_classic(),
theme(axis.text=element_text(size=13),
axis.title=element_text(size=16),
plot.title=element_text(size=20),),
theme(legend.position = c(0.2, 0.9)),
theme(legend.title = element_text(size=14, face="italic"),
legend.text = element_text(size = 13, face="italic"))
)
xlab_years = na.omit(sort(unique(data_long$dates))[-2])
xlab_dates = na.omit(sort(unique(data_long$month_of_year)))
xlab_months = xlab_dates[c(-2,-5)]
month_labs <- c("Feb", "May", "Aug", "Oct", "Dec")
#################################################################
SE = function(x){sd(x)/sqrt(length(x))}
w_morph_summary<-aggregate(wing_morph_binom~sex*pophost*month_of_year*months_since_start, data=raw_data, FUN=mean)
#################################################################
SE = function(x){sd(x)/sqrt(length(x))}
w_morph_summary<-aggregate(wing_morph_b~sex*pophost*month_of_year*months_since_start, data=raw_data, FUN=mean)
w_morph_summary$se<-aggregate(wing_morph_b~sex*pophost*month_of_year*months_since_start, data=raw_data, FUN=SE)$wing_morph_b
jitter = runif(n=nrow(w_morph_summary), min=-0.5, max=0.5) #jitter slightly
w_morph_summary$dates <- w_morph_summary$month_of_year + jitter
dd = w_morph_summary
dd$pophost = factor(dd$pophost, levels = c("K. elegans", "C. corindum") )
dd$`Host Plant` = dd$pophost
dd$sex[dd$sex=="F"]<-"Females"
dd$sex[dd$sex=="M"]<-"Males"
dd$sex = factor(dd$sex, levels = c("Males", "Females") )
dd$`Sex` = dd$sex
dfF = dd[dd$sex=="Females",]
dfM = dd[dd$sex=="Males",]
raw_data$`Host Plant` = raw_data$pophost
p8 = ggplot() +
ggtitle("Females") + xlab("Month") + ylab("Long-Wing Morph Frequency") +
geom_vline(xintercept = xlab_dates, color="gainsboro") +
geom_smooth(data=dfF, method="lm", se=FALSE, linetype = "dashed", lwd=0.5,
mapping = aes(x = month_of_year, y = wing_morph_b, colour = `Host Plant`)) +
geom_smooth(data=dfF, method="loess",
mapping = aes(x = month_of_year, y = wing_morph_b, colour=`Host Plant`, fill=`Host Plant`)) +
geom_point(data=dfF, mapping = aes(x = month_of_year, y = wing_morph_b, colour=`Host Plant`)) +
customPlot +
scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +
scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green")) +
scale_x_continuous(breaks=xlab_months, labels= month_labs) +
ylim(0,1.3)
p9 = ggplot() +
ggtitle("Males") + xlab("Month") + ylab("Long-Wing Morph Frequency") +
geom_vline(xintercept = xlab_dates, color="gainsboro") +
geom_smooth(data=dfM, method="lm", se=FALSE, linetype = "dashed", lwd=0.5,
mapping = aes(x = month_of_year, y = wing_morph_b, colour = `Host Plant`)) +
geom_smooth(data=dfM, method="loess",
mapping = aes(x = month_of_year, y = wing_morph_b, colour=`Host Plant`, fill=`Host Plant`)) +
geom_point(data=dfM, mapping = aes(x = month_of_year, y = wing_morph_b, colour=`Host Plant`)) +
customPlot +
scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +
scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green")) +
scale_x_continuous(breaks=xlab_months, labels= month_labs) +
ylim(0,1.3)
grid.arrange(p8,p9, ncol=2)
head(ggplot_build(p9)$data)
head(ggplot_build(p9)$data[[3]])
library(dplyr)
DF_melted <- DF_melted %>%
group_by(X) %>%
mutate(ymax = cumsum(value/sum(value)),
ymin = ymax - value/sum(value))
head(DF_melted)
?cumsum
cumsum(1:10)
host = "C. corindum"
dd$month_of_year[dd$`Host Plant`==host]
l <- loess.sd(dd$month_of_year[dd$`Host Plant`==host],
dd$wing_morph_b[dd$`Host Plant`==host], nsigma = 1.96)
library(msir)
dd$month_of_year[dd$`Host Plant`==host]
l <- loess.sd(dd$month_of_year[dd$`Host Plant`==host],
dd$wing_morph_b[dd$`Host Plant`==host], nsigma = 1.96)
par(mfrow=c(2,1))
plot(dd$month_of_year[dd$`Host Plant`==host],
dd$wing_morph_b[dd$`Host Plant`==host]
, main = "loess.sd()", col="red", pch=19)
lines(l$x, l$y)
lines(l$x, l$upper, lty=2)
lines(l$x, l$lower, lty=2)
host = "K. elegans"
dd$month_of_year[dd$`Host Plant`==host]
l <- loess.sd(dd$month_of_year[dd$`Host Plant`==host],
dd$wing_morph_b[dd$`Host Plant`==host], nsigma = 1.96)
plot(dd$month_of_year[dd$`Host Plant`==host],
dd$wing_morph_b[dd$`Host Plant`==host]
, main = "loess.sd()", col="red", pch=19)
lines(l$x, l$y)
lines(l$x, l$upper, lty=2)
lines(l$x, l$lower, lty=2)
library(spatialEco)
dfFC = dfF[dfF$pophost == "C. corindum",]
loess.ci(dfF$wing_morph_b,
dfF$month_of_year,
p = 0.95, plot = FALSE, span=0.4)
dfFC = dfF[dfF$pophost == "K. elegans",]
cars.lo <- loess(wing_morph_b ~ months_since_start, dd)
table = predict(cars.lo, data.frame(months_since_start = seq(0, 12, 0.1)), se = TRUE)
table
head(ggplot_build(p8)$data)
head(ggplot_build(p8)$data[[3]])
head(ggplot_build(p8)$data[[3]])$ymin
head(ggplot_build(p8)$data[[3]])$ymax
head(ggplot_build(p8)$data[[3]])$se*1.96
head(ggplot_build(p8)$data[[3]])$y + head(ggplot_build(p8)$data[[3]])$se*1.96
# y
# y
# predicted value
# y
# predicted value
# ymin
# y
# predicted value
# ymin
# lower pointwise confidence interval around the mean
# y
# predicted value
# ymin
# lower pointwise confidence interval around the mean
# ymax
# y
# predicted value
# ymin
# lower pointwise confidence interval around the mean
# ymax
# upper pointwise confidence interval around the mean
# y
# predicted value
# ymin
# lower pointwise confidence interval around the mean
# ymax
# upper pointwise confidence interval around the mean
# se
# y
# predicted value
# ymin
# lower pointwise confidence interval around the mean
# ymax
# upper pointwise confidence interval around the mean
# se
# standard error
# y
# predicted value
# ymin
# lower pointwise confidence interval around the mean
# ymax
# upper pointwise confidence interval around the mean
# se
# standard error
#  confidence interval is obtained as the values 1.96×SE either side of the mean.
par(mfrow=c(2,1))
plot(dd$month_of_year[dd$`Host Plant`==host],
dd$wing_morph_b[dd$`Host Plant`==host]
, main = "loess.sd()", col="red", pch=19,
xlab="month", ylab="wing morph freq")
lines(l$x, l$y)
lines(l$x, l$upper, lty=2)
lines(l$x, l$lower, lty=2)
host = "K. elegans"
dd$month_of_year[dd$`Host Plant`==host]
l <- loess.sd(dd$month_of_year[dd$`Host Plant`==host],
dd$wing_morph_b[dd$`Host Plant`==host], nsigma = 1.96)
plot(dd$month_of_year[dd$`Host Plant`==host],
dd$wing_morph_b[dd$`Host Plant`==host]
, main = "loess.sd()", col="red", pch=19,
xlab="month", ylab="wing morph freq")
lines(l$x, l$y)
lines(l$x, l$upper, lty=2)
lines(l$x, l$lower, lty=2)
library(spatialEco)
