1148/7
348.71*2
697.42/5
697.42/3
(697.42/3)/4
(697.42/3)/5
697.42/14
2*(697.42/14)
3*(697.42/14)
697.42/5
#assignment#
#
#object#
a<-1#
#
#vector#
vec<-c(a,4)#
#
#matrix#
mat<-matrix(vec, nrow=2, ncol=2)
mat
#function#
breakfast_cals<-function(eggs, pancakes, bacon){#
	cals<-eggs*78 + pancakes*86 + bacon*43#
	cals#
}
breakfast_cals(eggs=2, pancakes=2, bacon=4)
breakfast_cals(eggs=3, pancakes=2)
breakfast_cals(eggs=3, pancakes=2, bacon=0)
egg_days<-c(1,0,5,2,3,2,0)#
pancake_days<-c(2,2,2,2,2,2,2)#
bacon_days<-c(0,2,0,4,0,1,1)#
#
breakfast_cals(egg_days, pancake_days, bacon_days)
run_amount<-function(breakfast){#
	distance<-(breakfast-300)/100#
}
rm()
clear()
vector<-c(1,2,4,7,1)
vector
matrix(0, nrow=2, ncol=3)
breakfast_cals<-function(eggs, pancakes, bacon){#
	cals<-eggs*78 + pancakes*86 + bacon*43#
	cals#
}
breakfast_cals(eggs=2, pancakes=2, bacon=5)
breakfast_cals(eggs=2, pancakes=2)
breakfast_cals<-function(eggs=0, pancakes=0, bacon=0){#
	cals<-eggs*78 + pancakes*86 + bacon*43#
	cals#
}
breakfast_cals(eggs=2)
#assignment#
#
#object#
a<-1#
#vector#
vec<-c(a,4)#
#matrix#
mat<-matrix(vec, nrow=2, ncol=2)#
#function#
breakfast_cals<-function(eggs=0, pancakes=0, bacon=0){#
	eggs*78 + pancakes*86 + bacon*43#
}
egg_days<-c(1,0,5,2,3,2,0)#
pancake_days<-c(2,2,2,2,2,2,2)#
bacon_days<-c(0,2,0,4,0,1,1)#
#
breakfast_cals(egg_days, pancake_days, bacon_days)
egg_days<-c(1,0,5,2,3,2,0)#
pancake_days<-c(2,2,2,2,2,2,2)#
bacon_days<-c(0,2)#
#
breakfast_cals(egg_days, pancake_days, bacon_days)
egg_days<-c(1,0,5,2,3,2,0)#
pancake_days<-c(2,2,2,2,2,2,2)#
bacon_days<-c(2)#
#
breakfast_cals(egg_days, pancake_days, bacon_days)
egg_days<-c(1,0,5,2,3,2)#
pancake_days<-c(2,2,2,2,2,2)#
bacon_days<-c(2,0)#
#
breakfast_cals(egg_days, pancake_days, bacon_days)
breakfast_cals(egg_days, pancake_days, bacon_days)
breakfast_cals(bacon_days, egg_days, pancake_days)
breakfast_cals(bacon=bacon_days, eggs=egg_days, pancakes=pancake_days)
?seq
seq()
seq(2)
?
length
length(bacon_days)
length(eggs_days)
length(egg_days)
matrix<-matrix(egg_days, ncol=2, nrow=length(egg_days))
matrix
matrix[1,2]
matrix[3,2]
matrix[,2]
rm(list=ls())
matrix
matrix<-matrix(egg_days, ncol=2, nrow=length(egg_days))
#assignment#
#
#object#
a<-1#
#vector#
vec<-c(a,4)#
#matrix#
mat<-matrix(vec, nrow=2, ncol=2)#
#function#
breakfast_cals<-function(eggs=0, pancakes=0, bacon=0){#
	eggs*78 + pancakes*86 + bacon*43#
}#
egg_days<-c(1,0,5,2,3,2)#
pancake_days<-c(2,2,2,2,2,2)#
bacon_days<-c(2,0)#
#
breakfast_cals(egg_days, pancake_days, bacon_days)#
#practice:#
#
#write a function to convert celsius to fahrenheit#
#
#Use that function to make a 2-column matrix, the first column of celsius from 0 to 50, the second of corresponding fahrenheit values#
#Make a matrix where the first column is a population with phenotype values between 0 and 10 (may be drawn randomly using rnorm() or runif())#
#
#use the sample() function to fill the second column with a second generation drawn from the first generation. There are multiple ways to do this!#
#
#do this for 10 generations.#
#
#wouldn't a loop be nice now?
egg_mat<-matrix(egg_days, ncol=2, nrow=length(egg_days))
egg_mat
egg_mat[,2]
egg_mat[,2]<-0
egg_mat
plot(egg_mat)
plot(egg_mat[,1]~egg_mat[,2])
24.65+78.70+64
(24.65+78.70+64)/2
119.57/2
2000*0.53
rbinom(10,1,0.5)
rbinom(1,10,0.5)
rbinom(10,1,0.5)
matrix(NA, ncol=5, nrow=5)
matrix(c(0,1), ncol=5, nrow=5)
matrix(c(0,1,2), ncol=5, nrow=5)
mat<-matrix(0, nrow=5, ncol=2)
mat
mat[,1]<-1:5
mat
mat[,3]<-1
install.packages("viridis")#
install.packages("mgcv")#
install.packages("boot")#
install.packages("magick")#
#
library(viridis)#
library(mgcv)  #needed for gam command#
library(boot)  #needed for the inv.logit command#
#library(magick)
2200*0.53
?ncol
583.34+291.67
12/5
35/12
#draw body sizes that differ between Treatments using rnorm#
Results<-data.frame(Trt=rep(c('A', 'B'), times=1, each=5), Resp=c(rnorm(5, 5, 1), rnorm(5,3,1)))
Results
boxplot(Results)
boxplot(Results$Resp~Results$Trt)
lm(Resp~Trt, data=Results)
summary(lm(Resp~Trt, data=Results))
#plot mean body sizes from each treatment#
boxplot(Results$Resp~Results$Trt)
sample_test<-function(s_size){#
Results<-data.frame(Trt=rep(c('A', 'B'), times=1, each=s_size), Resp=c(rnorm(s_size, 5, 1), rnorm(s_size,3,1)))#
Results#
}
sample_test(10)
sample_test<-function(s_size){#
Results<-data.frame(Trt=rep(c('A', 'B'), times=1, each=s_size), Resp=c(rnorm(s_size, 5, 1), rnorm(s_size,3,1)))#
boxplot(Results$Resp~Results$Trt)#
}
sample_test<-function(s_size){#
Results<-data.frame(Trt=rep(c('A', 'B'), times=1, each=s_size), Resp=c(rnorm(s_size, 5, 1), rnorm(s_size,3,1)))#
Results#
}#
#
sample_test(10)#
boxplot(Results$Resp~Results$Trt)
sample_test(100)#
boxplot(Results$Resp~Results$Trt)
sample_test<-function(s_size){#
Results<-data.frame(Trt=rep(c('A', 'B'), times=1, each=s_size), Resp=c(rnorm(s_size, 5, 1), rnorm(s_size,3,1)))#
Results#
}#
#
output<-sample_test(100)#
boxplot(output$Resp~output$Trt)
output<-sample_test(10)#
boxplot(output$Resp~output$Trt)
output<-sample_test(1000)#
boxplot(output$Resp~output$Trt)
output<-sample_test(2)#
boxplot(output$Resp~output$Trt)
output<-sample_test(5)#
boxplot(output$Resp~output$Trt)
output<-sample_test(5)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
output<-sample_test(10)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
output<-sample_test(100)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
?boxplot
sample_test<-function(s_size, sd){#
Results<-data.frame(Trt=rep(c('A', 'B'), times=1, each=s_size), Resp=c(rnorm(s_size, 5, sd), rnorm(s_size,3,sd)))#
Results#
}#
#
output<-sample_test(s_size=100, sd=2)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
output<-sample_test(s_size=1000, sd=2)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim#
#
#Run it for different sample si
output<-sample_test(s_size=100, sd=2)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
output<-sample_test(s_size=100, sd=1)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
plot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
10.49+29.33+18.60+15.55+19.95+5.69+6.39+7.16
113.16/2
348.69/4
150/5
14+33+18+18+22
21+15+32+13+25+16+33
155+15
170-105
155/7
2046/15
136/4
30*15
30*15*4.5
100000/12
3/8
47.71/2
60*1.75
500/20
52*5
260/25
200/8
exp^2
exp^(1/2)
e^(1/2)
exp
exp(1/2)
exp(-1/2)
exp(-1/2)+e(-0.08^2/2*(0.1^2))
exp(-1/2)+exp(-0.08^2/2*(0.1^2))
exp(-1/2)+exp((-0.08^2)/2*(0.1^2))
exp((-0.08^2)/2*(0.1^2))
exp((-0.05^2)/2*(0.1^2))
exp((-0.09^2)/2*(0.1^2))
exp((-0.1^2)/2*(0.1^2))
exp((-0.1^2)/(2*(0.1^2)))
exp((-0.08^2)/(2*(0.1^2)))
exp((-0.07^2)/(2*(0.1^2)))
exp((-0.01^2)/(2*(0.1^2)))
1-0.9*(4*0.1*0.9)^1
1-0.1*(4*0.1*0.9)^1
1-0.1*(4*0.2*0.9)^1
1-0.1*(4*0.3*0.9)^1
1-0.1*(4*0.4*0.9)^1
1-0.1*(4*0.2*0.8)^1
1-0.1*(4*0.3*0.7)^1
1-0.1*(4*0.4*0.6)^1
1-0.1*(4*0.4*0.6)^16
1-0.1*(4*0.5*0.5)^16
1-0.1*(4*0.3*0.7)^16
1-0.1*(4*0.3*0.7)^(1/16)
1/16
x=0.5#
#
survival<-function(x){#
	1-0.1*(4*x*(1-x))^(1/16)#
}
survival(x)
survival(0.6)
sapply(seq(0,1, by=0.1), survival)
plot(sapply(seq(0,1, by=0.1), survival))
survival<-function(x, B=1){#
	1-0.1*(4*x*(1-x))^B)#
}#
#
survival(0.6)#
plot(sapply(seq(0,1, by=0.1), survival))
survival<-function(x, B=1){#
	1-0.1*(4*x*(1-x))^B)#
}#
#
survival(0.6)
survival<-function(x, B=1){#
	1-0.1*(4*x*(1-x))^B#
}#
#
survival(0.6)
plot(sapply(seq(0,1, by=0.1), survival))
survival<-function(x, B=16){#
	1-0.1*(4*x*(1-x))^B#
}#
#
survival(0.6)#
plot(sapply(seq(0,1, by=0.1), survival))
279.93+17.54
(279.93+17.54)/2
69/12
(69/12)/2
29.79+15.75
sample(1:4, 4, replace=FALSE)
runif(1,min=0, max=1)
sample(1:4, 3, replace=FALSE)
87.65*2
110+8+29+16+17+44+75+2+8+59+29+66+38+40+25+13+220+29+12+29+50
5400/60
8*60
480/9
480/90
2.7*(480/90)
252+368.96
620.96-367.96
5000000/5000
25.40*8
14.86*2
22000/60000000
36000/328000000
686991/328000000
686991/3280000
36000/3280000
library(broom)
365*24*60*60
264/23
246/23
3090/39
28*(3090/39)
10/8
10000/50
200*1.25
2500/60
71/70
70*0.02
library(rethinking)
exp(-0.61)/(1+exp(-0.61))
686947/17953597
154793/4657693
93563/2707877
106713/5150000
120279/4485000
18.74*24
518.16/2
5833/3
6*6*6
216-148
216-144
518.16/2
472.81/2
472.81/2 - 115.20
9.53+6.05
15.58/2
exp(1062)
1/exp(1062)
5833.34*12
1875*12
1e4
1e5
23*60
0.382+0.33+0.35+0.414+0.274
0.382+0.33+0.35+0.414+0.274+0.246+0.369+0.32+0.257+0.388
0.382+0.33+0.35+0.414+0.274+0.246+0.369+0.32+0.257+0.388+0.357+0.339+0.354+0.311+0.331
0.382+0.33+0.35+0.414+0.274+0.246+0.369+0.32+0.257+0.388+0.357+0.339+0.354+0.311+0.331+0.336+0.318+0.293+0.273+0.274+0.363
0.382+0.33+0.35+0.414+0.274+0.246+0.369+0.32+0.257+0.388+0.357+0.339+0.354+0.311+0.331+0.336+0.318+0.293+0.273+0.274+0.363+0.313+0.283+0.272+0.317+0.294
0.382+0.33+0.35+0.414+0.274+0.246+0.369+0.32+0.257+0.388+0.357+0.339+0.354+0.311+0.331+0.336+0.318+0.293+0.273+0.274+0.363+0.313+0.283+0.272+0.317+0.294+0.293+0.325+0.32
diap_avg_8_stripe <- c(0.382, 0.33, 0.35, 0.414, 0.274, 0.246, 0.369, 0.32, 0.257, 0.388, 0.357, 0.339, 0.354, 0.311, 0.331, 0.336, 0.318, 0.293, 0.273, 0.274, 0.363, 0.313, 0.283, 0.272, 0.317, 0.294, 0.293, 0.325, 0.32)
mean(diap_avg_8_stripe)
sd(diap_avg_8_stripe)
sd(diap_avg_8_stripe)*qnorm(0.95)/length(diap_avg_8_stripe)
load('~/Dropbox/diapause_ibm/MC plotting/from server/summaries/diap_disp_ev_F_0.01_summary.Rdata')
diap_disp_ev_F_0.01_summary
(sd(diap_avg_8_stripe)*qnorm(0.975))/sqrt(length(diap_avg_8_stripe))
load('~/Dropbox/diapause_ibm/MC plotting/from server/summaries/diap_disp_ev_F_0.01_init_diap_0.90_summary.Rdata')
diap_disp_ev_F_0.01_init_diap_0.90_summary
load('~/Dropbox/diapause_ibm/MC plotting/from server/summaries/tau_change_disp_ev_F_0.01_init_diap_0.90_summary.Rdata')
tau_change_disp_ev_F_0.01_init_diap_0.90_summary
5833.34*12
466.68/5833.34
rm(list=ls())#
setwd("~/Documents/Florida soapberry project/2019 Dispersal/SBB-dispersal git/avbernat_working_on/Dispersal/Winter_2020/stats")#
library(lme4)#
#
library(dplyr)#
library(tidyselect)#
library(stringr)#
#
library(glmnet)#
library(ggplotify)#
library(gridExtra)#
library(ggformula)#
library(randomcoloR)#
#
output_col = FALSE # Recommend changing this to TRUE if working in Base R or RStudio, and FALSE if generating an html#
source("src/clean_flight_data.R") # Script that loads and cleans up the data#
source("src/regression_output.R") # A script that cleans up regression outputs and prints in color or black and white#
source("src/center_flight_data.R")#
source("src/get_warnings.R")#
#
data <- read_flight_data("data/all_flight_data-Winter2020.csv")#
data_all <- data[[1]]#
data_tested <- data[[2]]#
#
### Remove everyone who didn't fly (then remove distances = 0, if that didn't work fully)#
data_flew_all <- data_tested[data_tested$flew_b == 1, ] #
#
### Check for low speeds#
low_speeds <- data_flew_all %>%#
  filter(average_speed <0.05)#
#
### Check for high speeds#
high_speeds <- data_flew_all %>%#
  filter(average_speed >0.65)#
#
low_speeds$flight_type# have 7 bugs with average_speed = 0 but were marked as bursters (this could be just something very short (second burst) - not enough to grant a calculation) - I decided to remove them. But one bug was continuous and had 0 distance and 0 speeds - that was bug 196 T2 set011-3-03-2020-A3_196.txt#
high_speeds$flight_type # 3 bugs - also bursters. Could also be short explosive bursts but not true to the biology of these bugs (more like us blowing on them).#
#
### Remove outliers#
data_flew <- data_flew_all #%>%#
  filter(average_speed > 0.05) %>%#
 filter(average_speed < 0.65)#
data_flew <- center_data(data_flew)#
#
##transform mass & speed#
data_flew$mass_trans<-log(data_flew$mass)-mean(log(data_flew$mass), na.rm=TRUE)#
#
data_flew$speed_trans<-log(data_flew$average_speed)-mean(log(data_flew$average_speed), na.rm=TRUE)#
#
data_flew$max_speed_trans <-
