gf_point(thorax_c ~ sym_dist, col=~host_c, alpha=~sex_c, data=data_all)
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
data_tested <- data_tested[data_tested$trial_type=="T1",] # only the unique values pulled for those tested
data_tested <- center_data(data_tested)
data_all <- data_all %>%
filter(trial_type != "T2")
data_all <- center_data(data_all)
data_fem <- data_tested[data_tested$sex=="F",]
data_fem <- center_data(data_fem)
data<-data.frame(R=data_fem$thorax_c,
A=data_fem$host_c,
B=data_fem$sym_dist)
model_script = paste0(source_path,"generic models-gaussian glmer 2-FF.R")
model_comparisonsAIC(model_script)
anova(m0, m2, test="Chisq") # Adding B does not improve fit
anova(m0, m1, test="Chisq") # Adding A does not improve fit
best.fem.thorax <- lm(thorax_c ~ 1, data=data_fem)
tidy_regression(best.fem.thorax, is_color=output_col)
data<-data.frame(R=data_fem$body_c,
A=data_fem$host_c,
B=data_fem$sym_dist)
model_script = paste0(source_path,"generic models-gaussian glmer 2-FF.R")
model_comparisonsAIC(model_script)
anova(m0, m2, test="Chisq") # Adding B does not improve fit
anova(m0, m1, test="Chisq") # Adding A does not improve fit
best.fem.body <- lm(body_c ~ 1, data=data_fem)
tidy_regression(best.fem.body, is_color=output_col)
data<-data.frame(R=data_fem$wing_c,
A=data_fem$host_c,
B=data_fem$sym_dist,
C=data_fem$thorax_c)
source("src/compare_models.R")
data<-data.frame(R=data_fem$wing_c,
A=data_fem$host_c,
B=data_fem$sym_dist,
C=data_fem$thorax_c)
model_script = paste0(source_path,"generic models-gaussian glmer 3-FF.R")
model_comparisonsAIC(model_script)
anova(m13, m16, test="Chisq") # Adding A*C does not inprove fit
best.fem.wing <- lm(wing_c ~ sym_dist * thorax_c + host_c, data=data_fem)
tidy_regression(best.fem.wing, is_color=output_col)
data<-data.frame(R=data_fem$beak_c,
A=data_fem$host_c,
B=data_fem$sym_dist,
C=data_fem$thorax_c)
model_script = paste0(source_path,"generic models-gaussian glmer 3-FF.R")
model_comparisonsAIC(model_script)
anova(m5, m7, test="Chisq") # Adding B marginally improves fit
anova(m7, m11, test="Chisq") # Adding A*B does not improve fit
best.fem.beak <- lm(beak_c ~ host_c + sym_dist + thorax_c, data=data_fem)
tidy_regression(best.fem.beak, is_color=output_col)
plot(thorax ~ host_c, data=data_fem)
plot(thorax ~ sym_dist, data=data_fem)
gf_point(thorax_c ~ sym_dist, col=~host_c, data=data_fem)
output_col = FALSE #
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
data_tested <- data_tested[data_tested$trial_type=="T1",] # only the unique values pulled for those tested
data_tested <- center_data(data_tested)
data_all <- data_all %>%
filter(trial_type != "T2")
data_all <- center_data(data_all)
data_male <- data_tested[data_tested$sex=="M",]
data_male <- center_data(data_male)
data<-data.frame(R=data_male$thorax_c,
A=data_male$host_c,
B=data_male$sym_dist)
model_script = paste0(source_path,"generic models-gaussian glmer 2-FF.R")
model_comparisonsAIC(model_script)
anova(m3, m4, test="Chisq") # Adding A*B does not improve fit
best.male.thorax <- lm(thorax_c ~ host_c + sym_dist, data=data_male)
tidy_regression(best.male.thorax, is_color=output_col)
data<-data.frame(R=data_male$body_c,
A=data_male$host_c,
B=data_male$sym_dist)
model_script = paste0(source_path,"generic models-gaussian glmer 2-FF.R")
model_comparisonsAIC(model_script)
anova(m3, m4, test="Chisq") # Adding A*B does not improve fit
best.male.body <- lm(body_c ~ host_c + sym_dist, data=data_male)
tidy_regression(best.male.body, is_color=output_col)
data<-data.frame(R=data_male$wing_c,
A=data_male$host_c,
B=data_male$sym_dist,
C=data_male$thorax_c)
model_script = paste0(source_path,"generic models-gaussian glmer 3-FF.R")
model_comparisonsAIC(model_script)
anova(m3, m5, test="Chisq") # Adding A does not improve fit
anova(m3, m6, test="Chisq") # Adding B does not improve fit
best.male.wing <- lm(wing_c ~ thorax_c, data=data_male)
tidy_regression(best.male.wing, is_color=output_col)
data<-data.frame(R=data_male$beak_c,
A=data_male$host_c,
B=data_male$sym_dist,
C=data_male$thorax_c)
model_script = paste0(source_path,"generic models-gaussian glmer 3-FF.R")
model_comparisonsAIC(model_script)
anova(m5, m9, test="Chisq") # adding A*C does not improve fit
best.male.beak <- lm(wing_c ~ host_c + thorax_c, data=data_male)
tidy_regression(best.male.beak, is_color=output_col)
plot(thorax ~ host_c, data=data_male)
plot(thorax ~ sym_dist, data=data_male)
gf_point(thorax_c ~ sym_dist, col=~host_c, data=data_male)
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Dispersal/Winter_2020/stats/"
setwd(dir)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(readr)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
Round <- function(number){
# for plotting
x <- round(number, 1)
if(x%%1 == 0){
return(paste(as.character(x), ".0", sep = ""))
}
else{
return(x)
}
}
PCA_graphs <- function(dataset, PCA_title){
# cos2 and the alpha.var: alpha.var colours variables by cos2
# (importance of most important PC to variable),
# see https://personal.utdallas.edu/~herve/abdi-awPCA2010.pdf
GFpca <- PCA(dataset, scale.unit = TRUE, graph = TRUE, ncp = 10)
eig.val <- get_eigenvalue(GFpca)
var.val <- GFpca$var
print(eig.val) #will only show in in console
print(var.val)
scree <- fviz_eig(GFpca, addlabels = TRUE, ylim = c(0, 100))
print(scree)
labX <- paste("PC1 (", Round(eig.val[1, 2]), "%)", sep = "")
labY <- paste("PC1 (", Round(eig.val[2, 2]), "%)", sep = "")
leplot <- fviz_pca_biplot(GFpca, geom.id = c("point"),
geom.var = c("arrow", "text"),
alpha.var = "cos2",
label = "var", repel = T,
col.ind = "gray", col.var = "black")
print(leplot)
ggpubr::ggpar(leplot, title = PCA_title, xlab = labX, ylab = labY,
ggtheme = theme_classic(), font.main = c(20, "bold"),
font.x = 14, font.y = 14, font.tickslab = 12
)
D = cor(dataset)
test <- cor.mtest(dataset)$p
par(mfrow=c(1,2))
corrplot.mixed(D,lower.col = "black", number.cex = .7, p.mat=test, sig.level=0.05)
corrplot.mixed(D,lower.col = "black", number.cex = .7)
return(GFpca)
}
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Dispersal/Winter_2020/stats/"
setwd(dir)
library(plotly)
library(tidyr)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
d = read.csv("data/animate_eggs-perc.csv")
no_fly_color = 'rgb(224, 59, 40)'
T1_fly_color = 'rgb(69, 84, 255)'
both_fly_color = 'black'
ax_label = 24
ax_num = 25
line_width = 3
fig <- plot_ly(d, x = ~mass_per[1:6], y = ~No[1:6], type = 'scatter', mode = 'lines',
legendgroup = 'group1', name = 'T1 Eggs - Did Not Fly',
line = list(color = no_fly_color, width=line_width))
fig <- fig %>% add_trace(y = ~T1[1:6], legendgroup = 'group1', name = 'T1 Eggs - T1 Flew',
line = list(color = T1_fly_color, width=line_width))
fig <- fig %>% add_trace(y = ~Twice[1:6], legendgroup = 'group1', name = 'T1 Eggs - Flew Twice',
line = list(color = both_fly_color, width=line_width))
fig <- fig %>% add_trace(x = ~mass_per[7:20], y = ~No[7:20], legendgroup = 'group2', name = 'No Eggs - Did Not Fly',
line = list(color = no_fly_color, dash = 'dash', width=line_width))
fig <- fig %>% add_trace(x = ~mass_per[7:20], y = ~T1[7:20], legendgroup = 'group2', name = 'No Eggs - T1 Flew',
line = list(color = T1_fly_color, dash = 'dash', width=line_width))
fig <- fig %>% add_trace(x = ~mass_per[7:20], y = ~Twice[7:20], legendgroup = 'group2', name = 'No Eggs - Flew Twice',
line = list(color = both_fly_color, dash = 'dash', width=line_width))
fig <- fig %>% add_trace(x = ~mass_per[21:65], y = ~No[21:65], legendgroup = 'group3', name = '2 Eggs - Did Not Fly',
line = list(color = no_fly_color, dash = 'dashdot', width=line_width))
fig <- fig %>% add_trace(x = ~mass_per[21:65], y = ~T1[21:65], legendgroup = 'group3', name = '2 Eggs - T1 Flew',
line = list(color = T1_fly_color, dash = 'dashdot', width=line_width))
fig <- fig %>% add_trace(x = ~mass_per[21:65], y = ~Twice[21:65], legendgroup = 'group3', name = '2 Eggs - Flew Twice',
line = list(color = both_fly_color, dash='dashdot', width=line_width))
fig <- fig %>% add_trace(x = ~mass_per[66:93], y = ~No[66:93], legendgroup = 'group4', name = 'T2 Eggs - Did Not Fly',
line = list(color = no_fly_color, dash='dot', width=line_width))
fig <- fig %>% add_trace(x = ~mass_per[66:93], y = ~T1[66:93], legendgroup = 'group4', name = 'T2 Eggs - T1 Flew',
line = list(color = T1_fly_color, dash='dot', width=line_width))
fig <- fig %>% add_trace(x = ~mass_per[66:93], y = ~Twice[66:93], legendgroup = 'group4', name = 'T2 Eggs - Flew Twice',
line = list(color = both_fly_color, dash='dot', width=line_width))
fig <- fig %>% layout(xaxis = list(title="Percent Change in Mass from T1 to T2 (g)",
titlefont = list(size = ax_label),
tickfont = list(size = ax_num)),
yaxis = list(title="Flight Case Probability",
titlefont = list(size = ax_label),
tickfont = list(size = ax_num)))
ax <- list(zeroline = FALSE, showticklabels = TRUE, showline = TRUE, mirror = T, showgrid=FALSE)
fig <- fig %>% layout(xaxis = ax, yaxis = ax)
fig
knitr::opts_chunk$set(echo = TRUE)
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Dispersal/Winter_2020/stats/"
setwd(dir)
knitr::opts_chunk$set(echo = TRUE)
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Rsrc/"
script_names = c("center_flight_data.R", # Re-centers data
"clean_flight_data.R" # Loads and cleans data
)
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
d_all <- create_delta_data(data_tested) # winter data
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Rsrc/"
script_names = c("center_flight_data.R", # Re-centers data
"clean_flight_data.R", # Loads and cleans data
"unique_flight_data.R"  # 1 function: create_delta_data()
)
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
d_all <- create_delta_data(data_tested) # winter data
winter <- center_data(d_all, is_not_binded = FALSE)
center_data
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
d_all <- create_delta_data(data_tested) # winter data
winter <- center_data(d_all, is_not_unique_data = FALSE)
fall = clean_flight_data.Fall("data/all_flight_data-Fall2019.csv", morph_d)
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Rsrc/"
script_names = c("center_flight_data.R", # Re-centers data
"clean_flight_data.R", # Loads and cleans data
"unique_flight_data.R",  # 1 function: create_delta_data()
"clean_flight_data-Fall.R",  # 1 function: clean_flight_data.Fall()
"unique_flight_data-Fall.R" # 1 function: create_delta_data.Fall()
)
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Rsrc/"
script_names = c("center_flight_data.R", # Re-centers data
"clean_flight_data.R", # Loads and cleans data
"unique_flight_data.R",  # 1 function: create_delta_data()
"clean_flight_data-Fall.R",  # 1 function: clean_flight_data.Fall()
"unique_flight_data-Fall.R" # 1 function: create_delta_data.Fall()
)
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
d_all <- create_delta_data(data_tested) # winter data
winter <- center_data(d_all, is_not_unique_data = FALSE)
fall = clean_flight_data.Fall("data/all_flight_data-Fall2019.csv", morph_d)
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
d_all <- create_delta_data(data_tested) # winter data
winter <- center_data(d_all, is_not_unique_data = FALSE)
fall = clean_flight_data.Fall("data/all_flight_data-Fall2019.csv")
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
d_all <- create_delta_data(data_tested) # winter data
winter <- center_data(d_all, is_not_unique_data = FALSE)
data_path = paste0(dir,"/Dispersal/Winter_2020/stats/data/full_data-Fall2019.csv")
fall = clean_flight_data.Fall(datapath)
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
d_all <- create_delta_data(data_tested) # winter data
winter <- center_data(d_all, is_not_unique_data = FALSE)
data_path = paste0(dir,"/Dispersal/Winter_2020/stats/data/full_data-Fall2019.csv")
fall = clean_flight_data.Fall(data_path)
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Dispersal/Winter_2020/stats/"
data_path = paste0(dir,"/Dispersal/Winter_2020/stats/data/full_data-Fall2019.csv")
fall = clean_flight_data.Fall(data_path)
data_path = paste0(dir,"/Dispersal/Winter_2020/stats/data/full_data-Fall2019.csv")
dataFall = clean_flight_data.Fall(data_path)
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat/"
setwd(dir)
knitr::opts_chunk$set(echo = TRUE)
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Rsrc/"
script_names = c("center_flight_data.R", # Re-centers data
"clean_flight_data.R", # Loads and cleans data
"unique_flight_data.R",  # 1 function: create_delta_data()
"clean_flight_data-Fall.R",  # 1 function: clean_flight_data.Fall()
"unique_flight_data-Fall.R" # 1 function: create_delta_data.Fall()
)
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
d_all <- create_delta_data(data_tested) # winter data
winter <- center_data(d_all, is_not_unique_data = FALSE)
data_path = paste0(dir,"/Dispersal/Winter_2020/stats/data/full_data-Fall2019.csv")
dataFall = clean_flight_data.Fall(data_path)
data_path = paste0(dir,"/Dispersal/Winter_2020/stats/data/full_data-Fall2019.csv")
fall = clean_flight_data.Fall(data_path)
fall = create_delta_data.Fall(d)
data_all <- data[[1]]
data_tested <- data[[2]]
d_all <- create_delta_data(data_tested) # winter data
d_all <- create_delta_data(data_tested) # winter data
winter <- center_data(d_all, is_not_unique_data = FALSE)
data_path = paste0(dir,"/Dispersal/Winter_2020/stats/data/full_data-Fall2019.csv")
dataFall = clean_flight_data.Fall(data_path)
data_path = paste0(dir,"/Dispersal/Winter_2020/stats/data/full_data-Fall2019.csv")
fall = clean_flight_data.Fall(data_path)
fall = create_delta_data.Fall(d)
data_path = paste0(dir,"/Dispersal/Winter_2020/stats/data/full_data-Fall2019.csv")
d = clean_flight_data.Fall(data_path)
fall = create_delta_data.Fall(d)
fall = create_delta_data.Fall(d)
fall$season <- "fall"
fall$season <- "fall"
winter$season <- "winter"
fall$season <- "fall"
winter$season <- "winter"
# just extract the first two trials
fall$num_flew <- 0
fall$num_notflew <- 0
for(row in 1:length(fall$flew_b)){
n_flew <- sum(fall$flew_b[[row]][1:2] == 1)
fall$num_flew[[row]] <- n_flew
n_notflew <- sum(fall$flew_b[[row]][1:2] == 0)
fall$num_notflew[[row]] <- n_notflew
}
sd = rbind(fall, winter) # unique
fall
winter
sd = rbind(fall, winter) # unique
fall
winter
length(fall)
length(winter)
length(fall)
length(winter)
ncol(fall)
colnames(fall)
colnames(winter)
colnames(fall)
print("  ")
colnames(winter)
keep = c("ID", "sex", "population", "site", "host_plant", "sym_dist", "sex_c", "w_morph_c")
fall[, keep]
winter[, keep]
sd = rbind(fall[, keep], winter[, keep]) # unique
sd$f_prob<-sd$num_flew/(sd$num_flew+sd$num_notflew)
keep = c("ID", "sex", "population", "site", "host_plant", "sym_dist", "sex_c", "w_morph_c", "num_notflew", "num_flew")
sd = rbind(fall[, keep], winter[, keep]) # unique
fall[, keep]
winter[, keep]
keep = c("ID", "sex", "population", "site", "host_plant", "sym_dist", "sex_c", "w_morph_c", "num_notflew", "num_flew")
sd = rbind(fall[, keep], winter[, keep]) # unique
fall[, keep]
winter[, keep]
sd$f_prob<-sd$num_flew/(sd$num_flew+sd$num_notflew)
####season vs. flight prob
data_temp <- aggregate(f_prob~season, data=sd, FUN=mean)
keep = c("ID", "sex", "population", "site", "host_plant", "sym_dist", "sex_c", "w_morph_c", "num_notflew", "num_flew", "season")
sd = rbind(fall[, keep], winter[, keep]) # unique
sd$f_prob<-sd$num_flew/(sd$num_flew+sd$num_notflew)
####season vs. flight prob
data_temp <- aggregate(f_prob~season, data=sd, FUN=mean)
data_temp$trials <-c(sum(sd$num_flew[sd$season=="fall"]+sd$num_notflew[sd$season=="fall"]), sum(sd$num_flew[sd$season=="winter"]+sd$num_notflew[sd$season=="winter"]))
#calculate binomial confidence interval
data_temp$successes <- c(sum(sd$num_flew[sd$season=="fall"]), sum(sd$num_flew[sd$season=="winter"]))
data_temp$CI<-binom.confint(data_temp$successes, data_temp$trials, methods="exact")
par(mai=c(1, 1, .2, .2), ps=22) # fig.height=2.7, fig.width=2.7
plot(data_temp$CI$mean~c(1,2), xaxt='n', ylab="Flight probability", xlab="Season", ylim=c(0,1), xlim=c(0.5,2.5), cex=3, pch=19, col=c("red", "blue"))
lines(x=xy.coords(x=c(1,1), y=c(data_temp$CI$lower[1], data_temp$CI$upper[1])), lwd=3, col="red")
lines(x=xy.coords(x=c(2,2), y=c(data_temp$CI$lower[2], data_temp$CI$upper[2])), lwd=3, col="blue")
axis(side=1, at=c(1,2), labels=c("fall", "winter"))
mtext(text=c("N=145", "N=281"), at=c(1,2), side=1, line=-1.2)
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat/"
setwd(dir)
knitr::opts_chunk$set(echo = TRUE)
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Rsrc/"
script_names = c("center_flight_data.R", # Re-centers data
"clean_flight_data.R", # Loads and cleans data
"unique_flight_data.R",  # 1 function: create_delta_data()
"clean_flight_data-Fall.R",  # 1 function: clean_flight_data.Fall()
"unique_flight_data-Fall.R" # 1 function: create_delta_data.Fall()
)
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
d_all <- create_delta_data(data_tested) # winter data
winter <- center_data(d_all, is_not_unique_data = FALSE)
data_path = paste0(dir,"/Dispersal/Winter_2020/stats/data/full_data-Fall2019.csv")
d = clean_flight_data.Fall(data_path)
fall = create_delta_data.Fall(d)
fall$season <- "fall"
winter$season <- "winter"
# just extract the first two trials
fall$num_flew <- 0
fall$num_notflew <- 0
for(row in 1:length(fall$flew_b)){
n_flew <- sum(fall$flew_b[[row]][1:2] == 1)
fall$num_flew[[row]] <- n_flew
n_notflew <- sum(fall$flew_b[[row]][1:2] == 0)
fall$num_notflew[[row]] <- n_notflew
}
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Dispersal/Winter_2020/stats/"
setwd(dir)
# Load some commonly used packages.
library(MASS)
library(gridExtra)
library(tidyverse)
library(mosaic)
library(broom)
library(dplyr)
library(knitr)
library(readr)
library(chron)
library(stringr)
# Set numerical output display parameters
options(width=70, digits=4, scipen=8)
# Set R output size a bit smaller than default
knitr::opts_chunk$set(size='small', prompt=FALSE, comment="")
# set plot theme to black and white
ggplot2::theme_set(ggplot2::theme_bw())
ggplot2::theme_update(panel.grid.major = ggplot2::element_line(colour = "grey75"))
# Spatial Libraries
library(sf)
library(sp)
library(lubridate)
library(tmap)
library(geojsonR)
library(geojsonio)
library(lwgeom) # lwgeom is known as the light-weight geometry library used by 'PostGIS'
library(cleangeo)
library(maps)
library(shinyjs)
library(tmaptools)
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat/Rsrc/"
script_names = c("center_flight_data.R", # Re-centers data
"clean_flight_data.R" # Loads and cleans data
)
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
all_data <- data[[1]]
data_all <- data[[2]] # bugs tested
# filtered_data <- full_data[,c("ID", "filename", "chamber", "set_number", "average_speed",
#                         "total_flight_time", "distance", "shortest_flying_bout",
#                         "longest_flying_bout", "portion_flying", "max_speed",
#                         "sex", "population", "site", "host_plant", "flew", "flew_b", flight_type",
#                         "mass", "eggs", "latitude", "longitude")]
filtered_data <- select(data_all, ID, filename, chamber, set_number, average_speed, # recently added flew_b
total_flight_time, distance, shortest_flying_bout,
longest_flying_bout, max_speed,
sex, population, site, host_plant, host_temp, flew, flew_b, flight_type, mass, eggs_b,
total_eggs, beak, thorax, wing, body, sym_dist, tested, w_morph,
lat = latitude,
lon = longitude)
# filtered_data <- full_data[,c("ID", "filename", "chamber", "set_number", "average_speed",
#                         "total_flight_time", "distance", "shortest_flying_bout",
#                         "longest_flying_bout", "portion_flying", "max_speed",
#                         "sex", "population", "site", "host_plant", "flew", "flew_b", flight_type",
#                         "mass", "eggs", "latitude", "longitude")]
filtered_data <- select(data_all, ID, filename, chamber, set_number, average_speed, # recently added flew_b
total_flight_time, distance, shortest_flying_bout,
longest_flying_bout, max_speed,
sex, population, site, host_plant, host_temp, flew, flew_b, flight_type, mass, eggs_b,
total_eggs, beak, thorax, wing, body, sym_dist, tested, w_morph,
lat = latitude,
lon = longitude)
filtered_data <- full_data[,c("ID", "filename", "chamber", "set_number", "average_speed",
filtered_data <- full_data[,c("ID", "filename", "chamber", "set_number", "average_speed",
"total_flight_time", "distance", "shortest_flying_bout",
"longest_flying_bout", "portion_flying", "max_speed",
"sex", "population", "site", "host_plant", "flew", "flew_b", "flight_type",
"mass", "eggs", "latitude", "longitude")]
filtered_data <- select(data_all, ID, filename, chamber, set_number, average_speed, # recently added flew_b
filtered_data <- select(data_all, ID, filename, chamber, set_number, average_speed, # recently added flew_b
total_flight_time, distance, shortest_flying_bout,
longest_flying_bout, max_speed,
sex, population, site, host_plant, host_temp, flew, flew_b, flight_type, mass, eggs_b,
total_eggs, beak, thorax, wing, body, sym_dist, tested, w_morph,
lat = latitude,
lon = longitude)
filtered_data <- select(data_all, ID)
