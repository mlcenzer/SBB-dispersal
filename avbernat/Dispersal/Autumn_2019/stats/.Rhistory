a
unique(a)
as.Date("23-May-16", "%d-%b-%y")
as.Date("23-Apr-16", "%d-%b-%y")
as.Date("23-Ju-16", "%d-%b-%y")
as.Date("23-Jun-16", "%d-%b-%y")
as.Date("23-June-16", "%d-%b-%y")
abis<-strptime(a,format="%b %Y") #defining what is the original format of your date
abis
d$datetime
as.Date("June-16", "%b-%y")
as.Date("23-June-16", "%d-%b-%y")
as.Date("16-June", "%y-%b")
rm(list=ls())
library(lme4)
library(zoo)
library(rethinking)
library(dplyr)
library(ggplotify)
library(gridExtra)
library(ggformula)
library(tidyselect)
# time series libraries
library(tseries)
library(ggplot2)
library(data.table)
library(forecast)
library(tidyverse)
library(fma)
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/All_Morphology/stats/"
setwd(dir)
knitr::opts_chunk$set(echo = TRUE)
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Rsrc/"
script_names = c("compare_models.R","regression_output.R", "clean_morph_data.R",
"AICprobabilities.R")
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
data_list <- read_morph_data("data/allmorphology9.21.20.csv")
raw_data = data_list[[1]]
data_long = data_list[[2]]
# Datetime
raw_data$date <- paste(raw_data$month, raw_data$year, sep="/")
raw_data$datetime <- as.yearmon(raw_data$date, "%B/%Y")
raw_data$datetime <- as.factor(raw_data$datetime)
n_missing_dates = nrow(raw_data[is.na(raw_data$datetime),])
cat("number of missing dates:", n_missing_dates)
# merge May 2015 with April 2015 because very few bugs were collected in May 2015.
raw_data$date[raw_data$date == "May/2015"] = "April/2015"
raw_data$datetime <- as.yearmon(raw_data$date, "%B/%Y")
raw_data$datetime <- as.factor(raw_data$datetime)
raw_data
d = raw_data %>%
filter(!is.na(wing), !is.na(datetime))
wing = d$wing
date = d$datetime
ts = xts(wing, date)
class(d$datetime)
monyear <- d$datetime
as.Date(paste(monyear,"-01",sep=""))
paste(monyear,"-01",sep="")
paste(monyear," 01",sep="")
monyeardate <- paste(monyear," 01",sep="")
as.Date(monyeardate, "%b %Y %d")
date = as.Date(monyeardate, "%b %Y %d")
ts = xts(wing, date)
plot(ts)
wing
plot(ts)
wing(mm) = xts(wing, date)
wing_mm = xts(wing, date)
plot(wing_mm)
hp$test <- diff(log(wing_mm$wing)) # <--- Make sure you understand what's happening here!
wing_mm
colnames(wing_mm) <- "wing"
hp$test <- diff(log(wing_mm$wing)) # <--- Make sure you understand what's happening here!
wing_mm$test <- diff(log(wing_mm$wing)) # <--- Make sure you understand what's happening here!
wing_mm <- wing_mm[-1,]
plot(wing_mm$test )
d = raw_data %>%
filter(!is.na(wing), !is.na(datetime))
tapply(X=d$wing, INDEX=d$datetime, FUN=mean, na.rm=T)
wing_avg = tapply(X=d$wing, INDEX=d$datetime, FUN=mean, na.rm=T)
wing_avg
monyear = unique(d$datetime)
monyear
wing_avg
#wing = d$wing
#monyear <- d$datetime
monyeardate <- paste(monyear," 01",sep="")
date = as.Date(monyeardate, "%b %Y %d")
wing_mm = xts(wing, date)
wing_mm = xts(wing_avg, date)
plot(wing_mm)
colnames(wing_mm) <- "wing"
wing_mm$test <- diff(log(wing_mm$wing)) # <--- Make sure you understand what's happening here!
wing_mm <- wing_mm[-1,]
plot(wing_mm$test)
wing_mm$logdiff <- diff(log(wing_mm$wing)) # <--- Make sure you understand what's happening here!
wing_mm <- wing_mm[-1,]
plot(wing_mm$logdiff)
d = raw_data %>%
filter(!is.na(wing), !is.na(datetime))
wing_avg = tapply(X=d$wing, INDEX=d$datetime, FUN=mean, na.rm=T)
monyear = unique(d$datetime)
monyeardate <- paste(monyear," 01",sep="")
date = as.Date(monyeardate, "%b %Y %d")
wing_mm = xts(wing_avg, date)
plot(wing_mm)
colnames(wing_mm) <- "wing"
wing_mm$logdiff <- diff(log(wing_mm$wing)) # <--- Make sure you understand what's happening here!
wing_mm <- wing_mm[-1,]
plot(wing_mm$logdiff)
monyear
library(xts)
d = raw_data %>%
filter(!is.na(wing), !is.na(datetime))
wing_avg = tapply(X=d$wing, INDEX=d$datetime, FUN=mean, na.rm=T)
monyear = unique(d$datetime)
monyeardate <- paste(monyear," 01",sep="")
date = as.Date(monyeardate, "%b %Y %d")
wing_mm = xts(wing_avg, date)
plot(wing_mm)
colnames(wing_mm) <- "wing"
wing_mm$logdiff <- diff(log(wing_mm$wing)) # <--- Make sure you understand what's happening here!
wing_mm <- wing_mm[-1,]
plot(wing_mm$logdiff)
library(tseries)
adf.test(wing_mm$logdiff)
library(xts)
d = raw_data %>%
filter(!is.na(wing), !is.na(datetime))
wing_avg = tapply(X=d$wing, INDEX=d$datetime, FUN=mean, na.rm=T)
monyear = unique(d$datetime)
monyeardate <- paste(monyear," 01",sep="")
date = as.Date(monyeardate, "%b %Y %d")
wing_mm = xts(wing_avg, date)
plot(wing_mm)
colnames(wing_mm) <- "wing"
wing_mm$logdiff <- diff(log(wing_mm$wing)) # <--- Make sure you understand what's happening here!
wing_mm <- wing_mm[-1,]
plot(wing_mm$logdiff)
library(tseries)
adf.test(wing_mm$logdiff) # this is stationary
adf.test(wing_mm$wing) # this is stationary
adf.test(wing_mm$logdiff) # this is stationary
library(xts)
d = raw_data %>%
filter(!is.na(wing), !is.na(datetime))
wing_avg = tapply(X=d$wing, INDEX=d$datetime, FUN=mean, na.rm=T)
monyear = unique(d$datetime)
monyeardate <- paste(monyear," 01",sep="")
date = as.Date(monyeardate, "%b %Y %d")
wing_mm = xts(wing_avg, date)
plot(wing_mm)
colnames(wing_mm) <- "wing"
wing_mm$logdiff <- diff(log(wing_mm$wing)) # <--- Make sure you understand what's happening here!
wing_mm <- wing_mm[-1,]
plot(wing_mm$logdiff)
library(tseries)
adf.test(wing_mm$logdiff) # this is stationary
# Make an ACF plot
Acf(wing_mm$logdiff, main='')
# Make a PACF plot
Acf(wing_mm$logdif, type="partial", main='')
# Make an ACF plot
Acf(wing_mm$logdiff, main='')
# Make a PACF plot
Acf(wing_mm$logdif, type="partial", main='')
rm(list=ls())
library(lme4)
library(zoo)
library(data.table)
library(forecast)
library(dplyr)
library(ggplotify)
library(gridExtra)
library(ggplot2)
library(ggformula)
library(tidyselect)
library(tidyverse)
# time series libraries
library(tseries)
library(xts)
library(fma)
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/All_Morphology/stats/"
setwd(dir)
knitr::opts_chunk$set(echo = TRUE)
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Rsrc/"
script_names = c("compare_models.R","regression_output.R", "clean_morph_data.R",
"AICprobabilities.R")
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
data_list <- read_morph_data("data/allmorphology9.21.20.csv")
raw_data = data_list[[1]]
data_long = data_list[[2]]
# Datetime
raw_data$date <- paste(raw_data$month, raw_data$year, sep="/")
raw_data$datetime <- as.yearmon(raw_data$date, "%B/%Y")
raw_data$datetime <- as.factor(raw_data$datetime)
n_missing_dates = nrow(raw_data[is.na(raw_data$datetime),])
cat("number of missing dates:", n_missing_dates)
# merge May 2015 with April 2015 because very few bugs were collected in May 2015.
raw_data$date[raw_data$date == "May/2015"] = "April/2015"
raw_data$datetime <- as.yearmon(raw_data$date, "%B/%Y")
raw_data$datetime <- as.factor(raw_data$datetime)
raw_data
# remove NA dates and get wing length averages
d = raw_data %>%
filter(!is.na(wing), !is.na(datetime))
wing_avg = tapply(X=d$wing, INDEX=d$datetime, FUN=mean, na.rm=T)
monyear = unique(d$datetime)
monyeardate <- paste(monyear," 01",sep="")
date = as.Date(monyeardate, "%b %Y %d")
# Calculate wing2body
raw_data$wing2body = raw_data$wing / raw_data$body
# Calculate wing2body
raw_data$wing2body = raw_data$wing / raw_data$body
# Calculate wing2body
raw_data$wing2body = raw_data$wing / raw_data$body
raw_data$wing
raw_data$body
# Calculate wing2body
raw_data$wing2body = raw_data$wing / as.numeric(raw_data$body)
raw_data$wing2body = (raw_data$wing / as.numeric(raw_data$body), na.rm=T)
as.numeric(raw_data$body)
raw_data
data_long<-raw_data[raw_data$w_morph=="L",]
###remove individuals with torn wings first.
data_long$drop <- FALSE
for(row in 1:nrow(data_long)){
if(length(unlist(strsplit(strsplit(paste("test ", data_long$notes[row], " test", sep=""), "torn")[[1]], "wing")))>2){
#browser()
data_long$drop[row] <- TRUE
}
}
data_long <- data_long[data_long$drop==FALSE,]
data_long$wing2body <- data_long$wing/as.numeric(data_long$body)
# remove NA dates
d = data_long %>%
filter(!is.na(wing2body), !is.na(datetime))
# get wing length averages using vectorization
wing_avg = tapply(X=d$wing, INDEX=d$datetime, FUN=mean, na.rm=T)
monyear = unique(d$datetime)
# generate datetime object | datetime object needs a date, which I initialized at 01 for each month
monyeardate <- paste(monyear," 01",sep="")
date = as.Date(monyeardate, "%b %Y %d")
wing_mm = xts(wing_avg, date)
wing_avg
monyear
# remove NA dates
d = data_long %>%
filter(!is.na(wing2body), !is.na(datetime))
# get wing length averages using vectorization
wing_avg = tapply(X=d$wing, INDEX=d$datetime, FUN=mean, na.rm=T)
monyear = unique(d$datetime)
# generate datetime object | datetime object needs a date, which I initialized at 01 for each month
monyeardate <- paste(monyear," 01",sep="")
date = as.Date(monyeardate, "%b %Y %d")
wing_mm = xts(wing_avg, date)
# remove NA dates
d = data_long %>%
filter(!is.na(wing2body), !is.na(datetime))
# get wing length averages using vectorization
ratio_avg = tapply(X=d$wing, INDEX=d$datetime, FUN=mean, na.rm=T)
monyear = unique(d$datetime)
# generate datetime object | datetime object needs a date, which I initialized at 01 for each month
monyeardate <- paste(monyear," 01",sep="")
date = as.Date(monyeardate, "%b %Y %d")
wing_mm = xts(ratio_avg, date)
ratio_avg
length(ratio_avg)
length(date)
length(ratio_avg)
ratio_avg
# remove NA dates
d = data_long %>%
filter(!is.na(wing2body), !is.na(datetime))
# get wing length averages using vectorization
ratio_avg = tapply(X=d$wing2body, INDEX=d$datetime, FUN=mean, na.rm=T)
monyear = unique(d$datetime)
# generate datetime object | datetime object needs a date, which I initialized at 01 for each month
monyeardate <- paste(monyear," 01",sep="")
date = as.Date(monyeardate, "%b %Y %d")
wing_mm = xts(ratio_avg, date)
ratio_avg
!is.na(ratio_avg)
ratio_avg[!is.na(ratio_avg)]
ratio_avg = ratio_avg[!is.na(ratio_avg)]
monyear = unique(d$datetime)
# generate datetime object | datetime object needs a date, which I initialized at 01 for each month
monyeardate <- paste(monyear," 01",sep="")
date = as.Date(monyeardate, "%b %Y %d")
wing_mm = xts(ratio_avg, date)
wing_mm = xts(ratio_avg, date)
plot(wing_mm)
colnames(wing_mm) <- "wing"
wing_mm$logdiff <- diff(log(wing_mm$wing)) # <--- Make sure you understand what's happening here!
wing_mm <- wing_mm[-1,]
plot(wing_mm$logdiff)
adf.test(wing_mm$logdiff) # this is stationary
ratio = xts(ratio_avg, date)
plot(ratio)
colnames(ratio) <- "wing"
ratio$logdiff <- diff(log(ratio$wing)) # <--- Make sure you understand what's happening here!
ratio <- ratio[-1,]
plot(ratio$logdiff)
adf.test(ratio$logdiff) # this is stationary
ratio = xts(ratio_avg, date)
plot(ratio)
colnames(ratio) <- "wing2body"
ratio$logdiff <- diff(log(ratio$wing)) # <--- Make sure you understand what's happening here!
ratio <- ratio[-1,]
plot(ratio$logdiff)
adf.test(ratio$logdiff) # this is stationary
plot(ratio$wing2body)
ratio = xts(ratio_avg, date)
plot(ratio)
colnames(ratio) <- "wing2body"
ratio$logdiff <- diff(log(ratio$wing)) # <--- Make sure you understand what's happening here!
ratio <- ratio[-1,]
plot(ratio$logdiff)
adf.test(ratio$wing2body) # this is stationary
ratio = xts(ratio_avg, date)
plot(ratio)
colnames(ratio) <- "wing2body"
ratio$logdiff <- diff(log(ratio$wing)) # <--- Make sure you understand what's happening here!
ratio <- ratio[-1,]
plot(ratio$logdiff)
adf.test(ratio$logdiff) # this is stationary
ratio = xts(ratio_avg, date)
colnames(ratio) <- "wing2body"
plot(ratio)
adf.test(ratio$wing2body)
ratio$logdiff <- diff(log(ratio$wing)) # <--- Make sure you understand what's happening here!
ratio <- ratio[-1,]
plot(ratio$logdiff)
adf.test(ratio$logdiff) # this is stationary
rm(list=ls())
library(lme4)
library(zoo)
library(data.table)
library(forecast)
library(dplyr)
library(ggplotify)
library(gridExtra)
library(ggplot2)
library(ggformula)
library(tidyselect)
library(tidyverse)
# time series libraries
library(tseries)
library(xts)
library(fma)
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/All_Morphology/stats/"
setwd(dir)
knitr::opts_chunk$set(echo = TRUE)
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Rsrc/"
script_names = c("compare_models.R","regression_output.R", "clean_morph_data.R",
"AICprobabilities.R")
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
data_list <- read_morph_data("data/allmorphology9.21.20.csv")
raw_data = data_list[[1]]
data_long = data_list[[2]]
# Datetime
raw_data$date <- paste(raw_data$month, raw_data$year, sep="/")
raw_data$datetime <- as.yearmon(raw_data$date, "%B/%Y")
raw_data$datetime <- as.factor(raw_data$datetime)
n_missing_dates = nrow(raw_data[is.na(raw_data$datetime),])
cat("number of missing dates:", n_missing_dates)
# merge May 2015 with April 2015 because very few bugs were collected in May 2015.
raw_data$date[raw_data$date == "May/2015"] = "April/2015"
raw_data$datetime <- as.yearmon(raw_data$date, "%B/%Y")
raw_data$datetime <- as.factor(raw_data$datetime)
raw_data
# remove NA dates
d = raw_data %>%
filter(!is.na(wing), !is.na(datetime))
# get wing length averages using vectorization
wing_avg = tapply(X=d$wing, INDEX=d$datetime, FUN=mean, na.rm=T)
monyear = unique(d$datetime)
# generate datetime object | datetime object needs a date, which I initialized at 01 for each month
monyeardate <- paste(monyear," 01",sep="")
date = as.Date(monyeardate, "%b %Y %d")
wing_mm = xts(wing_avg, date)
colnames(wing_mm) <- "wing"
plot(wing_mm)
adf.test(wing_mm$wing) # this is not stationary
wing_mm$logdiff <- diff(log(wing_mm$wing)) # <--- Make sure you understand what's happening here!
wing_mm <- wing_mm[-1,]
plot(wing_mm$logdiff)
adf.test(wing_mm$logdiff) # this is stationary
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Dispersal/Winter_2020/stats/"
setwd(dir)
# tables
library(knitr)
library(kableExtra)
# plotting
library(rethinking)
library(ggformula)
library(plot.matrix)
library(plotly)
library(tidyr)
# modeling and data manipulation
library(lme4)
library(nnet) # multinom package
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
# key = response in T2 - response in T1
Event = c("flew in both trials", "flew in T2 only", " flew in neither trials", "flew in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
column_spec(1, width="6cm", background="white") %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
# key = response in T2 - response in T1
Event = c("flew in both trials", "flew in T2 only", " flew in neither trials", "flew in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
column_spec(1, width="6cm", background="white") %>%
column_spec(2, width="6cm", background="white") %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
# key = response in T2 - response in T1
Event = c("flew in both trials", "flew in T2 only", " flew in neither trials", "flew in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
column_spec(1, width="3cm", background="white") %>%
column_spec(2, width="6cm", background="white") %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
# key = response in T2 - response in T1
Event = c("flew in both trials", "flew in T2 only", " flew in neither trials", "flew in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
column_spec(1, width="2cm", background="white") %>%
column_spec(2, width="6cm", background="white") %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
# key = response in T2 - response in T1
Event = c("flew in both trials", "flew in T2 only", " flew in neither trials", "flew in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
column_spec(1, width="2cm", background="white") %>%
column_spec(2, width="6cm") %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
# key = response in T2 - response in T1
Event = c("flew in both trials", "flew in T2 only", " flew in neither trials", "flew in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
column_spec(1, width="2cm") %>%
column_spec(2, width="6cm") %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
# key = response in T2 - response in T1
Event = c("flew in both trials", "flew in T2 only", " flew in neither trials", "flew in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
column_spec(1, width="2cm") %>%
column_spec(2, width="1cm") %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
# key = response in T2 - response in T1
Event = c("flew in both trials", "flew in T2 only", " flew in neither trials", "flew in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
# key = response in T2 - response in T1
Event = c("laid eggs in both trials", "laid eggs in T2 only", "laid eggs in neither trials", "laid eggs in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
# key = response in T2 - response in T1
Event = c("flew in both trials", "flew in T2 only", " flew in neither trials", "flew in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
