pp6 = pp
df6 = df
plot5 = function(df, pp, gradient=TRUE, circles=TRUE) {
c = 0.65
plot(df$mass_per[Mrows], pp[Mrows,1], ylim=c(-0.00,0.8), xlim=c(-25,58), col="red",type="l",
ylab=" ", xlab="Percent Mass Change from T1 to T2 (%)",
lty=1, cex.axis=1.2, cex.lab=1.3)
points(df$mass_per[Mrows], pp[Mrows,2], col="blue", type="l", cex=0.45, lty=1)
points(df$mass_per[Mrows], pp[Mrows,3], col="darkgreen", type="l", cex=0.45, lty=1)
points(df$mass_per[Mrows], pp[Mrows,4], col="darkred", type="l", cex=0.45, lty=1)
mtext("Males", side=3, adj=0.05, line=-2, cex=1.5, font=2)
mtext("C", side=3, adj=0.01, line=0.5, cex=1.5, font=2)
text(22,0.35, labels="Flew in T1 only", col="blue")
text(52,0.17, labels="Did Not Fly", col="red")
text(-16,0, labels="Flew in T2 only", col="darkgreen")
text(13,0.77, labels="Flew Twice", col="maroon") # 13,0.77
if (circles) {
legend(38.5, .81,
pch=c(16,1),
title="Wing-to-body",
legend=c("> mean", "< mean"),
cex=1.1)
}
if (gradient) {
legend(38.5, .81,
pch=c(16),
title="Wing-to-body",
col=c("grey", "black"),
legend=c("high", "low"),
cex=1.1)
}
if (gradient) {
rbPal <- colorRampPalette(c('black','red'))
df$w2b_col <- rbPal(10)[as.numeric(cut(df$wing2body,breaks = 10))]
points(df$mass_per[Mrows], pp[Mrows, 1], pch=20, col=df$w2b_col[Mrows])
rbPal <- colorRampPalette(c('black','blue'))
df$w2b_col <- rbPal(10)[as.numeric(cut(df$wing2body,breaks = 10))]
points(df$mass_per[Mrows], pp[Mrows, 2], pch=20, col=df$w2b_col[Mrows])
rbPal <- colorRampPalette(c('black','palegreen2'))
df$w2b_col <- rbPal(10)[as.numeric(cut(df$wing2body,breaks = 10))]
points(df$mass_per[Mrows], pp[Mrows, 3], pch=20, col=df$w2b_col[Mrows])
rbPal <- colorRampPalette(c('black','violetred1'))
df$w2b_col <- rbPal(10)[as.numeric(cut(df$wing2body,breaks = 10))]
points(df$mass_per[Mrows], pp[Mrows, 4], pch=20, col=df$w2b_col[Mrows])
}
if (circles) {
# Mark points in the graph with high wing2body ratio vs. points with low wing2body ratio.
test <- df[with(df, order(wing2body)),] # ascending order
#test$index
small = test %>%
filter(sex =="M", wing2body < 0.7184934)
large = test %>%
filter(sex == "M", wing2body > 0.7184934)
srows = small$index
lrows = large$index
points(df$mass_per[lrows], pp[lrows,1], col="red", type="p", cex=c, pch=16)
points(df$mass_per[srows], pp[srows,1], col="red", type="p", cex=c)
# those with smaller wing2body ratio were more likely to NOT fly
points(df$mass_per[lrows], pp[lrows,2], col="blue", type="p", cex=c, pch=16)
points(df$mass_per[srows], pp[srows,2], col="blue", type="p", cex=c)
points(df$mass_per[lrows], pp[lrows,3], col="darkgreen", type="p", cex=c, pch=16)
points(df$mass_per[srows], pp[srows,3], col="darkgreen", type="p", cex=c)
points(df$mass_per[lrows], pp[lrows,4], col="darkred", type="p", cex=c, pch=16)
points(df$mass_per[srows], pp[srows,4], col="darkred", type="p", cex=c)
}
}
par(mfrow=c(1,2), tcl=-0.5) # length of tick marks set at default
par(mai=c(1,0.85,0.4,0)) # bottom, right, top, left
plot4(df6,pp6, gradient=TRUE, circles=FALSE)
par(mai=c(1,0.6,0.4,0.05))
plot5(df6,pp6, gradient=TRUE, circles=FALSE)
plot5 = function(df, pp, gradient=TRUE, circles=TRUE) {
c = 0.65
plot(df$mass_per[Mrows], pp[Mrows,1], ylim=c(-0.00,0.8), xlim=c(-25,58), col="red",type="l",
ylab=" ", xlab="Percent Mass Change from T1 to T2 (%)",
lty=1, cex.axis=1.2, cex.lab=1.3)
points(df$mass_per[Mrows], pp[Mrows,2], col="blue", type="l", cex=0.45, lty=1)
points(df$mass_per[Mrows], pp[Mrows,3], col="darkgreen", type="l", cex=0.45, lty=1)
points(df$mass_per[Mrows], pp[Mrows,4], col="darkred", type="l", cex=0.45, lty=1)
mtext(expression(italic("Males")), side=3, adj=0.05, line=-2, cex=1.5, font=2)
mtext("C", side=3, adj=0.01, line=0.5, cex=1.5, font=2)
text(22,0.35, labels="Flew in T1 only", col="blue")
text(52,0.17, labels="Did Not Fly", col="red")
text(-16,0, labels="Flew in T2 only", col="darkgreen")
text(13,0.77, labels="Flew Twice", col="maroon") # 13,0.77
if (circles) {
legend(38.5, .81,
pch=c(16,1),
title="Wing-to-body",
legend=c("> mean", "< mean"),
cex=1.1)
}
if (gradient) {
legend(38.5, .81,
pch=c(16),
title="Wing-to-body",
col=c("grey", "black"),
legend=c("high", "low"),
cex=1.1)
}
if (gradient) {
rbPal <- colorRampPalette(c('black','red'))
df$w2b_col <- rbPal(10)[as.numeric(cut(df$wing2body,breaks = 10))]
points(df$mass_per[Mrows], pp[Mrows, 1], pch=20, col=df$w2b_col[Mrows])
rbPal <- colorRampPalette(c('black','blue'))
df$w2b_col <- rbPal(10)[as.numeric(cut(df$wing2body,breaks = 10))]
points(df$mass_per[Mrows], pp[Mrows, 2], pch=20, col=df$w2b_col[Mrows])
rbPal <- colorRampPalette(c('black','palegreen2'))
df$w2b_col <- rbPal(10)[as.numeric(cut(df$wing2body,breaks = 10))]
points(df$mass_per[Mrows], pp[Mrows, 3], pch=20, col=df$w2b_col[Mrows])
rbPal <- colorRampPalette(c('black','violetred1'))
df$w2b_col <- rbPal(10)[as.numeric(cut(df$wing2body,breaks = 10))]
points(df$mass_per[Mrows], pp[Mrows, 4], pch=20, col=df$w2b_col[Mrows])
}
if (circles) {
# Mark points in the graph with high wing2body ratio vs. points with low wing2body ratio.
test <- df[with(df, order(wing2body)),] # ascending order
#test$index
small = test %>%
filter(sex =="M", wing2body < 0.7184934)
large = test %>%
filter(sex == "M", wing2body > 0.7184934)
srows = small$index
lrows = large$index
points(df$mass_per[lrows], pp[lrows,1], col="red", type="p", cex=c, pch=16)
points(df$mass_per[srows], pp[srows,1], col="red", type="p", cex=c)
# those with smaller wing2body ratio were more likely to NOT fly
points(df$mass_per[lrows], pp[lrows,2], col="blue", type="p", cex=c, pch=16)
points(df$mass_per[srows], pp[srows,2], col="blue", type="p", cex=c)
points(df$mass_per[lrows], pp[lrows,3], col="darkgreen", type="p", cex=c, pch=16)
points(df$mass_per[srows], pp[srows,3], col="darkgreen", type="p", cex=c)
points(df$mass_per[lrows], pp[lrows,4], col="darkred", type="p", cex=c, pch=16)
points(df$mass_per[srows], pp[srows,4], col="darkred", type="p", cex=c)
}
}
par(mfrow=c(1,2), tcl=-0.5) # length of tick marks set at default
par(mai=c(1,0.85,0.4,0)) # bottom, right, top, left
plot4(df6,pp6, gradient=TRUE, circles=FALSE)
par(mai=c(1,0.6,0.4,0.05))
plot5(df6,pp6, gradient=TRUE, circles=FALSE)
par(mfrow=c(1,2), tcl=-0.5) # length of tick marks set at default
par(mai=c(1,0.85,0.4,0)) # bottom, right, top, left
plot4(df6,pp6, gradient=FALSE, circles=TRUE)
par(mai=c(1,0.6,0.4,0.05))
plot5(df6,pp6, gradient=FALSE, circles=TRUE)
par(mfrow=c(1,2), tcl=-0.5) # length of tick marks set at default
par(mai=c(1,0.85,0.4,0)) # bottom, right, top, left
plot4(df6,pp6, gradient=TRUE, circles=FALSE)
par(mai=c(1,0.6,0.4,0.05))
plot5(df6,pp6, gradient=TRUE, circles=FALSE)
par(mfrow=c(1,1), tcl=-0.5)
#plot(0, xaxt = 'n', yaxt = 'n', bty = 'n', pch = '', ylab = '', xlab = '')
#par(mai=c(1,0,0.4,0.05))
plot3(df3,pp3)
plot4(df6,pp6)
plot4(df6,pp6, gradient=TRUE, circles=FALSE)
plot5(df6,pp6, gradient=TRUE, circles=FALSE)
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Dispersal/Winter_2020/stats/"
setwd(dir)
# modeling and data manipulation
library(lme4)
library(dplyr)
library(nnet) # multinom package
# tables
library(knitr)
library(kableExtra)
# plotting
library(rethinking)
library(ggformula)
library(plot.matrix)
knitr::opts_chunk$set(echo = TRUE)
# key = response in T2 - response in T1
Event = c("flew in both trials", "flew in T2 only", " flew in neither trials", "flew in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Rsrc/"
script_names = c("center_flight_data.R", # Re-centers data
"clean_flight_data.R", # Loads and cleans data
"unique_flight_data.R",
"get_warnings.R",
"compare_models.R",
"regression_output.R", # Cleans regression outputs; prints in color or B&W
"AICprobabilities.R")
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
output_col = FALSE # Change to TRUE if working in Base R or RStudio; FALSE if generating an HTML
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
d <- create_delta_data(data_tested)
# for machine learning | creates CSV files to be read into the python script
#test = d[,c(1:30,59,63:73)] # for machine learning
#short_test = d[,c(1:2,5,66:68,71:73)]
#write.csv(test, file="unique_data-Winter2020.csv")
#write.csv(short_test, file="unique_data-Winter2020.csv")
colnames(d)[c(1:2,5,66:68,71:73)]
# fig.height=2.4, fig.width=2.7
bar = function() {
counts <- table(data_tested$flew_b, data_tested$trial_type)
counts <- counts[1:2,2:3]
barplot(counts, #main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","darkgoldenrod2"),
legend = c("no flew", "yes flew"), ylim=c(0,250), beside=TRUE)
}
bar()
# key = change in mass
Event = c("gained mass from T1 to T2", "no mass change between trails", "lost mass from T1 to T2")
Sign = c("pos","0","neg")
key = cbind(Event, Sign)
kable(key) %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
add_header_above(c("Delta Mass Key" = 2 ))
df <- d %>%
filter(!is.na(mass_diff), !is.na(flight_case))
df <- df[with(df, order(mass_diff)),]
n_trials = nrow(df)
df$flight_case <- relevel(as.factor(df$flight_case), ref = "0")
null <- multinom(flight_case ~ 1, data = df)
df <- df[with(df, order(mass_diff)),]
plot6 = function(df, pp) {
# only laid eggs in T1
plot(df$mass_diff[eggT1_rows], pp[eggT1_rows,1], ylim=c(0,1.05), xlim=c(-0.045,0.07), col="red", type="l", lty=1,main="Females Only", ylab="Flight Case Probability", xlab="Change in Mass From T1 to T2 (g)")
points(df$mass_diff[eggT1_rows], pp[eggT1_rows,2], col="blue", type="l", lty=1, cex=0.45)
points(df$mass_diff[eggT1_rows], pp[eggT1_rows,3], col="black", type="l", lty=1, cex=0.45)
# no egg change
points(df$mass_diff[egg_0rows], pp[egg_0rows,1], col="red", type="l", lty=2) # did not fly in either
points(df$mass_diff[egg_0rows], pp[egg_0rows,2], col="blue", type="l", lty=2) # flew in T1 only
points(df$mass_diff[egg_0rows], pp[egg_0rows,3], col="black", type="l", lty=2) # flew in both
# eggs twice
points(df$mass_diff[egg_2rows], pp[egg_2rows,1], col="red", type="l", lty=4) # did not fly in either
points(df$mass_diff[egg_2rows], pp[egg_2rows,2], col="blue", type="l", lty=4) # flew in T1 only
points(df$mass_diff[egg_2rows], pp[egg_2rows,3], col="black", type="l", lty=4) # flew in both
# only laid eggs in T2
points(df$mass_diff[eggT2_rows], pp[eggT2_rows,1], col="red", type="l", lty=3) # flew in neither
points(df$mass_diff[eggT2_rows], pp[eggT2_rows,2], col="blue", type="l", lty=3) # flew in T1 only
points(df$mass_diff[eggT2_rows], pp[eggT2_rows,3], col="black", type="l", lty=3) # flew in both
rect(-0.038,-1,0.064,2, NA, col = rgb(0.5,0,0.5,1/15), border="pink") # most likely to not fly unless gain more than about 0.025 g mass and then fly only in T1 (eggs were laid twice).
rect(-0.045,-1,0.038,2, NA, col = rgb(0.5,0.2,0.5,1/15), border="pink") # most likely to not fly (2nd widest mass change, and laid eggs in T2)
rect(-0.039,-1,0.008,2, NA, col = rgb(0.1,0.5,0.5,1/10), border="lightblue") # most likely to fly twice (lost mass and laid eggs only in T1)
rect(-0.005,-1,0.029,2, NA, col = rgb(0.4,0.5,0.5,1/4), border="lightblue") # most likely to fly twice always (smallest mass change and did not lay eggs)
# turn this into an animated graph...!
text(0.059,0.54, labels="Flew in T1 only", col="blue")
text(-0.036,0.95, labels="Did Not Fly", col="red")
text(-0.02,0.35, labels="Flew Twice", col="black")
legend(0.033, 1.07,
legend = c("laid eggs in T1","no eggs laid", "eggs laid twice", "laid eggs in T2"),
lty=1:4,
col="black",
cex=0.8)
}
pp5 = fitted(model)
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Dispersal/Winter_2020/stats/"
setwd(dir)
# modeling and data manipulation
library(lme4)
library(dplyr)
library(nnet) # multinom package
# tables
library(knitr)
library(kableExtra)
# plotting
library(rethinking)
library(ggformula)
library(plot.matrix)
knitr::opts_chunk$set(echo = TRUE)
# key = response in T2 - response in T1
Event = c("flew in both trials", "flew in T2 only", " flew in neither trials", "flew in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Rsrc/"
script_names = c("center_flight_data.R", # Re-centers data
"clean_flight_data.R", # Loads and cleans data
"unique_flight_data.R",
"get_warnings.R",
"compare_models.R",
"regression_output.R", # Cleans regression outputs; prints in color or B&W
"AICprobabilities.R")
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
output_col = FALSE # Change to TRUE if working in Base R or RStudio; FALSE if generating an HTML
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
d <- create_delta_data(data_tested)
# for machine learning | creates CSV files to be read into the python script
#test = d[,c(1:30,59,63:73)] # for machine learning
#short_test = d[,c(1:2,5,66:68,71:73)]
#write.csv(test, file="unique_data-Winter2020.csv")
#write.csv(short_test, file="unique_data-Winter2020.csv")
colnames(d)[c(1:2,5,66:68,71:73)]
# fig.height=2.4, fig.width=2.7
bar = function() {
counts <- table(data_tested$flew_b, data_tested$trial_type)
counts <- counts[1:2,2:3]
barplot(counts, #main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","darkgoldenrod2"),
legend = c("no flew", "yes flew"), ylim=c(0,250), beside=TRUE)
}
bar()
# key = change in mass
Event = c("gained mass from T1 to T2", "no mass change between trails", "lost mass from T1 to T2")
Sign = c("pos","0","neg")
key = cbind(Event, Sign)
kable(key) %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
add_header_above(c("Delta Mass Key" = 2 ))
df <- d %>%
filter(!is.na(mass_diff), !is.na(flight_case))
df <- df[with(df, order(mass_diff)),]
n_trials = nrow(df)
df$flight_case <- relevel(as.factor(df$flight_case), ref = "0")
null <- multinom(flight_case ~ 1, data = df)
null <- multinom(flight_case ~ 1, data = df)
df <- d %>%
filter(!is.na(mass_diff), !is.na(flight_case))
df <- df[with(df, order(mass_diff)),]
n_trials = nrow(df)
df$flight_case <- relevel(as.factor(df$flight_case), ref = "0")
null <- multinom(flight_case ~ 1, data = df)
warings()
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Dispersal/Winter_2020/stats/"
setwd(dir)
# modeling and data manipulation
library(lme4)
library(dplyr)
library(nnet) # multinom package
# tables
library(knitr)
library(kableExtra)
# plotting
library(rethinking)
library(ggformula)
library(plot.matrix)
knitr::opts_chunk$set(echo = TRUE)
# key = response in T2 - response in T1
Event = c("flew in both trials", "flew in T2 only", " flew in neither trials", "flew in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Rsrc/"
script_names = c("center_flight_data.R", # Re-centers data
"clean_flight_data.R", # Loads and cleans data
"unique_flight_data.R",
"get_warnings.R",
"compare_models.R",
"regression_output.R", # Cleans regression outputs; prints in color or B&W
"AICprobabilities.R")
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
output_col = FALSE # Change to TRUE if working in Base R or RStudio; FALSE if generating an HTML
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
d <- create_delta_data(data_tested)
# for machine learning | creates CSV files to be read into the python script
#test = d[,c(1:30,59,63:73)] # for machine learning
#short_test = d[,c(1:2,5,66:68,71:73)]
#write.csv(test, file="unique_data-Winter2020.csv")
#write.csv(short_test, file="unique_data-Winter2020.csv")
colnames(d)[c(1:2,5,66:68,71:73)]
bar = function() {
counts <- table(data_tested$flew_b, data_tested$trial_type)
counts <- counts[1:2,2:3]
barplot(counts, #main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","darkgoldenrod2"),
legend = c("no flew", "yes flew"), ylim=c(0,250), beside=TRUE)
}
bar()
df$w2b_col
df$w2b_col <- 0
df$w2b_col <- 0
df <- d %>%
filter(!is.na(mass_diff), !is.na(flight_case))
df <- df[with(df, order(mass_diff)),]
n_trials = nrow(df)
df$flight_case <- relevel(as.factor(df$flight_case), ref = "0")
df$w2b_col <- 0
null <- multinom(flight_case ~ 1, data = df)
null <- multinom(flight_case ~ 1, data = df)
null <- multinom(flight_case ~ 1, data = df)
null <- multinom(flight_case ~ 1, data = df)
null <- multinom(flight_case ~ 1, data = df)
multinom
?multinom
null <- multinom(flight_case ~ 1, data = df)
df <- d %>%
filter(!is.na(mass_diff), !is.na(flight_case))
df <- df[with(df, order(mass_diff)),]
n_trials = nrow(df)
df$flight_case <- relevel(as.factor(df$flight_case), ref = "0")
df$w2b_col <- 0
null <- multinom(flight_case ~ 1, data = df)
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Dispersal/Winter_2020/stats/"
setwd(dir)
# modeling and data manipulation
library(lme4)
library(dplyr)
library(nnet) # multinom package
# tables
library(knitr)
library(kableExtra)
# plotting
library(rethinking)
library(ggformula)
library(plot.matrix)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Dispersal/Winter_2020/stats/"
setwd(dir)
# modeling and data manipulation
library(lme4)
library(dplyr)
library(nnet) # multinom package
# tables
library(knitr)
library(kableExtra)
# plotting
library(rethinking)
library(ggformula)
library(plot.matrix)
knitr::opts_chunk$set(echo = TRUE)
# key = response in T2 - response in T1
Event = c("flew in both trials", "flew in T2 only", " flew in neither trials", "flew in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
source_path = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Rsrc/"
script_names = c("center_flight_data.R", # Re-centers data
"clean_flight_data.R", # Loads and cleans data
"unique_flight_data.R",
"get_warnings.R",
"compare_models.R",
"regression_output.R", # Cleans regression outputs; prints in color or B&W
"AICprobabilities.R")
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
output_col = FALSE # Change to TRUE if working in Base R or RStudio; FALSE if generating an HTML
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
d <- create_delta_data(data_tested)
# for machine learning | creates CSV files to be read into the python script
#test = d[,c(1:30,59,63:73)] # for machine learning
#short_test = d[,c(1:2,5,66:68,71:73)]
#write.csv(test, file="unique_data-Winter2020.csv")
#write.csv(short_test, file="unique_data-Winter2020.csv")
colnames(d)[c(1:2,5,66:68,71:73)]
# fig.height=2.4, fig.width=2.7
bar = function() {
counts <- table(data_tested$flew_b, data_tested$trial_type)
counts <- counts[1:2,2:3]
barplot(counts, #main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","darkgoldenrod2"),
legend = c("no flew", "yes flew"), ylim=c(0,250), beside=TRUE)
}
bar()
# key = change in mass
Event = c("gained mass from T1 to T2", "no mass change between trails", "lost mass from T1 to T2")
Sign = c("pos","0","neg")
key = cbind(Event, Sign)
kable(key) %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
add_header_above(c("Delta Mass Key" = 2 ))
df <- d %>%
filter(!is.na(mass_diff), !is.na(flight_case))
df <- df[with(df, order(mass_diff)),]
n_trials = nrow(df)
df$flight_case <- relevel(as.factor(df$flight_case), ref = "0")
df$w2b_col <- 0
null <- multinom(flight_case ~ 1, data = df)
null <- multinom(flight_case ~ 1, data = df)
null <- multinom(flight_case ~ 1, data = df)
null <- multinom(flight_case ~ 1, data = df)
null <- multinom(flight_case ~ 1, data = df)
null <- multinom(flight_case ~ 1, data = df)
null <- multinom(flight_case ~ 1, data = df)
null <- multinom(flight_case ~ 1, data = df)
null <- multinom(flight_case ~ 1, data = df)
null <- multinom(flight_case ~ 1, data = df)
df <- df[with(df, order(mass_per)),]
model <- multinom(flight_case ~ mass_per, data = df)
library(nnet) # multinom package
null <- multinom(flight_case ~ 1, data = df)
df <- d %>%
filter(!is.na(mass_diff), !is.na(flight_case))
df <- df[with(df, order(mass_diff)),]
n_trials = nrow(df)
df$flight_case <- relevel(as.factor(df$flight_case), ref = "0")
df$w2b_col <- 0
null <- multinom(flight_case ~ 1, data = df)
