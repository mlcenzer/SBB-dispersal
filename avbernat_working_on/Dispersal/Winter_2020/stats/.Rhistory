v <- c(x-0.025, x, 0.75, 0.86)
par( fig=v, new=TRUE, mar=c(0,0,0,0) )
color.bar(colorRampPalette(c("black", "grey"))(1000), 63)
}
hist(df$wing2body[Frows])
hist(df$wing2body[Frows], breaks=seq(0.5,1,by=0.1))
hist(df$wing2body[Frows], breaks=seq(0.5,1,by=0.01))
hist(df$wing2body[Frows], breaks=seq(0.6,1,by=0.01))
hist(df$wing2body[Frows], breaks=seq(0.6,0.9,by=0.01))
hist(df$wing2body[Frows], breaks=seq(0.6,0.8,by=0.01))
hist(df$wing2body[Frows], breaks=seq(0.61,0.79,by=0.01))
hist(df$wing2body[Frows], breaks=seq(0.61,0.77,by=0.01))
hist(df$wing2body[Frows], breaks=seq(0.62,0.77,by=0.01))
hist(df$wing2body[Frows], breaks=seq(0.63,0.77,by=0.01))
lot_histograms = function() {
x = 0.48
v <- c(x-0.13,x, 0.85, 0.90)
par( fig=v, new=TRUE, mar=c(0,0,0,0) )
hist(df$wing2body[Frows], col="white", main="", cex.axis=0.9, breaks=seq(0.62,0.77, by=0.01))
text(0.64,45, labels="w2b", cex=0.9)
x = 0.88
v <- c(x-0.13, x, 0.85, 0.90)
par( fig=v, new=TRUE, mar=c(0,0,0,0) )
hist(df$wing2body[Mrows], col="white", main="", cex.axis=0.9)
text(0.66,40, labels="w2b", cex=0.9)
}
plot_color_scale = function() {
x = 0.98
v <- c(x-0.025, x, 0.75, 0.86)
par( fig=v, new=TRUE, mar=c(0,0,0,0) )
color.bar(colorRampPalette(c("black", "grey"))(1000), 63)
}
par(mfrow=c(1,2), tcl=-0.5) # length of tick marks set at default
par(mai=c(1,0.85,0.4,0)) # bottom, right, top, left
plot2(df5,pp5, pp4, gradient=TRUE, circles=FALSE, stochasticity=TRUE, points=FALSE)
par(mai=c(1,0.6,0.4,0.05))
plot3(df5,pp5, pp4, gradient=TRUE, circles=FALSE, stochasticity=TRUE, points=FALSE)
plot_histograms()
plot_color_scale()
# generate small subset plots and scales in the top right hand corner
plot_histograms = function() {
x = 0.48
v <- c(x-0.13,x, 0.85, 0.90)
par( fig=v, new=TRUE, mar=c(0,0,0,0) )
hist(df$wing2body[Frows], col="white", main="", cex.axis=0.9, breaks=seq(0.62,0.77, by=0.01))
text(0.64,45, labels="w2b", cex=0.9)
x = 0.88
v <- c(x-0.13, x, 0.85, 0.90)
par( fig=v, new=TRUE, mar=c(0,0,0,0) )
hist(df$wing2body[Mrows], col="white", main="", cex.axis=0.9, breaks=seq(0.62,0.77, by=0.01))
text(0.66,40, labels="w2b", cex=0.9)
}
plot_color_scale = function() {
x = 0.98
v <- c(x-0.025, x, 0.75, 0.86)
par( fig=v, new=TRUE, mar=c(0,0,0,0) )
color.bar(colorRampPalette(c("black", "grey"))(1000), 63)
}
par(mfrow=c(1,2), tcl=-0.5) # length of tick marks set at default
par(mai=c(1,0.85,0.4,0)) # bottom, right, top, left
plot2(df5,pp5, pp4, gradient=TRUE, circles=FALSE, stochasticity=TRUE, points=FALSE)
par(mai=c(1,0.6,0.4,0.05))
plot3(df5,pp5, pp4, gradient=TRUE, circles=FALSE, stochasticity=TRUE, points=FALSE)
plot_histograms()
plot_color_scale()
# key = response in T2 - response in T1
Event = c("laid eggs in both trials", "laid eggs in T2 only", "laid eggs in neither trials", "laid eggs in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Egg Response Key" = 2 ))
# filter for females &
# remove any missing values for flight case, mass percent change, and egg case between trials
df = d[with(d,!is.na(flight_case) & !is.na(mass_per) & !is.na(egg_case) & sex=="F"),]
# order the dataset by ascending mass percent change values
df = df[with(df, order(mass_per)),]
# relevel the flight case factors so as to set 0 as the first level.
df$flight_case = relevel(as.factor(df$flight_case), ref = "0")
unique(df$flight_case) # no female bug only flew in T2, so can drop factor "1"
df$flight_case = droplevels(df$flight_case)
null <- multinom(flight_case ~ 1, data = df)
data <- data.frame(R = df$flight_case,
A = df$egg_case,
B = df$mass_per,
C = df$host_c)
model_script = paste0(source_path,"generic multinomial models- multinom 1RF + 3 FF.R")
model_comparisonsAIC(model_script)
anova(m4, m7, test="Chisq") # Adding C does not improve fit
anova(m7, m13, test="Chisq") # Addin
summary(m7)
data <- data.frame(R = df$flight_case,
A = df$egg_case,
B = df$mass_per,
C = df$wing2body)
model_script = paste0(source_path,"generic multinomial models- multinom 1RF + 3 FF.R")
model_comparisonsAIC(model_script)
anova(m4, m7, test="Chisq") # adding wing2body does not include fit
anova(m7, m13, test="Chisq") # Adding A*C does not improve fit
anova(m7, m12, test="Chisq") # Adding B*C does not improve fit
M6 = multinom(flight_case ~ mass_per + egg_case, data = df) # same top model
model_table6 = calculate_P2(M6, "mass_per", "egg_case")
get_prediction_eq = function(tb, table_rowA, table_rowB, var_lab1, var_lab2,
log_lab, title_lab) {
I = (tb[table_rowA,1] - tb[table_rowB,1])
M = (tb[table_rowA,2] - tb[table_rowB,2])
E = (tb[table_rowA,3] - tb[table_rowB,3])
EQ = paste0(log_lab, round(I, 2), " + ", round(M,2), var_lab1, " + ", round(E, 2),
var_lab2, title_lab)
print(EQ)
return(EQ)
}
EQ = get_prediction_eq(model_table6, 1, 2, " Mass %", " Egg Case",
"log(pi_-1 / pi_1) = ","   Flew in T1, not T2")
run_multinom_model = function(d) {
m <- multinom(flight_case ~ mass_per + egg_case, trace=FALSE, data = d)
model_table = calculate_P2(m, "mass_per", "egg_case", print_table=FALSE)
return(model_table)
}
# determine which multinomial model equations are significant with a plot
par(mfrow=c(1,2))
mass_per_ML = get_significant_modelsf(15) # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
egg_case_ML = get_significant_modelsf(16) # egg_case
mtext("B. Egg \nResponse", side=3, adj=0, line=0.3, cex=1.6, font=1)
data_fem = data_tested[data_tested$sex=="F",]
binary_counts <- table(data_fem$eggs_b, data_fem$trial_type)[,2:3]
par(mfrow=c(1,2))
barplot(binary_counts, ylab="Frequency",
xlab="Trial", col=c("#b57783","#820331"),
legend = c("no eggs", "yes eggs"), ylim=c(0,110), beside=TRUE)
head(pp <- fitted(M6),3)
df$index = 1:nrow(df)
eggT1 = df[df$egg_case == -1,]
egg0 = df[df$egg_case == 0,]
egg2 = df[df$egg_case == 2,]
eggT2 = df[df$egg_case == 1,]
eggT1_rows = eggT1$index
egg_0rows = egg0$index
egg_2rows = egg2$index
eggT2_rows = eggT2$index
plot4 = function(df, pp) {
# only laid eggs in T1
plot(df$mass_per[eggT1_rows], pp[eggT1_rows,1], ylim=c(0,1.05), xlim=c(-36,108), col="red", type="l", lty=1,main="Females Only", ylab="Flight Case Probability", xlab="Percent Change in Mass From T1 to T2 (%)")
points(df$mass_per[eggT1_rows], pp[eggT1_rows,2], col="blue", type="l", lty=1, cex=0.45)
points(df$mass_per[eggT1_rows], pp[eggT1_rows,3], col="black", type="l", lty=1, cex=0.45)
# no egg change
points(df$mass_per[egg_0rows], pp[egg_0rows,1], col="red", type="l", lty=2) # did not fly in either
points(df$mass_per[egg_0rows], pp[egg_0rows,2], col="blue", type="l", lty=2) # flew in T1 only
points(df$mass_per[egg_0rows], pp[egg_0rows,3], col="black", type="l", lty=2) # flew in both
# eggs twice
points(df$mass_per[egg_2rows], pp[egg_2rows,1], col="red", type="l", lty=4) # did not fly in either
points(df$mass_per[egg_2rows], pp[egg_2rows,2], col="blue", type="l", lty=4) # flew in T1 only
points(df$mass_per[egg_2rows], pp[egg_2rows,3], col="black", type="l", lty=4) # flew in both
# only laid eggs in T2
points(df$mass_per[eggT2_rows], pp[eggT2_rows,1], col="red", type="l", lty=3) # flew in neither
points(df$mass_per[eggT2_rows], pp[eggT2_rows,2], col="blue", type="l", lty=3) # flew in T1 only
points(df$mass_per[eggT2_rows], pp[eggT2_rows,3], col="black", type="l", lty=3) # flew in both
text(70,0.68, labels="Flew in T1 only", col="blue") # 0.059,0.54
text(-20,0.95, labels="Did Not Fly", col="red") # -0.036,0.95
text(-20,0.55, labels="Flew Twice", col="black") # -0.02,0.35
legend(76, 1.07,
legend = c("laid eggs in T1","no eggs laid", "eggs laid twice", "laid eggs in T2"),
lty=1:4,
col="black",
cex=0.8)
}
pp6 = fitted(M6)
df6 = df
plot4(df6,pp6)
library(cvms) # cross-validating regressions
script_names = c("clean_flight_data-Fall2.R", # 1 function: clean_flight_data.Fall()
"unique_flight_data-Fall.R", # 1 function: create_delta_data.Fall()
"prediction_accuracy.R", # 1 function: calculate_accuracy()
"confusion_matrix.R") # 1 function: get_confusion_matrix()
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
dataFall = clean_flight_data.Fall("data/full_data-Fall2019.csv")
# extract sets with an experimental design similar to the Winter tests
ongoing_data = dataFall[with(dataFall,!is.na(mass) & set_number > 71),]
# create delta data
d = create_delta_data.Fall(ongoing_data)
d <- d[with(d, order(mass_per)),]
neither = c()
T1_rather_than_none = c()
T2_rather_than_none = c()
both_rather_than_none = c()
for (i in 1:nrow(d)) {
m = d$mass_per[[i]]
s = d$sex_c[[i]]
w = d$wing2body_c[i]
# extract effects from the best fit model
top0 = exp(0) # equals 1
top1 = exp(model_table5[1,1] + model_table5[1,2]*m + model_table5[1,3]*s + model_table5[1,4]*w)
top2 = exp(model_table5[2,1] + model_table5[2,2]*m + model_table5[2,3]*s + model_table5[2,4]*w)
top3 = exp(model_table5[3,1] + model_table5[3,2]*m + model_table5[3,3]*s + model_table5[3,4]*w)
bottom = top0 + top1 + top2 + top3
# calculate predicted probabilities
neither = c(neither, top0/bottom)
T1_rather_than_none = c(T1_rather_than_none, top1/bottom)
T2_rather_than_none = c(T2_rather_than_none, top2/bottom)
both_rather_than_none = c(both_rather_than_none, top3/bottom)
}
source("multinom_functions.R")
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_models(19) # % mass
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_models(19) # % mass
mass_per_ML = get_significant_modelsf(15) # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15) # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15) # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
model_table
model_table6
model_table6["mass_per"]
model_table6["mass_per",]
model_table6[,"mass_per"]
model_table6[,"P1 > |z|"]
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15) # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15) # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
mass_per_ML = get_significant_modelsf(15, effects_cat="mass_per") # mass_per
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
get_significant_modelsf()effect_cat
effect_cat
model_table
model_table[,effect_cat]
model_table[c,effect_cat]
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
# determine which multinomial model equations are significant with a plot
par(mfrow=c(1,2))
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
effects
pvalues
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
script_names = c( "multinom_functions.R") # 4 relevant functions:
# calculate_P2(), calculate_P3(),
# get_significant_models(),
# get_significant_modelsf(),
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
mass_per_ML = get_significant_modelsf(15, effect_cat="mass_per") # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
