<<<<<<< HEAD
m1 <- lm(y1 ~ x1, data=d1)
m2 <- lm(y2 ~ x2, data=d2)
x1.seq = seq(min(x1) - sd(x1), max(x1) + sd(x1), length.out=100)
x2.seq = seq(min(x2) - sd(x2), max(x2) + sd(x2), length.out=100)
prd1 <- data.frame(x1=x1.seq) # newdata
prd2 <- data.frame(x2=x2.seq) # newdata
err1 <- predict(m1, newdata = prd1, se.fit = TRUE)
err2 <- predict(m2, newdata = prd2, se.fit = TRUE)
prd1$lci1 <- err1$fit - 1.96 * err1$se.fit
prd2$lci2 <- err2$fit - 1.96 * err2$se.fit
prd1$fit <- err1$fit
prd2$fit <- err2$fit
prd1$uci <- err1$fit + 1.96 * err1$se.fit
prd2$uci <- err2$fit + 1.96 * err2$se.fit
mu_ci1 <- t(matrix(c(prd1$lci,prd1$uci), ncol=2))
mu_ci2 <- t(matrix(c(prd2$lci,prd2$uci), ncol=2))
#Print to file
#pdf(file="flight_prob_vs_mass_both_sexes.pdf", width=7, height=7)
#plot beak length residuals
par(mai=c(1, 1, .2, .2), ps=22)
plot(data_temp$f_prob~data_temp$mass_block, ylab="Flight probability", xlab="Mass (g)", pch=19, col=c("red","blue")[as.factor(data_temp$sex)], cex=2, ylim=c(0,1), xlim=c(0.02, 0.18))
##Here we can see that as wing2body ratio increases, flight probability increases in males.
legend(0.14, 1, legend=c("male", "female"), pch=19, col=c("blue", "red"), y.intersp=1.5, pt.cex=2, cex=.8)
abline(m1, lty=2) #, col="indianred1")
abline(m2, lty=2, col="darkblue")
shade(mu_ci1, lim = prd1$x1) #, col=col.alpha("indianred1"))
shade(mu_ci2, lim = prd2$x2, col=col.alpha("darkblue"))
pval1 <- paste0("p = ", round(summary(m1)$coefficients[8],3), "*")
pval2 <- paste0("p = ", round(summary(m2)$coefficients[8],2))
text(0.11, 0.5, pval1) #, cex=c4, col="indianred1")
text(0.1, 0.9, pval2, cex=c4, col="darkblue")
#title("(a)", adj = 0.05, line = 0, cex.main=c3)
#dev.off()
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Dispersal/Winter_2020/stats/"
setwd(dir)
library(lme4)
library(rethinking)
library(lubridate)
library(chron)
library(dplyr)
library(tidyselect)
library(glmnet)
library(ggplotify)
library(gridExtra)
library(ggformula)
library(randomcoloR)
knitr::opts_chunk$set(echo = TRUE)
source("src/clean_flight_data.R")
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
source("src/categorize_binomial_data.R")
source("src/categorize_binomial_data-MF.R")
cat_data1 <- categorize_data(data_tested, all_of("min_from_IncStart"), all_of("flew_b"), 30, 0, 30)
cat_data2 <- categorize_data(data_tested, all_of("minute_duration"), all_of("flew_b"), 30, 0, 30)
# Plotting observed proportions of yes flew by minutes from incubation start
p1 <- as.grob(expression(plot(sample_prop ~ min_from_IncStart, data=cat_data1,
ylab="Sample Proportion of Yes Flew", xlab="Minutes From Incubtation Start (min) ",
main="Observed proportions of yes flew by minutes from incubation start")
))
# Plotting observed proportions of yes flew by minutes from trial start
p2 <- as.grob(expression(
plot(sample_prop ~ minute_duration, data=cat_data2,
ylab="Sample Proportion of Yes Flew", xlab="Minutes From Trial Start (min)",
main="Observed proportions of yes flew by minutes from trial start") %>%
abline(v=120, col="red")
))
grid.arrange(p1,p2, ncol=2)
par(mfrow=c(1,2))
### Plot trial duration (min) vs. time_start | all bugs
x = chron(times = data_tested$time_start)
y = data_tested$recording_duration / (60*60)
fit <- lm(y~x, data=data_tested)
summary(fit)
cf <- round(coef(fit), 2)
eq <- paste0("portion_flew = ", cf[1],
ifelse(sign(cf[2])==1, " + ", " - "), abs(cf[2]), "*time_start ")
plot(x,y, xlab= "Starting Time", ylab="Duration (hr)")
abline(coef(fit)[1:2], col="blue")
### Plot trial duration (min) vs. time_start | bugs that flew only
all_flew <- filter(data_all, flew_b == 1)
x = chron(times = all_flew$time_start)
y = all_flew$recording_duration / (60*60)
fit <- lm(y~x, data=all_flew)
summary(fit)
cf <- round(coef(fit), 2)
eq <- paste0("portion_flew = ", cf[1],
ifelse(sign(cf[2])==1, " + ", " - "), abs(cf[2]), "*time_start ")
plot(x,y, xlab= "Starting Time", ylab="Duration (hr)")
abline(coef(fit)[1:2], col="blue")
c1=1.4
c2=1.2
c3=1.2
data_flew = data_tested %>%
filter(flew_b==1)
d = data_flew
data_flew$start_time = chron(times = data_flew$time_start)
data_flew$recording_dur_hr = data_flew$recording_duration / (60*60)
x=data_flew$start_time
y=data_flew$recording_dur_hr
m <- lm(recording_dur_hr ~ start_time, data=data_flew)
x.seq = seq(min(x) - sd(x), max(x) + sd(x), length.out=100)
m <- lm(y ~ x, data=data_flew)
prd <- data.frame(x=x.seq) # newdata
err <- predict(m, newdata = prd, se.fit = TRUE)
prd$lci <- err$fit - 1.96 * err$se.fit
prd$fit <- err$fit
prd$uci <- err$fit + 1.96 * err$se.fit
mu_ci <- t(matrix(c(prd$lci,prd$uci), ncol=2))
colfunc <- colorRampPalette(c("red", "orange"))
plot(data_flew$recording_dur_hr ~ data_flew$start_time,
pch=16,
xlab = "Trial Start Time (HR:MIN)",
ylab= "Recording Duration (HR)",
cex=c2,
cex.lab=c3,
cex.axis=c2,
ylim=c(0,14),
#col = alpha("black", 0.7),
bty="n")
abline(m, lty=2)
shade(mu_ci, lim = prd$x)
pval <- paste0("p = ", round(summary(m)$coefficients[8],3), "*")
text(chron(times = "14:15:15"), 4, pval, cex=c3)
#title("Time of Day Tested", adj = 0.05, line = 0, cex.main=c1)
#title("(a)", adj = 0.05, line = 0, cex.main=1.4)
summary(lm(recording_dur_hr ~ start_time, data=data_flew))
c1=1.4
c2=1.2
c3=1.2
data_flew = data_tested %>%
filter(flew_b==1)
d = data_flew
data_flew$start_time = chron(times = data_flew$time_start)
data_flew$recording_dur_hr = data_flew$recording_duration / (60*60)
x=data_flew$start_time
y=data_flew$recording_dur_hr
m <- lm(recording_dur_hr ~ start_time, data=data_flew)
x.seq = seq(min(x) - sd(x), max(x) + sd(x), length.out=100)
m <- lm(y ~ x, data=data_flew)
prd <- data.frame(x=x.seq) # newdata
err <- predict(m, newdata = prd, se.fit = TRUE)
prd$lci <- err$fit - 1.96 * err$se.fit
prd$fit <- err$fit
prd$uci <- err$fit + 1.96 * err$se.fit
mu_ci <- t(matrix(c(prd$lci,prd$uci), ncol=2))
colfunc <- colorRampPalette(c("red", "orange"))
plot(data_flew$recording_dur_hr ~ data_flew$start_time,
pch=16,
xlab = "Trial Start Time (HR:MIN)",
ylab= "Recording Duration (HR)",
cex=c2,
cex.lab=c3,
cex.axis=c2,
ylim=c(0,14),
#col = alpha("black", 0.7),
#bty="n"
)
abline(m, lty=2)
shade(mu_ci, lim = prd$x)
pval <- paste0("p = ", round(summary(m)$coefficients[8],3), "*")
text(chron(times = "14:15:15"), 4, pval, cex=c3)
#title("Time of Day Tested", adj = 0.05, line = 0, cex.main=c1)
#title("(a)", adj = 0.05, line = 0, cex.main=1.4)
summary(lm(recording_dur_hr ~ start_time, data=data_flew))
cat_data_days <- categorize_data(data_tested, all_of("days_from_start"), all_of("flew_b"), 1, 0, 1)
x=cat_data_days$days_from_start
y=cat_data_days$sample_prop
m <- lm(sample_prop ~ days_from_start, data=cat_data_days)
x.seq = seq(min(x) - sd(x), max(x) + sd(x), length.out=100)
m <- lm(y ~ x, data=cat_data_days)
prd <- data.frame(x=x.seq) # newdata
err <- predict(m, newdata = prd, se.fit = TRUE)
prd$lci <- err$fit - 1.96 * err$se.fit
prd$fit <- err$fit
prd$uci <- err$fit + 1.96 * err$se.fit
mu_ci <- t(matrix(c(prd$lci,prd$uci), ncol=2))
colfunc <- colorRampPalette(c("red", "orange"))
plot(cat_data_days$sample_prop ~ cat_data_days$days_from_start,
pch=16,
xlab = "Day From Start",
ylab= "Flight Probability",
cex=c2,
cex.lab=c3,
cex.axis=c2,
xlim=c(0,25),
ylim=c(0.4, 0.8),
#col = alpha("black", 0.7),
#bty="n"
)
abline(m, lty=2)
shade(mu_ci, lim = prd$x)
pval <- paste0("p = ", round(summary(m)$coefficients[8],3), "*")
text(15, 0.65, pval, cex=c3)
#title("Age", adj = 0.05, line = 0, cex.main=c1)
#title("(a)", adj = 0.05, line = 0, cex.main=1.4)
summary(glm(flew_b ~ days_from_start_c, data=data_tested, family="binomial"))
summary(lm(sample_prop ~ days_from_start, data=cat_data_days))
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Dispersal/Winter_2020/stats/"
setwd(dir)
# modeling and data manipulation
library(lme4)
library(dplyr)
library(nnet) # multinom package
# tables
library(knitr)
library(kableExtra)
# plotting
library(rethinking)
library(ggformula)
knitr::opts_chunk$set(echo = TRUE)
# key = response in T2 - response in T1
Event = c("flew in T2 but not T1", " flew in T1 and T2 or in neither trial", "flew in T1 but not T2")
Encoding = c(1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
output_col = FALSE # Change to TRUE if working in Base R or RStudio; FALSE if generating an HTML
source("src/clean_flight_data.R") # Loads and cleans data
source("src/regression_output.R") # Cleans regression outputs; prints in color or black & white
source("src/center_flight_data.R") # Re-centers data
source("src/get_warnings.R")
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
d <- data_tested %>%
group_by(ID, sex,population, site, host_plant, latitude, longitude, total_eggs,
beak, thorax, wing, body, w_morph, morph_notes, tested,
host_c, sex_c, w_morph_c, lat_c, sym_dist, sym_dist_s, total_eggs_c,
beak_c, thorax_c, thorax_s, body_c, wing_c, wing2body, wing2body_c, wing2body_s) %>%
summarise_all(funs(list(na.omit(.))))
d$num_flew <- 0
d$num_notflew <- 0
d$average_mass <- 0
d$egg_diff <- 0
d$mass_diff <- 0
d$flew_diff <- 0
d$dist_diff <- 0
d$speed_diff <- 0
d$mass_per <- 0
for(row in 1:length(d$flew_b)){
n_flew <- sum(d$flew_b[[row]] == 1) # total number of times did fly among trails
d$num_flew[[row]] <- n_flew
n_notflew <- sum(d$flew_b[[row]] == 0) # total number of times did not fly among trails
d$num_notflew[[row]] <- n_notflew
avg_mass <- mean(d$mass[[row]])
d$average_mass[[row]] <- avg_mass
# mass, flight, distance, and speed changes between T1 and T2
d$mass_diff[[row]] <- d$mass[[row]][2] - d$mass[[row]][1]  # T2 - T1
d$mass_per[[row]] <- (d$mass_diff[[row]] / d$mass[[row]][1]) * 100
d$flew_diff[[row]] <- d$flew_b[[row]][2] - d$flew_b[[row]][1]  # T2 - T1
d$dist_diff[[row]] <- d$distance[[row]][2] - d$distance[[row]][1]  # T2 - T1
d$speed_diff[[row]] <- d$average_speed[[row]][2] - d$average_speed[[row]][1]  # T2 - T1
d$egg_diff[[row]] <- d$eggs_b[[row]][2] - d$eggs_b[[row]][1]  # T2 - T1
}
d <- select(d, -filename, -channel_letter, -set_number)
# Filter out bugs that were not tested twice:
rows_remove <- c()
for (row in 1:nrow(d)){
if (length(d$trial_type[[row]]) < 2) {
rows_remove <- c(rows_remove, row)
}
}
d <- d[-rows_remove, ]
head(d)
df <- d %>%
filter(!is.na(mass_diff), !is.na(flew_diff))
df <- df[with(df, order(mass_diff)),]
n_trials = nrow(df)
df$flew_diff <- relevel(as.factor(df$flew_diff), ref = "0")
null <- multinom(flew_diff ~ 1, data = df)
hist(d$flew_diff)
boxplot(d$flew_diff)
hist(d$flew_diff)
boxplot(d$ID~d$flew_diff)
hist(d$flew_diff)
boxplot(d$mass_diff~d$flew_diff)
histogram(data_tested$flew_b ~ data_tested$trial_type)
histogram(data_tested$flew_b ~ as.factor(data_tested$trial_type))
data_tested$trial_type
data_tested$trial_type_og
data_tested$trial_type
histogram(data_tested$flew ~ as.factor(data_tested$trial_type))
histogram(data_tested$flew_b ~ as.factor(data_tested$trial_type))
data_tested$flew_b
data_tested
hist(data_tested$flew_b ~ as.factor(data_tested$trial_type))
hist(data_tested$flew_b ~ data_tested$trial_type)
hist(data_tested$flew_b)
hist(data_tested$flew_b ~ data_tested$trial_type)
hist(data_tested$flew_b ~ as.factor(data_tested$trial_type))
data_tested$trial_type
hist(data_tested$flew_b)
ggplot(d, aes(x=flew_diff, y=note, fill=trial_type)) +
geom_boxplot()
boxplot(data_tested$flew_b)
hist(data_tested$flew_b)
hist(data_tested$flew_b ~ as.factor(data_tested$days_from_start))
hist(data_tested$days_from_start)
boxplot(data_tested$flew_b ~ as.factor(data_tested$days_from_start))
boxplot(data_tested$flew_b ~ as.factor(data_tested$trial_type))
boxplot(data_tested$flew_b ~ data_tested$trial_type)
tapply(X=data_tested$flew_b, INDEX=data_testedtrial_type, FUN=sum, na.rm=T)
tapply(X=data_tested$flew_b, INDEX=data_tested$trial_type, FUN=sum, na.rm=T)
tapply(X=d$mass_diff, INDEX=d$flew_diff, FUN=sum, na.rm=T)
tapply(X=data_tested$flew_b, INDEX=data_tested$trial_type, FUN=sum, na.rm=T)
tapply(X=data_tested$flew_b, INDEX=data_tested$trial_type, FUN=sum, na.rm=T)
ggplot(data_tested) + geom_col(aes(x = trial_type, y = flew_b))
boxplot(data_tested$flew_b ~ data_tested$trial_type)
boxplot(data_tested$flew_b ~ as.factor(data_tested$trial_type))
data(Arthritis)
data(Arthritis)
ggplot(data_tested) + geom_col(aes(x = trial_type, y = flew_b))
histogram(data_tested$flew_b ~ as.factor(data_tested$trial_type))
barplot(data_tested$flew_b ~ as.factor(data_tested$trial_type))
counts <- table(mtcars$gear)
counts
rm(list=ls())
dir = "~/Desktop/git_repositories/SBB-dispersal/avbernat_working_on/Dispersal/Winter_2020/stats/"
setwd(dir)
# modeling and data manipulation
library(lme4)
library(dplyr)
library(nnet) # multinom package
# tables
library(knitr)
library(kableExtra)
# plotting
library(rethinking)
library(ggformula)
knitr::opts_chunk$set(echo = TRUE)
# key = response in T2 - response in T1
Event = c("flew in T2 but not T1", " flew in T1 and T2 or in neither trial", "flew in T1 but not T2")
Encoding = c(1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
output_col = FALSE # Change to TRUE if working in Base R or RStudio; FALSE if generating an HTML
source("src/clean_flight_data.R") # Loads and cleans data
source("src/regression_output.R") # Cleans regression outputs; prints in color or black & white
source("src/center_flight_data.R") # Re-centers data
source("src/get_warnings.R")
data <- read_flight_data("data/all_flight_data-Winter2020.csv")
data_all <- data[[1]]
data_tested <- data[[2]]
d <- data_tested %>%
group_by(ID, sex,population, site, host_plant, latitude, longitude, total_eggs,
beak, thorax, wing, body, w_morph, morph_notes, tested,
host_c, sex_c, w_morph_c, lat_c, sym_dist, sym_dist_s, total_eggs_c,
beak_c, thorax_c, thorax_s, body_c, wing_c, wing2body, wing2body_c, wing2body_s) %>%
summarise_all(funs(list(na.omit(.))))
d$num_flew <- 0
d$num_notflew <- 0
d$average_mass <- 0
d$egg_diff <- 0
d$mass_diff <- 0
d$flew_diff <- 0
d$dist_diff <- 0
d$speed_diff <- 0
d$mass_per <- 0
for(row in 1:length(d$flew_b)){
n_flew <- sum(d$flew_b[[row]] == 1) # total number of times did fly among trails
d$num_flew[[row]] <- n_flew
n_notflew <- sum(d$flew_b[[row]] == 0) # total number of times did not fly among trails
d$num_notflew[[row]] <- n_notflew
avg_mass <- mean(d$mass[[row]])
d$average_mass[[row]] <- avg_mass
# mass, flight, distance, and speed changes between T1 and T2
d$mass_diff[[row]] <- d$mass[[row]][2] - d$mass[[row]][1]  # T2 - T1
d$mass_per[[row]] <- (d$mass_diff[[row]] / d$mass[[row]][1]) * 100
d$flew_diff[[row]] <- d$flew_b[[row]][2] - d$flew_b[[row]][1]  # T2 - T1
d$dist_diff[[row]] <- d$distance[[row]][2] - d$distance[[row]][1]  # T2 - T1
d$speed_diff[[row]] <- d$average_speed[[row]][2] - d$average_speed[[row]][1]  # T2 - T1
d$egg_diff[[row]] <- d$eggs_b[[row]][2] - d$eggs_b[[row]][1]  # T2 - T1
}
d <- select(d, -filename, -channel_letter, -set_number)
# Filter out bugs that were not tested twice:
rows_remove <- c()
for (row in 1:nrow(d)){
if (length(d$trial_type[[row]]) < 2) {
rows_remove <- c(rows_remove, row)
}
}
d <- d[-rows_remove, ]
counts <- table(mtcars$gear)
counts
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
mtcars$gear
counts <- table(mtcars$gear)
counts
counts <- table(mtcars$gear)
counts
counts <- table(data_tested$flew_b)
counts <- table(data_tested$flew_b)
counts
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
counts <- table(data_tested$flew_b, data_tested$trial_type)
counts
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts))
counts
counts[1,2]
counts[1,2]
counts
counts[1:2,1:2]
counts[2:3,1:2]
counts[2:3,2:3]
counts
counts[1:2,2:3]
counts <- table(data_tested$flew_b, data_tested$trial_type)
counts <- counts[1:2,2:3]
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts))
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","indianred1"),
legend = rownames(counts))
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("lightblue","indianred1"),
legend = rownames(counts))
boxplot(countss)
boxplot(counts)
histogram(counts)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("lightblue","indianred1"),
legend = rownames(counts))
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1"),
legend = rownames(counts))
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1"),
legend = rownames(counts), ylim=c(0,350))
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1"),
legend = rownames(counts), ylim=c(0,370))
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1"),
legend = rownames(counts), ylim=c(0,375))
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1"),
legend = rownames(counts), ylim=c(0,400))
counts <- table(data_tested$flew_diff)
counts
counts <- table(d$flew_diff)
counts
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1"),
legend = rownames(counts), ylim=c(0,400))
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1", "lightgreen"),
legend = rownames(counts), ylim=c(0,400))
counts <- table(data_tested$flew_b, data_tested$trial_type)
counts <- counts[1:2,2:3]
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1"),
legend = rownames(counts), ylim=c(0,400))
counts <- table(data_tested$flew_b, data_tested$days_from_start)
counts
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1"),
legend = rownames(counts), ylim=c(0,400))
counts <- table(data_tested$flew_b, data_tested$trial_type)
counts <- counts[1:2,2:3]
# Consider adding a plot here of overall changes in flight between trials? Losing dispersal ability with age is interesting in and of itself.
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1"),
legend = rownames(counts), ylim=c(0,400))
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1", "lightgreen"),
legend = rownames(counts), ylim=c(0,400), beside=TRUE))
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1", "lightgreen"),
legend = rownames(counts), ylim=c(0,400), beside=TRUE)
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1", "lightgreen"),
legend = rownames(counts), ylim=c(0,400), beside=TRUE)
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1"),
legend = rownames(counts), ylim=c(0,400), beside=TRUE)
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1"),
legend = rownames(counts), ylim=c(0,300), beside=TRUE)
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1"),
legend = rownames(counts), ylim=c(0,250), beside=TRUE)
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1"),
legend = rownames(counts), ylim=c(0,250), beside=TRUE)
indianred1
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","indianred1"),
legend = rownames(counts), ylim=c(0,250), beside=TRUE)
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","darkgoldenrod2"),
legend = rownames(counts), ylim=c(0,250), beside=TRUE)
barplot(counts, main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","darkgoldenrod2"),
legend = c("no flew", "yes flew"), ylim=c(0,250), beside=TRUE)
barplot(counts, #main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","darkgoldenrod2"),
legend = c("no flew", "yes flew"), ylim=c(0,250), beside=TRUE)
=======
wald = c(" ",round(c(0.04626286,1376.550215,0.1232515),2))
pvals = c(" ",round(c(8.296987e-0, 0, 0.72553436),2))
key5 = cbind(Odds, effect, pars, estimate, SE, exp.b, wald, pvals)
# -1 vs. 1
Odds = c("$\\frac{P(Yi=flew\\, in\\, T1\\, only)}{P(Yi=flew\\, in\\, T2\\, only}$", " ", " ", " ")
estimate = round(c(6.046223, 0.046992198 , 5.757301, 28.77938),2)
SE = c(" ", round(c(0.02554888, 0.2196477, 20.22414 ),2))
exp.b = c(" ",round(exp(estimate[2:4]),2))
wald = c(" ",round(c(3.38304457,558.5172,2.02498928),2))
pvals = c(" ",round(c(0.06587027, 0, 0.07996207),2))
key6 = cbind(Odds, effect, pars, estimate, SE, exp.b, wald, pvals)
key = rbind(key1, key2, key3, key4, key5, key6)
rownames(key1)<-NULL
colnames(key) = c("Odds","Effect", "Parameter", "Estimate", "SE", "exp($\\beta$)", "Wald", "p")
kable(key) %>%
kable_styling(bootstrap_options = "hover", full_width = F)  %>%
add_header_above(c("Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model" = 8)) %>%
column_spec(1, width="6cm")
rownames(key)<-NULL
kable(key) %>%
kable_styling(bootstrap_options = "hover", full_width = F)  %>%
add_header_above(c("Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model" = 8)) %>%
column_spec(1, width="6cm")
# Odds:     Equation of the odds written out as vector of strings.
# effect:   Main effects written out as a vector of strings.
# pars:     Parameters written out as a vector of strings
# odds:     Model table ML equations for the given outcome and baseline.
# r:        Row in which the outcome is indexed.
estimate = round(unlist(odds[r,1:4]),2)
getting_odds = function(Odds, effect, pars, odds, r) {
# Odds:     Equation of the odds written out as vector of strings.
# effect:   Main effects written out as a vector of strings.
# pars:     Parameters written out as a vector of strings
# odds:     Model table ML equations for the given outcome and baseline.
# r:        Row in which the outcome is indexed.
estimate = round(unlist(odds[r,1:4]),2)
SE = c(" ", round(unlist(odds[r,6:8]),2))
exp.b = c(" ",round(exp(estimate[2:4]),2))
wald = c(" ",round(unlist(odds[r,12:14]),2))
pvals = c(" ",round(unlist(odds[r,15:17]),2))
key1 = cbind(Odds, effect, pars, estimate, SE, exp.b, wald, pvals)
}
# 2 vs. -1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T1\\, only)}$", " ", " ", " ")
effect = c("Intercept", "$\\delta$ Mass %", "Sex", "Wing-to-Body")
pars = c("$\\alpha$", "$\\beta_1$", "$\\beta_2\\, (F=1 | M=-1)$", "$\\beta_3\\,(\\mu=0)$ ")
odds = MASS_PER_ML[[1]]
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T1\\, only)}$", " ", " ", " ")
effect = c("Intercept", "$\\delta$ Mass %", "Sex", "Wing-to-Body")
pars = c("$\\alpha$", "$\\beta_1$", "$\\beta_2\\, (F=1 | M=-1)$", "$\\beta_3\\,(\\mu=0)$ ")
odds = MASS_PER_ML[[1]]
getting_odds = function(Odds, effect, pars, odds, r) {
# Odds:     Equation of the odds written out as vector of strings.
# effect:   Main effects written out as a vector of strings.
# pars:     Parameters written out as a vector of strings
# odds:     Model table ML equations for the given outcome and baseline.
# r:        Row in which the outcome is indexed.
estimate = round(unlist(odds[r,1:4]),2)
SE = c(" ", round(unlist(odds[r,6:8]),2))
exp.b = c(" ",round(exp(estimate[2:4]),2))
wald = c(" ",round(unlist(odds[r,12:14]),2))
pvals = c(" ",round(unlist(odds[r,15:17]),2))
key = cbind(Odds, effect, pars, estimate, SE, exp.b, wald, pvals)
return(key)
}
key1 = getting_odds(Odds, effect, pars, MASS_PER_ML[[1]], 3)
getting_odds = function(Odds, effect, pars, odds, r) {
# Odds:     Equation of the odds written out as vector of strings.
# effect:   Main effects written out as a vector of strings.
# pars:     Parameters written out as a vector of strings
# odds:     Model table ML equations for the given outcome and baseline.
# r:        Row in which the outcome is indexed.
estimate = round(unlist(odds[r,1:4]),2)
SE = c(" ", round(unlist(odds[r,6:8]),2))
exp.b = c(" ",round(exp(estimate[2:4]),2))
wald = c(" ",round(unlist(odds[r,12:14]),2))
pvals = c(" ",round(unlist(odds[r,15:17]),2))
key = cbind(Odds, effect, pars, estimate, SE, exp.b, wald, pvals)
return(key)
}
# 2 vs. -1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T1\\, only)}$", " ", " ", " ")
effect = c("Intercept", "$\\delta$ Mass %", "Sex", "Wing-to-Body")
pars = c("$\\alpha$", "$\\beta_1$", "$\\beta_2\\, (F=1 | M=-1)$", "$\\beta_3\\,(\\mu=0)$ ")
key1 = getting_odds(Odds, effect, pars, MASS_PER_ML[[1]], 3)
# 2 vs. 1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T2\\, only)}$", " ", " ", " ")
key2 = getting_odds(Odds, effect, pars, MASS_PER_ML[[3]], 3)
key3 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 3)
getting_odds = function(Odds, effect, pars, odds, r) {
# Odds:     Equation of the odds written out as vector of strings.
# effect:   Main effects written out as a vector of strings.
# pars:     Parameters written out as a vector of strings
# odds:     Model table ML equations for the given outcome and baseline.
# r:        Row in which the outcome is indexed.
estimate = round(unlist(odds[r,1:4]),2)
SE = c(" ", round(unlist(odds[r,6:8]),2))
exp.b = c(" ",round(exp(estimate[2:4]),2))
wald = c(" ",round(unlist(odds[r,12:14]),2))
pvals = c(" ",round(unlist(odds[r,15:17]),2))
key = cbind(Odds, effect, pars, estimate, SE, exp.b, wald, pvals)
return(key)
}
# 2 vs. -1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T1\\, only)}$", " ", " ", " ")
effect = c("Intercept", "$\\delta$ Mass %", "Sex", "Wing-to-Body")
pars = c("$\\alpha$", "$\\beta_1$", "$\\beta_2\\, (F=1 | M=-1)$", "$\\beta_3\\,(\\mu=0)$ ")
key1 = getting_odds(Odds, effect, pars, MASS_PER_ML[[1]], 3)
# 2 vs. 1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T2\\, only)}$", " ", " ", " ")
key2 = getting_odds(Odds, effect, pars, MASS_PER_ML[[3]], 3)
# 2 vs. 0
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key3 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 3)
MASS_PER_ML
# -1 vs. 0
Odds = c("$\\frac{P(Yi=flew\\, in\\, T1\\, only)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key4 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 1)
MASS_PER_ML[[2]]
Odds = c("$\\frac{P(Yi=flew\\, in\\, T2\\, only)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key5 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 2)
MASS_PER_ML[[3]]
key6 = getting_odds(Odds, effect, pars, MASS_PER_ML[[3]], 2)
# -1 vs. 1
Odds = c("$\\frac{P(Yi=flew\\, in\\, T1\\, only)}{P(Yi=flew\\, in\\, T2\\, only}$", " ", " ", " ")
getting_odds = function(Odds, effect, pars, odds, r) {
# Odds:     Equation of the odds written out as vector of strings.
# effect:   Main effects written out as a vector of strings.
# pars:     Parameters written out as a vector of strings
# odds:     Model table ML equations for the given outcome and baseline.
# r:        Row in which the outcome is indexed.
estimate = round(unlist(odds[r,1:4]),2)
SE = c(" ", round(unlist(odds[r,6:8]),2))
exp.b = c(" ",round(exp(estimate[2:4]),2))
wald = c(" ",round(unlist(odds[r,12:14]),2))
pvals = c(" ",round(unlist(odds[r,15:17]),2))
key = cbind(Odds, effect, pars, estimate, SE, exp.b, wald, pvals)
return(key)
}
# 2 vs. -1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T1\\, only)}$", " ", " ", " ")
effect = c("Intercept", "$\\delta$ Mass %", "Sex", "Wing-to-Body")
pars = c("$\\alpha$", "$\\beta_1$", "$\\beta_2\\, (F=1 | M=-1)$", "$\\beta_3\\,(\\mu=0)$ ")
key1 = getting_odds(Odds, effect, pars, MASS_PER_ML[[1]], 3)
# 2 vs. 1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T2\\, only)}$", " ", " ", " ")
key2 = getting_odds(Odds, effect, pars, MASS_PER_ML[[3]], 3)
# 2 vs. 0
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key3 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 3)
# -1 vs. 0
Odds = c("$\\frac{P(Yi=flew\\, in\\, T1\\, only)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key4 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 1)
# 1 vs. 0
Odds = c("$\\frac{P(Yi=flew\\, in\\, T2\\, only)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key5 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 2)
# -1 vs. 1
Odds = c("$\\frac{P(Yi=flew\\, in\\, T1\\, only)}{P(Yi=flew\\, in\\, T2\\, only}$", " ", " ", " ")
key6 = getting_odds(Odds, effect, pars, MASS_PER_ML[[3]], 2)
getting_odds = function(Odds, effect, pars, odds, r) {
# Odds:     Equation of the odds written out as vector of strings.
# effect:   Main effects written out as a vector of strings.
# pars:     Parameters written out as a vector of strings
# odds:     Model table ML equations for the given outcome and baseline.
# r:        Row in which the outcome is indexed.
estimate = round(unlist(odds[r,1:4]),2)
SE = c(" ", round(unlist(odds[r,6:8]),2))
exp.b = c(" ",round(exp(estimate[2:4]),2))
wald = c(" ",round(unlist(odds[r,12:14]),2))
pvals = c(" ",round(unlist(odds[r,15:17]),2))
key = cbind(Odds, effect, pars, estimate, SE, exp.b, wald, pvals)
return(key)
}
getting_odds = function(Odds, effect, pars, odds, r) {
# Odds:     Equation of the odds written out as vector of strings.
# effect:   Main effects written out as a vector of strings.
# pars:     Parameters written out as a vector of strings
# odds:     Model table ML equations for the given outcome and baseline.
# r:        Row in which the outcome is indexed.
estimate = round(unlist(odds[r,1:4]),2)
SE = c(" ", round(unlist(odds[r,6:8]),2))
exp.b = c(" ",round(exp(estimate[2:4]),2))
wald = c(" ",round(unlist(odds[r,12:14]),2))
pvals = c(" ",round(unlist(odds[r,15:17]),2))
key = cbind(Odds, effect, pars, estimate, SE, exp.b, wald, pvals)
return(key)
}
# 2 vs. -1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T1\\, only)}$", " ", " ", " ")
effect = c("Intercept", "$\\delta$ Mass %", "Sex", "Wing-to-Body")
pars = c("$\\alpha$", "$\\beta_1$", "$\\beta_2\\, (F=1 | M=-1)$", "$\\beta_3\\,(\\mu=0)$ ")
key1 = getting_odds(Odds, effect, pars, MASS_PER_ML[[1]], 3)
# 2 vs. 1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T2\\, only)}$", " ", " ", " ")
key2 = getting_odds(Odds, effect, pars, MASS_PER_ML[[3]], 3)
# 2 vs. 0
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key3 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 3)
# -1 vs. 0
Odds = c("$\\frac{P(Yi=flew\\, in\\, T1\\, only)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key4 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 1)
# 1 vs. 0
Odds = c("$\\frac{P(Yi=flew\\, in\\, T2\\, only)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key5 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 2)
# -1 vs. 1
Odds = c("$\\frac{P(Yi=flew\\, in\\, T1\\, only)}{P(Yi=flew\\, in\\, T2\\, only}$", " ", " ", " ")
key6 = getting_odds(Odds, effect, pars, MASS_PER_ML[[3]], 2)
key = rbind(key1, key2, key3, key4, key5, key6)
rownames(key)<-NULL
colnames(key) = c("Odds","Effect", "Parameter", "Estimate", "SE", "exp($\\beta$)", "Wald", "p")
kable(key) %>%
kable_styling(bootstrap_options = "hover", full_width = F)  %>%
add_header_above(c("Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model" = 8)) %>%
column_spec(1, width="6cm")
#%>% row_spec(0, italic=T)
# save_kable("model_table.pdf)
key
key$estimate
key[4]
key[,4]
key[,6]
getting_odds = function(Odds, effect, pars, odds, r) {
# Odds:     Equation of the odds written out as vector of strings.
# effect:   Main effects written out as a vector of strings.
# pars:     Parameters written out as a vector of strings
# odds:     Model table ML equations for the given outcome and baseline.
# r:        Row in which the outcome is indexed.
estimate = round(unlist(odds[r,1:4]),2)
SE = c(" ", round(unlist(odds[r,6:8]),2))
for (i in 2:4) {
print(i)
}
exp.b = c(" ",round(exp(estimate[2:4]),2))
wald = c(" ",round(unlist(odds[r,12:14]),2))
pvals = c(" ",round(unlist(odds[r,15:17]),2))
key = cbind(Odds, effect, pars, estimate, SE, exp.b, wald, pvals)
return(key)
}
key1 = getting_odds(Odds, effect, pars, MASS_PER_ML[[1]], 3)
getting_odds = function(Odds, effect, pars, odds, r) {
# Odds:     Equation of the odds written out as vector of strings.
# effect:   Main effects written out as a vector of strings.
# pars:     Parameters written out as a vector of strings
# odds:     Model table ML equations for the given outcome and baseline.
# r:        Row in which the outcome is indexed.
estimate = round(unlist(odds[r,1:4]),2)
SE = c(" ", round(unlist(odds[r,6:8]),2))
for (i in 2:4) {
if (i == 2) {
estimate[i] = estimate[i]*20
}
if (i ==3) {
estimate[i] = estimate[i]/100
}
}
exp.b = c(" ",round(exp(estimate[2:4]),2))
wald = c(" ",round(unlist(odds[r,12:14]),2))
pvals = c(" ",round(unlist(odds[r,15:17]),2))
key = cbind(Odds, effect, pars, estimate, SE, exp.b, wald, pvals)
return(key)
}
# 2 vs. -1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T1\\, only)}$", " ", " ", " ")
effect = c("Intercept", "$\\delta$ Mass %", "Sex", "Wing-to-Body")
pars = c("$\\alpha$", "$\\beta_1$", "$\\beta_2\\, (F=1 | M=-1)$", "$\\beta_3\\,(\\mu=0)$ ")
key1 = getting_odds(Odds, effect, pars, MASS_PER_ML[[1]], 3)
# 2 vs. 1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T2\\, only)}$", " ", " ", " ")
key2 = getting_odds(Odds, effect, pars, MASS_PER_ML[[3]], 3)
# 2 vs. 0
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key3 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 3)
# -1 vs. 0
Odds = c("$\\frac{P(Yi=flew\\, in\\, T1\\, only)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key4 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 1)
# 1 vs. 0
Odds = c("$\\frac{P(Yi=flew\\, in\\, T2\\, only)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key5 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 2)
# -1 vs. 1
Odds = c("$\\frac{P(Yi=flew\\, in\\, T1\\, only)}{P(Yi=flew\\, in\\, T2\\, only}$", " ", " ", " ")
key6 = getting_odds(Odds, effect, pars, MASS_PER_ML[[3]], 2)
key = rbind(key1, key2, key3, key4, key5, key6)
rownames(key)<-NULL
colnames(key) = c("Odds","Effect", "Parameter", "Estimate", "SE", "exp($\\beta$)", "Wald", "p")
kable(key) %>%
kable_styling(bootstrap_options = "hover", full_width = F)  %>%
add_header_above(c("Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model" = 8)) %>%
column_spec(1, width="6cm")
getting_odds = function(Odds, effect, pars, odds, r) {
# Odds:     Equation of the odds written out as vector of strings.
# effect:   Main effects written out as a vector of strings.
# pars:     Parameters written out as a vector of strings
# odds:     Model table ML equations for the given outcome and baseline.
# r:        Row in which the outcome is indexed.
estimate = round(unlist(odds[r,1:4]),2)
SE = c(" ", round(unlist(odds[r,6:8]),2))
for (i in 2:4) {
if (i == 2) {
estimate[i] = estimate[i]*20
}
if (i == 4) {
estimate[i] = estimate[i]/100
}
}
exp.b = c(" ",round(exp(estimate[2:4]),2))
wald = c(" ",round(unlist(odds[r,12:14]),2))
pvals = c(" ",round(unlist(odds[r,15:17]),2))
key = cbind(Odds, effect, pars, estimate, SE, exp.b, wald, pvals)
return(key)
}
# 2 vs. -1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T1\\, only)}$", " ", " ", " ")
effect = c("Intercept", "$\\delta$ Mass %", "Sex", "Wing-to-Body")
pars = c("$\\alpha$", "$\\beta_1$", "$\\beta_2\\, (F=1 | M=-1)$", "$\\beta_3\\,(\\mu=0)$ ")
key1 = getting_odds(Odds, effect, pars, MASS_PER_ML[[1]], 3)
# 2 vs. 1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T2\\, only)}$", " ", " ", " ")
key2 = getting_odds(Odds, effect, pars, MASS_PER_ML[[3]], 3)
# 2 vs. 0
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key3 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 3)
# -1 vs. 0
Odds = c("$\\frac{P(Yi=flew\\, in\\, T1\\, only)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key4 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 1)
# 1 vs. 0
Odds = c("$\\frac{P(Yi=flew\\, in\\, T2\\, only)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key5 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 2)
# -1 vs. 1
Odds = c("$\\frac{P(Yi=flew\\, in\\, T1\\, only)}{P(Yi=flew\\, in\\, T2\\, only}$", " ", " ", " ")
key6 = getting_odds(Odds, effect, pars, MASS_PER_ML[[3]], 2)
key = rbind(key1, key2, key3, key4, key5, key6)
rownames(key)<-NULL
colnames(key) = c("Odds","Effect", "Parameter", "Estimate", "SE", "exp($\\beta$)", "Wald", "p")
kable(key) %>%
kable_styling(bootstrap_options = "hover", full_width = F)  %>%
add_header_above(c("Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model" = 8)) %>%
column_spec(1, width="6cm")
#%>% row_spec(0, italic=T)
# save_kable("model_table.pdf)
# 2 vs. -1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T1\\, only)}$", " ", " ", " ")
effect = c("Intercept", "$\\delta$ Mass %", "Sex", "Wing-to-Body")
pars = c("$\\alpha$", "$\\beta_1$", "$\\beta_2\\, (F=1 | M=-1)$", "$\\beta_3\\,(\\mu=0)$ ")
key1 = getting_odds(Odds, effect, pars, MASS_PER_ML[[1]], 3)
# 2 vs. 1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T2\\, only)}$", " ", " ", " ")
key2 = getting_odds(Odds, effect, pars, MASS_PER_ML[[3]], 3)
# 2 vs. 0
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key3 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 3)
# -1 vs. 0
Odds = c("$\\frac{P(Yi=flew\\, in\\, T1\\, only)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key4 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 1)
# 1 vs. 0
Odds = c("$\\frac{P(Yi=flew\\, in\\, T2\\, only)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key5 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 2)
# -1 vs. 1
Odds = c("$\\frac{P(Yi=flew\\, in\\, T1\\, only)}{P(Yi=flew\\, in\\, T2\\, only}$", " ", " ", " ")
key6 = getting_odds(Odds, effect, pars, MASS_PER_ML[[3]], 2)
key = rbind(key1, key2, key3, key4, key5, key6)
rownames(key)<-NULL
colnames(key) = c("Odds","Effect", "Parameter", "Estimate", "SE", "exp($\\beta$)*", "Wald", "p")
kable(key) %>%
kable_styling(bootstrap_options = "hover", full_width = F)  %>%
add_header_above(c("Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model" = 8)) %>%
column_spec(1, width="6cm")
#%>% row_spec(0, italic=T)
# save_kable("model_table.pdf)
kable(key) %>%
kable_styling(bootstrap_options = "strips" "hover", full_width = F)  %>%
kable(key) %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
add_header_above(c("Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model" = 8)) %>%
column_spec(1, width="6cm")
#%>% row_spec(0, italic=T)
# save_kable("model_table.pdf)
getting_odds = function(Odds, effect, pars, odds, r) {
# Odds:     Equation of the odds written out as vector of strings.
# effect:   Main effects written out as a vector of strings.
# pars:     Parameters written out as a vector of strings
# odds:     Model table ML equations for the given outcome and baseline.
# r:        Row in which the outcome is indexed.
estimate = round(unlist(odds[r,1:4]),2)
SE = c(" ", round(unlist(odds[r,6:8]),2))
for (i in 2:4) {
if (i == 2) {
estimate[i] = estimate[i]*20
}
if (i == 4) {
estimate[i] = round(estimate[i]/100,2)
}
}
exp.b = c(" ",round(exp(estimate[2:4]),2))
wald = c(" ",round(unlist(odds[r,12:14]),2))
pvals = c(" ",round(unlist(odds[r,15:17]),2))
key = cbind(Odds, effect, pars, estimate, SE, exp.b, wald, pvals)
return(key)
}
# 2 vs. -1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T1\\, only)}$", " ", " ", " ")
# 2 vs. -1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T1\\, only)}$", " ", " ", " ")
effect = c("Intercept", "$\\delta$ Mass %", "Sex", "Wing-to-Body")
pars = c("$\\alpha$", "$\\beta_1$", "$\\beta_2\\, (F=1 | M=-1)$", "$\\beta_3\\,(\\mu=0)$ ")
key1 = getting_odds(Odds, effect, pars, MASS_PER_ML[[1]], 3)
# 2 vs. 1
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=flew\\, in\\, T2\\, only)}$", " ", " ", " ")
key2 = getting_odds(Odds, effect, pars, MASS_PER_ML[[3]], 3)
# 2 vs. 0
Odds = c("$\\frac{P(Yi=flew\\,twice)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key3 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 3)
# -1 vs. 0
Odds = c("$\\frac{P(Yi=flew\\, in\\, T1\\, only)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key4 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 1)
# 1 vs. 0
Odds = c("$\\frac{P(Yi=flew\\, in\\, T2\\, only)}{P(Yi=did\\, not\\, fly)}$", " ", " ", " ")
key5 = getting_odds(Odds, effect, pars, MASS_PER_ML[[2]], 2)
# -1 vs. 1
Odds = c("$\\frac{P(Yi=flew\\, in\\, T1\\, only)}{P(Yi=flew\\, in\\, T2\\, only}$", " ", " ", " ")
key6 = getting_odds(Odds, effect, pars, MASS_PER_ML[[3]], 2)
key = rbind(key1, key2, key3, key4, key5, key6)
rownames(key)<-NULL
colnames(key) = c("Odds","Effect", "Parameter", "Estimate*", "SE", "exp($\\beta$)*", "Wald", "p")
kable(key) %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
add_header_above(c("Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model" = 8)) %>%
column_spec(1, width="6cm")
sd(d$wing2body_c)
sd(d$wing2body_c) / 2
kable(key) %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
add_header_above(c("Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model" = 8)) %>%
column_spec(1, width="6cm")
kable(key) %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
add_header_above(c("Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model" = 8)) %>%
column_spec(1, width="6cm") %>%
kable_classic(full_width = F, html_font = "Cambria")
kable(key, caption="Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="6cm") %>%
kable_classic(full_width = F, html_font = "Cambria")
kable(key, caption="Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="6cm") %>%
kable_classic(html_font = "Cambria")
kable(key, caption="Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="10cm") %>%
kable_classic(html_font = "Cambria")
kable(key, caption="Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="6cm") %>%
kable_classic(html_font = "Cambria")
kable(key, caption="Table 1. Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="6cm") %>%
kable_classic(html_font = "Cambria")
kable(key, caption="Table 1. Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="6cm") %>%
kable_classic(html_font = "Cambria") %>%
pack_rows(" ", 1, 4)
kable(key, caption="Table 1. Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="6cm") %>%
kable_classic(html_font = "Cambria") %>%
pack_rows(" ", 1, 4) %>%
pack_rows(" ", 5, 8)
kable(key, caption="Table 1. Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="6cm") %>%
kable_classic_2(html_font = "Cambria")
kable(key, caption="Table 1. Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="6cm") %>%
kable_classic(html_font = "Cambria")
kable(key, caption="Table 1. Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="6cm") %>%
kable_classic(html_font = "Cambria") %>%
row_spec(2, extra_css = "border-bottom: 1px solid")
kable(key, caption="Table 1. Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="6cm") %>%
kable_classic(html_font = "Cambria") %>%
row_spec(4, extra_css = "border-bottom: 1px solid")
kable(key, caption="Table 1. Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="6cm") %>%
kable_classic(html_font = "Cambria") %>%
row_spec(c(4,8), extra_css = "border-bottom: 1px solid")
kable(key, caption="Table 1. Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="6cm") %>%
kable_classic(html_font = "Cambria") %>%
row_spec(c(4,8, 12), extra_css = "border-bottom: 1px solid")
kable(key, caption="Table 1. Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="6cm") %>%
kable_classic(html_font = "Cambria") %>%
row_spec(c(4,8,12,16), extra_css = "border-bottom: 1px solid")
kable(key, caption="Table 1. Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="6cm") %>%
kable_classic(html_font = "Cambria") %>%
row_spec(c(4,8,12,16), extra_css = "border-bottom: 1px solid")
kable(key, caption="Table 1. Estimated Parameters, Standard Errors, and Wald Test Statistics for All Main Effects Model") %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
column_spec(1, width="6cm") %>%
kable_classic(html_font = "Cambria") %>%
row_spec(c(4,8,12,16,20), extra_css = "border-bottom: 1px solid")
>>>>>>> b8adee03d85275d3b16ca2b31d26e94afacc6aea
