120279/4485000
18.74*24
518.16/2
5833/3
6*6*6
216-148
216-144
518.16/2
472.81/2
472.81/2 - 115.20
9.53+6.05
15.58/2
exp(1062)
1/exp(1062)
5833.34*12
1875*12
1e4
1e5
23*60
0.382+0.33+0.35+0.414+0.274
0.382+0.33+0.35+0.414+0.274+0.246+0.369+0.32+0.257+0.388
0.382+0.33+0.35+0.414+0.274+0.246+0.369+0.32+0.257+0.388+0.357+0.339+0.354+0.311+0.331
0.382+0.33+0.35+0.414+0.274+0.246+0.369+0.32+0.257+0.388+0.357+0.339+0.354+0.311+0.331+0.336+0.318+0.293+0.273+0.274+0.363
0.382+0.33+0.35+0.414+0.274+0.246+0.369+0.32+0.257+0.388+0.357+0.339+0.354+0.311+0.331+0.336+0.318+0.293+0.273+0.274+0.363+0.313+0.283+0.272+0.317+0.294
0.382+0.33+0.35+0.414+0.274+0.246+0.369+0.32+0.257+0.388+0.357+0.339+0.354+0.311+0.331+0.336+0.318+0.293+0.273+0.274+0.363+0.313+0.283+0.272+0.317+0.294+0.293+0.325+0.32
diap_avg_8_stripe <- c(0.382, 0.33, 0.35, 0.414, 0.274, 0.246, 0.369, 0.32, 0.257, 0.388, 0.357, 0.339, 0.354, 0.311, 0.331, 0.336, 0.318, 0.293, 0.273, 0.274, 0.363, 0.313, 0.283, 0.272, 0.317, 0.294, 0.293, 0.325, 0.32)
mean(diap_avg_8_stripe)
sd(diap_avg_8_stripe)
sd(diap_avg_8_stripe)*qnorm(0.95)/length(diap_avg_8_stripe)
load('~/Dropbox/diapause_ibm/MC plotting/from server/summaries/diap_disp_ev_F_0.01_summary.Rdata')
diap_disp_ev_F_0.01_summary
(sd(diap_avg_8_stripe)*qnorm(0.975))/sqrt(length(diap_avg_8_stripe))
load('~/Dropbox/diapause_ibm/MC plotting/from server/summaries/diap_disp_ev_F_0.01_init_diap_0.90_summary.Rdata')
diap_disp_ev_F_0.01_init_diap_0.90_summary
load('~/Dropbox/diapause_ibm/MC plotting/from server/summaries/tau_change_disp_ev_F_0.01_init_diap_0.90_summary.Rdata')
tau_change_disp_ev_F_0.01_init_diap_0.90_summary
5833.34*12
466.68/5833.34
$340.81-48.17
340.81-48.17
(340.81-48.17)/2
(340.81-48.17-168.64)/2
1e5
1e2
1e3
33/30
1.1*50
25*5
25*5*12
33*5*12
12*30
12*30*5
14*30*5
load('~/Dropbox/diapause_ibm/model_output/one_rep.Rdata')
one.rep
415-87
425.87-21.11-86.93
16*0.8
16*0.08
10*0.05
12*0.05
84/1.5
34/1.5
## ----setup, include=FALSE-------------------------------------------------------------------------------------------------#
rm(list=ls())#
library(lme4)#
library(zoo)#
library(rethinking)#
#
library(lubridate)#
#
library(dplyr)#
library(ggplotify)#
library(gridExtra)#
library(ggformula)#
library(tidyselect)#
#
dir = "~/Documents/Florida soapberry project/2019 Dispersal/SBB-dispersal git/avbernat_working_on/"#
setwd(dir)#
#
knitr::opts_chunk$set(echo = TRUE)#
## -------------------------------------------------------------------------------------------------------------------------#
source_path = "./Rsrc/"#
#
script_names = c("compare_models.R",#
                 "regression_output.R", #
                 "clean_morph_data2.R", # two functions: read_morph_data and remove_torn_wings#
                 "AICprobabilities.R")#
#
for (script in script_names) { #
  path = paste0(source_path, script)#
  source(path) #
}#
#
source("./RSsrc/spatial_dependencies.R") # space
dotplot = function(var, data) {#
  plot(data[,var], seq(1:nrow(data)),#
       col=data$color, ylab="Order of the data from text file", xlab=paste0("Value of ", var))#
}
## ----setup, include=FALSE-------------------------------------------------------------------------------------------------#
#
####MLC NOTES: KEEP#
#
rm(list=ls())#
library(lme4)#
library(zoo)#
library(rethinking)#
#
library(lubridate)#
#
library(dplyr)#
library(ggplotify)#
library(gridExtra)#
library(ggformula)#
library(tidyselect)#
#
dir = "~/Documents/Florida soapberry project/2019 Dispersal/SBB-dispersal git/avbernat_working_on/"#
setwd(dir)#
#
knitr::opts_chunk$set(echo = TRUE)#
## -------------------------------------------------------------------------------------------------------------------------#
###MLC NOTES: KEEP#
#
source_path = "./Rsrc/"#
#
script_names = c("compare_models.R",#
                 "regression_output.R", #
                 "clean_morph_data2.R", # two functions: read_morph_data and remove_torn_wings#
                 "AICprobabilities.R")#
#
for (script in script_names) { #
  path = paste0(source_path, script)#
  source(path) #
}#
#
###MLC NOTES: PROBABLY CUT#
source("./RSsrc/spatial_dependencies.R") # space#
## -------------------------------------------------------------------------------------------------------------------------#
###MLC NOTES: KEEP#
data_list <- read_morph_data("All_morphology/stats/data/allmorphology05.10.21-coors.csv")#
raw_data = data_list[[1]]#
data_long = data_list[[2]]
d = data_long %>%#
  filter(!is.na(wing2body))#
#
range(d$wing2body)
MyVar <- c("wing2body", "wing2thorax", "body", "wing", "beak", "thorax", "lat", "long") #
d$color = "red"#
d$color[d$year == "2019" & d$month =="May"] = "black"#
#
par(mfrow=c(3,3))#
for (v in MyVar) {#
  dotplot(v, d)#
}
d = data_long %>%#
  filter(!is.na(wing2body))#
#
###MLC NOTES: CUT#
range(d$wing2body) # 0.5773723 0.8472103
MyVar <- c("wing2body", "wing2thorax", "body", "wing", "beak", "thorax", "lat", "long") #
d$color = "red"#
d$color[d$year == "2019" & d$month =="May"] = "black"#
#
par(mfrow=c(3,3))#
for (v in MyVar) {#
  dotplot(v, d)#
}
## ----setup, include=FALSE-------------------------------------------------------------------------------------------------#
#
####MLC NOTES: KEEP#
#
rm(list=ls())#
library(lme4)#
library(zoo)#
library(rethinking)#
#
library(lubridate)#
#
library(dplyr)#
library(ggplotify)#
library(gridExtra)#
library(ggformula)#
library(tidyselect)#
#
dir = "~/Documents/Florida soapberry project/2019 Dispersal/SBB-dispersal git/avbernat_working_on/"#
setwd(dir)#
#
knitr::opts_chunk$set(echo = TRUE)#
## -------------------------------------------------------------------------------------------------------------------------#
###MLC NOTES: KEEP#
#
source_path = "./Rsrc/"#
#
script_names = c("compare_models.R",#
                 "regression_output.R", #
                 "clean_morph_data2.R", # two functions: read_morph_data and remove_torn_wings#
                 "AICprobabilities.R")#
#
for (script in script_names) { #
  path = paste0(source_path, script)#
  source(path) #
}#
#
###MLC NOTES: PROBABLY CUT#
source("./RSsrc/spatial_dependencies.R") # space#
## -------------------------------------------------------------------------------------------------------------------------#
###MLC NOTES: KEEP#
data_list <- read_morph_data("All_morphology/stats/data/allmorphology05.10.21-coors.csv")#
raw_data = data_list[[1]]#
data_long = data_list[[2]] #add comments on what these are: is this just long-winged bugs?#
## -------------------------------------------------------------------------------------------------------------------------#
###MLC NOTES: PROBABLY CUT: good for data exploration, but not necessary#
#
dotplot = function(var, data) {#
  plot(data[,var], seq(1:nrow(data)),#
       col=data$color, ylab="Order of the data from text file", xlab=paste0("Value of ", var))#
}#
## -------------------------------------------------------------------------------------------------------------------------#
# remove dates with missing body lengths: necessary for wing2body stats, not for L vs. S#
###MLC NOTES: MOVE to data filtering function#
#
d = data_long %>%#
  filter(!is.na(wing2body))#
#
###MLC NOTES: CUT#
range(d$wing2body) # 0.5773723 0.8472103
MyVar <- c("wing2body", "wing2thorax", "body", "wing", "beak", "thorax", "lat", "long") #
d$color = "red"#
d$color[d$year == "2019" & d$month =="May"] = "black"#
#
par(mfrow=c(3,3))#
for (v in MyVar) {#
  dotplot(v, d)#
}
d2 = d %>% #
  filter(!beak<4.5) %>%#
  filter(!wing2body <0.62) #%>%#
  #filter(!body < 8) %>%#
  #filter(!wing2body > 0.79)#
#
d3 = remove_torn_wings(d2)#
#
par(mfrow=c(3,3))#
for (v in MyVar) {#
  dotplot(v, d3)#
}
plot(log(d3$wing)~log(d3$body))
par(mfrow=c(3,3))#
for (v in MyVar) {#
  dotplot(v, d)#
}
par(mfrow=c(3,3))#
for (v in MyVar) {#
  dotplot(v, d)#
}
plot(d$beak~d$wing2body)
plot(raw_data$beak~raw_d$thorax)
plot(raw_data$beak~raw_data$thorax)
plot(raw_data$beak~raw_data$wing)
length(d$beak)
length(d$beak[d$beak<4.5])
length(d$beak[d$beak<4])
d[d$beak<4]
d[d$beak<4,]
d[d$beak<4.5,]
raw_data[raw_data$beak<4.5,]
d$wing2body[d$wing2body<0.62,]
d[d$wing2body<0.62,]
plot(d$wing2body~d$thora)
plot(d$wing2body~d$thorax)
8.12/13.7
7.91/13.7
row(d)
nrow(d)
d3 = remove_torn_wings(d2)#
#
par(mfrow=c(3,3))#
for (v in MyVar) {#
  dotplot(v, d3)#
}
d2 = d %>% #
  filter(!beak<4.5) %>% ###This is just one problem individual; my guess would be that its beak broke and the measurement is truly erroneous.#
  filter(!wing2body <0.62) #%>% ###One of these (wing=4.47) is absolutely an S individual mislabelled as L. The other just looks weird. Regardless this is very conservative in terms of removing individuals from the dataset.#
  #filter(!body < 8) %>%#
  #filter(!wing2body > 0.79)
par(mfrow=c(3,3))#
for (v in MyVar) {#
  dotplot(v, d2)#
}
d[d$wing2thorax<2.2,]
d2 = d %>% #
  filter(!beak<4.5) %>% ###MLC: This is just one problem individual; my guess would be that its beak broke and the measurement is truly erroneous.#
  filter(!wing2body <0.62) %>% ###MLC: One of these (wing=4.47) is absolutely an S individual mislabelled as L. The other just looks weird. Regardless this is very conservative in terms of removing individuals from the dataset.#
  filter(!wing2thorax <2.2)
par(mfrow=c(3,3))#
for (v in MyVar) {#
  dotplot(v, d2)#
}
d3 = remove_torn_wings(d2)#
#
par(mfrow=c(3,3))#
for (v in MyVar) {#
  dotplot(v, d3)#
}
plot(log(d3$wing)~log(d3$body))
par(mfrow=c(3,1))#
hist(raw_data$wing[raw_data$w_morph=="L"]/raw_data$thorax[raw_data$w_morph=="L"],#
     main="Histogram of wing length/thorax length for long winged SBB",#
     xlab="wing length/thorax length",#
      breaks=seq(0.5, 3.8, by=0.05))#
hist(raw_data_missing$wing/raw_data_missing$thorax, #
      main="Histogram of wing length/thorax length for SBB w/o recorded wing morph",#
      xlab="wing length/thorax length",#
      breaks=seq(0.5, 3.8, by=0.05))#
hist(raw_data$wing[raw_data$w_morph=="S"]/raw_data$thorax[raw_data$w_morph=="S"],#
      main="Histogram of wing length/thorax length for short winged SBB",#
      xlab="wing length/thorax length",#
      breaks=seq(0.5,3.8,by=0.05))
raw_data_missing = raw_data %>%#
  filter(w_morph=="" | is.na(w_morph)) # had 30 that are hard to identify as either S or L based on the wing2thorax thresholds.#
raw_data_missing # need to determine the morph of these bugs manually. In the long term...need to do this manually because the boundaries of what is defined as a morph can change over time.
par(mfrow=c(3,1))#
hist(raw_data$wing[raw_data$w_morph=="L"]/raw_data$thorax[raw_data$w_morph=="L"],#
     main="Histogram of wing length/thorax length for long winged SBB",#
     xlab="wing length/thorax length",#
      breaks=seq(0.5, 3.8, by=0.05))#
hist(raw_data_missing$wing/raw_data_missing$thorax, #
      main="Histogram of wing length/thorax length for SBB w/o recorded wing morph",#
      xlab="wing length/thorax length",#
      breaks=seq(0.5, 3.8, by=0.05))#
hist(raw_data$wing[raw_data$w_morph=="S"]/raw_data$thorax[raw_data$w_morph=="S"],#
      main="Histogram of wing length/thorax length for short winged SBB",#
      xlab="wing length/thorax length",#
      breaks=seq(0.5,3.8,by=0.05))
group = raw_data %>% group_by(sex, #
                  datetime) %>% #
  summarize(count = n())
data = raw_data#
data$population[data$population=="Ft.Myers"]<-"Ft. Myers"#
data$population[data$population=="Key_Largo"]<-"Key Largo"#
data$population[data$population=="Lake_Placid"]<-"Lake Placid"#
data$population[data$population=="Lake_Wales"]<-"Lake Wales"#
data$population[data$population=="North_Key_Largo"]<-"North Key Largo"#
data$population[data$population=="Plantation_Key"]<-"Plantation Key"#
#
data$pophost[data$pophost=="C.corindum"]<-"C. corindum"#
data$pophost[data$pophost=="K.elegans"]<-"K. elegans"#
#
data = data[order(-data$lat),] #
#lat_order = unique(data$population) # should work but lat and long not right so need to do it manually:#
lat_order = c("Gainesville", "Leesburg", "Lake Wales", "Lake Placid", "Ft. Myers",  "Homestead",  "North Key Largo", "Key Largo", "Plantation Key")#
data$population = as.factor(data$population)#
data$population = factor(data$population,levels=lat_order)
colors = c("#787a87", "#E69F00", "#56B4E9",#
           "royalblue", "grey", "gold", #
           "#409973", "#9bc969", "ivory2") # the keys#
#
p = ggplot(data=subset(data, !is.na(datetime)), aes(x=datetime, fill=population)) + #
    geom_bar(position='stack', color="black", width=0.7) +#
    theme_bw() #+ geom_text(aes(label=), position=position_dodge(width=0.9), vjust=-0.25)#
p1 = p + labs(title=" ", fill="Population",#
         x="Field Collection Month", y = "Number of Bugs Collected")+#
   scale_fill_manual(values=colors) +#
   theme_classic() +theme(#
     axis.text.y = element_text(size=11),#
     axis.text.x=element_text(size=11, angle = 45, hjust = 1.1),#
        axis.title=element_text(size=17,face="bold"))  +#
theme(axis.title.x = element_text(vjust = -3)) +#
theme(axis.title.y = element_text(vjust = 4)) +#
  theme(plot.margin=unit(c(1,1,1.1,1.2),"cm"))#
#
p = ggplot(data=subset(data, !is.na(datetime)), aes(x=datetime, fill=pophost)) + #
    geom_bar(position='stack', color="black", width=0.7) +#
    theme_bw()#
p2 = p + labs(title=" ", fill="Host Plant",#
         x="Field Collection Month", y = "Number of Bugs Collected")+#
   scale_fill_manual(values=c("#56B4E9", "chartreuse4")) +#
   theme_classic() + theme(#
        axis.text.y = element_text(size=11),#
        axis.text.x=element_text(size=11, angle = 45, hjust = 1.1), # 9#
        axis.title=element_text(size=17,face="bold"))  +#
theme(axis.title.x = element_text(vjust = -3)) +#
theme(axis.title.y = element_text(vjust = 4)) +#
  theme(plot.margin=unit(c(1,1,1.1,1.2),"cm"))#
#
p = ggplot(data=subset(data, !is.na(datetime)), aes(x=datetime, fill=sex)) + #
    geom_bar(position='stack', color="black", width=0.7) +#
    theme_bw()#
p3 = p + labs(title=" ", fill="Sex",#
         x="Field Collection Month", y = "Number of Bugs Collected")+#
   scale_fill_manual(values=c("salmon1", "darkslategray3")) +#
   theme_classic() +theme(     #
        axis.text.y = element_text(size=11),#
        axis.text.x=element_text(size=11, angle = 45, hjust = 1.1), # 9#
        axis.title=element_text(size=17,face="bold"))  +#
theme(axis.title.x = element_text(vjust = -3)) +#
theme(axis.title.y = element_text(vjust = 4)) +#
  theme(plot.margin=unit(c(1,1,1.1,1.2),"cm"))
numF = paste0("F(", as.character(unlist(group[1:10,3])), ")")#
numM = paste0("M(", as.character(unlist(group[11:20,3])), ")")#
text = paste0(numF, "\n", numM)#
p1 + annotate(geom="text", x=1, y=400, label=text[1],#
              color="black", size=3) +#
  annotate(geom="text", x=2, y=470, label=text[2],#
              color="black", size=3) +#
  annotate(geom="text", x=3, y=270, label=text[3],#
              color="black", size=3) +#
  annotate(geom="text", x=4, y=220, label=text[4],#
              color="black", size=3) +#
  annotate(geom="text", x=5, y=320, label=text[5],#
              color="black", size=3) +#
  annotate(geom="text", x=6, y=500, label=text[6],#
              color="black", size=3) +#
  annotate(geom="text", x=7, y=240, label=text[7],#
              color="black", size=3) +#
  annotate(geom="text", x=8, y=730, label=paste0("\n", text[8]),#
              color="black", size=3) +#
  annotate(geom="text", x=9, y=440, label=text[9],#
              color="black", size=3) +#
  annotate(geom="text", x=10, y=650, label=text[10],#
              color="black", size=3)
p2
p3
m = glm(wing_morph_binom ~ months_since_start, data=raw_data, family="binomial")#
tidy_regression(m, is_color=FALSE)#
m = glm(wing_morph_binom ~ month_of_year, data=raw_data, family="binomial")#
tidy_regression(m, is_color=FALSE)
nrow(data)
data<-data.frame(R=raw_data$wing_morph_binom, #
                 A=raw_data$sex_binom, #
                 B=raw_data$pophost_binom, #
                 C=(raw_data$month_of_year),#
                 D=raw_data$months_since_start)#
#
model_script = paste0(source_path,"generic models-binomial glm 4-FF.R")#
model_comparisonsAIC(model_script)
summary(m98)
m = glm(wing_morph_binom ~ sex_binom + pophost_binom + month_of_year, data=raw_data, family="binomial")
summary(m)
model_script = paste0(source_path,"generic models-gaussian glm 4-FF.R")#
model_comparisonsAIC(model_script)
model_script = paste0(source_path,"generic models-binomial glm 4-FF.R")#
model_comparisonsAIC(model_script)
anova(m98, m110, test="Chisq") # adding B*D does not improve fit
anova(m84, m98, test="Chisq") # adding A*B improves fit
anova(m63, m84, test="Chisq")
anova(m51, m63, test="Chisq")
m = glm(wing_morph_binom ~ sex_binom * pophost_binom + sex_binom * months_since_start + pophost_binom * month_of_year + month_of_year * months_since_start, data=raw_data, family="binomial") # m98 top model#
tidy_regression(m, is_color=FALSE)
temp = raw_data %>%#
  filter(!is.na(wing_morph_binom)) # filter out NA's that glm did automatically#
#
check_spatial_dependencies(m, temp, temp$long, temp$lat, zone = 16, cutoff=14000, is_glm=TRUE)
SE = function(x){sd(x)/sqrt(length(x))}#
wmorph_summaryt<-aggregate(wing_morph_binom~sex_binom*pophost_binom*month_of_year*months_since_start, data=raw_data, FUN=mean)#
wmorph_summaryt$sd<-aggregate(wing_morph_binom~sex_binom*pophost_binom*month_of_year*months_since_start, data=raw_data,#
                          FUN=sd)$wing_morph_binom#
wmorph_summaryt$se<-aggregate(wing_morph_binom~sex_binom*pophost_binom*month_of_year*months_since_start, data=raw_data,#
                          FUN=SE)$wing_morph_binom
data = wmorph_summaryt#
data<-data.frame(R=data$sd, #
                 A=data$sex_binom, #
                 B=data$pophost_binom, #
                 C=(data$month_of_year),#
                 D=data$months_since_start)#
#
model_script = paste0(source_path,"generic models-gaussian glm 3-FF.R")#
model_comparisonsAIC(model_script)
anova(m2, m6, test="Chisq") # Adding C does not improve fit#
anova(m2, m4, test="Chisq") # Adding B does not improve fit#
anova(m0, m2, test="Chisq")
m = glm(sd ~ pophost_binom, data=wmorph_summaryt, family="gaussian")#
tidy_regression(m, is_color=FALSE) # -1 = C.corindum
plot(m$fitted.values, m$residuals)
data_long = remove_torn_wings(data_long)
data_long$compare_dates <- -1#
data_long$compare_dates[data_long$months_since_start==81] <- 1#
#
compare_dates_model <- glm(wing2body~compare_dates + pophost_binom*sex_binom, data=data_long)#
#
tidy_regression(compare_dates_model, is_color=FALSE)
par(mar = c(5, 5, 2, 0)) #
par(bty = 'n')#
boxplot(wing2body~compare_dates,#
        data=data_long, ylim=c(0.6,0.85),#
        xlab = "collection date",#
        ylab= "wing2body",#
        col=c(col.alpha( "red" , alpha = 0.5), #
              col.alpha( "blue" , alpha = 0.5)),#
        border="gray30",#
        names=c("2013-2020", "Winter 2020"), pch=1,#
        cex=1.56, cex.lab=1.8, cex.axis=1.56#
)#
means <- tapply(data_long$wing2body,data_long$compare_dates, mean, na.rm=TRUE)#
points(means,pch=18, cex=2, col="white")
par(mar = c(5, 5, 2, 0)) #
par(bty = 'n')#
boxplot(wing2body~compare_dates,#
        data=data_long, ylim=c(0.6,0.85),#
        xlab = "collection date",#
        ylab= "wing2body",#
        col=#c(col.alpha( "red" , alpha = 0.5), ###MLC: error in col.alpha, could not find function#
              #col.alpha( "blue" , alpha = 0.5))#
              col=c("red", "blue"),#
        border="gray30",#
        names=c("2013-2020", "Winter 2020"), pch=1,#
        cex=1.56, cex.lab=1.8, cex.axis=1.56#
)#
means <- tapply(data_long$wing2body,data_long$compare_dates, mean, na.rm=TRUE)#
points(means,pch=18, cex=2, col="white")
# fig.width=3, fig.height=2.7,#
par(mar = c(5, 5, 2, 0)) #
par(bty = 'n')#
boxplot(wing2body~compare_dates,#
        data=data_long, ylim=c(0.6,0.85),#
        xlab = "collection date",#
        ylab= "wing2body",#
        col=#c(col.alpha( "red" , alpha = 0.5), ###MLC: error in col.alpha, could not find function#
              #col.alpha( "blue" , alpha = 0.5))#
              col=c("red", "blue"))#
        border="gray30",#
        names=c("2013-2020", "Winter 2020"), pch=1,#
        cex=1.56, cex.lab=1.8, cex.axis=1.56#
)#
means <- tapply(data_long$wing2body,data_long$compare_dates, mean, na.rm=TRUE)#
points(means,pch=18, cex=2, col="white")#
#title("(a)", adj = 0.05, line = 0, cex.main=1.8)
par(mar = c(5, 5, 2, 0)) #
par(bty = 'n')#
boxplot(wing2body~compare_dates,#
        data=data_long, ylim=c(0.6,0.85),#
        xlab = "collection date",#
        ylab= "wing2body",#
        col=#c(col.alpha( "red" , alpha = 0.5), ###MLC: error in col.alpha, could not find function#
              #col.alpha( "blue" , alpha = 0.5))#
              c("red", "blue"))#
        border="gray30",#
        names=c("2013-2020", "Winter 2020"), pch=1,#
        cex=1.56, cex.lab=1.8, cex.axis=1.56#
)#
means <- tapply(data_long$wing2body,data_long$compare_dates, mean, na.rm=TRUE)#
points(means,pch=18, cex=2, col="white")
par(mar = c(5, 5, 2, 0)) #
par(bty = 'n')#
boxplot(wing2body~compare_dates,#
        data=data_long, ylim=c(0.6,0.85),#
        xlab = "collection date",#
        ylab= "wing2body",#
        col=#c(col.alpha( "red" , alpha = 0.5), ###MLC: error in col.alpha, could not find function#
              #col.alpha( "blue" , alpha = 0.5))#
              c("red", "blue"),#
        border="gray30",#
        names=c("2013-2020", "Winter 2020"), pch=1,#
        cex=1.56, cex.lab=1.8, cex.axis=1.56#
)#
means <- tapply(data_long$wing2body,data_long$compare_dates, mean, na.rm=TRUE)#
points(means,pch=18, cex=2, col="white")
data_long$wing2body_c = (data_long$wing2body-mean(data_long$wing2body, na.rm=TRUE))#
data_long$month_of_year_c = (data_long$month_of_year-mean(data_long$month_of_year, na.rm=TRUE))#
data_long$months_since_start_c = (data_long$months_since_start-mean(data_long$months_since_start, na.rm=TRUE))
data<-data.frame(R=data_long$wing2body_c, # centered#
                 A=data_long$sex_binom, # sex#
                 B=data_long$pophost_binom, # host#
                 C=data_long$month_of_year_c, #
                 D=data_long$months_since_start_c) #
#
model_script = paste0(source_path,"generic models-gaussian glm 3-FF.R")#
model_comparisonsAIC(model_script)
anova(m15, m17, test="Chisq") # Adding A*C does not improve fit#
anova(m11, m15, test="Chisq") # Adding B*C does not improve fit#
anova(m11, m14, test="Chisq") # Adding A*C does not improve fit#
anova(m8, m11, test="Chisq")
m = glm(wing2body_c ~ sex_binom*pophost_binom + month_of_year_c, data=data_long, family=gaussian) #
tidy_regression(m, is_color=FALSE) # m11#
summary(m)
nrow(data_long)
model_script = paste0(source_path,"generic models-gaussian glm 4-FF.R")#
model_comparisonsAIC(model_script)
anova(m22, m35, test="Chisq")
anova(m22, m34, test="Chisq")
anova(m34, m58, test="Chisq")
summary(m58)
wing2body_summary<-aggregate(wing2body~pophost*month_of_year, data=data_long, FUN=mean)#
plot(wing2body~month_of_year, data=wing2body_summary, pch=19, col=c(1,2)[as.factor(pophost)])
wing2body_summary<-aggregate(wing2body~sex_binom*month_of_year, data=data_long, FUN=mean) # black is M; Red is F#
plot(wing2body~month_of_year, data=wing2body_summary, pch=19, col=c(1,2)[as.factor(sex_binom)]) # black is C. ; Red is K.
m = glm(wing2body_c ~ sex_binom*pophost_binom + month_of_year_c, data=data_long, family=gaussian) #
tidy_regression(m, is_color=FALSE) # m11#
summary(m)
wing2body_summary<-aggregate(wing2body~pophost*month_of_year, data=data_long, FUN=mean)#
plot(wing2body~month_of_year, data=wing2body_summary, pch=19, col=c(1,2)[as.factor(pophost)])# black is C. ; Red is K. ###MLC: moved this note up
wing2body_summary<-aggregate(wing2body~pophost*month_of_year, data=data_long, FUN=mean)#
plot(wing2body~month_of_year, data=wing2body_summary, pch=19, col=c(1,2)[as.factor(pophost)])
wing2body_summary<-aggregate(wing2body~sex_binom*month_of_year, data=data_long, FUN=mean) # black is M; Red is F#
plot(wing2body~month_of_year, data=wing2body_summary, pch=19, col=c(1,2)[as.factor(sex_binom)])
SE = function(x){sd(x)/sqrt(length(x))}#
w2b_summaryt<-aggregate(wing2body~sex_binom*pophost_binom*month_of_year*months_since_start, data=data_long, FUN=mean)#
w2b_summaryt$sd<-aggregate(wing2body~sex_binom*pophost_binom*month_of_year*months_since_start, data=data_long,#
                          FUN=sd)$wing2body#
w2b_summaryt$se<-aggregate(wing2body~sex_binom*pophost_binom*month_of_year*months_since_start, data=data_long,#
                          FUN=SE)$wing2body
data = w2b_summaryt#
data<-data.frame(R=data$sd, #
                 A=data$sex_binom, #
                 B=data$pophost_binom, #
                 C=(data$month_of_year),#
                 D=data$months_since_start)#
#
model_script = paste0(source_path,"generic models-gaussian glm 3-FF.R")#
model_comparisonsAIC(model_script)
anova(m2, m6, test="Chisq")#
anova(m0, m2, test="Chisq") # Adding B marginally improves fit
m = glm(sd ~ pophost_binom, data=w2b_summaryt, family=gaussian) #
tidy_regression(m, is_color=FALSE)
time_var_tests = function(d, print_test=FALSE) {#
  months = sort(unique(d$month_of_year))#
  month_labs <- c("Feb", "Apr", "May", "Aug", "Sept", "Oct", "Dec")#
#
  table = matrix(nrow=length(months), ncol=9)#
  i = 0#
  for (m in months) {#
    i = i + 1#
    data = d[d$month_of_year==m, ]#
    VAR = var.test(wing2body ~ sex, data = data) # F test to compare the variances of two samples from normal pops#
    TTEST= t.test(wing2body ~ sex, data=data) # t.test to find significant difference between the means of two groups#
    AOV = aov(wing2body ~ sex, data=data) # used to analyze the differences among means. #
    p = TukeyHSD(AOV)$sex[,"p adj"]#
    diff = TukeyHSD(AOV)$sex[,"diff"]#
    if (print_test) {#
      print(month_labs[i])#
      print("t.test")#
      print(TTEST)#
      print("anova")#
      print(summary(AOV))#
      print(TukeyHSD(AOV))#
      cat("-------------------------------------------------")#
    }#
    # plot histograms#
    h = data %>%#
    ggplot( aes(x=wing2body, fill=sex)) +#
      geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +#
      scale_fill_manual(values=c("#69b3a2", "#404080")) +#
      labs(fill="")  + labs(title=month_labs[i])#
    print(h)#
    # populate matrix#
    table[i,1] = month_labs[i]#
    table[i,2] = "M-F"#
    table[i,3] = round(diff,4)#
    table[i,4] = round(p,5)#
    table[i,5] = "M=-1 | F=1"#
    table[i,6] = round(TTEST$statistic,4)#
    table[i,7] = round(TTEST$p.value,5)#
    table[i,8] = round(VAR$statistic,2)#
    table[i,9] = round(VAR$p.value, 3)#
  }#
  colnames(table) = c("month","sex", "Tukey-diff", "p-val", "sex", "ttest", "p-val", "F-test", "p-val")#
  return(table)#
}
summary_table = time_var_tests(data_long)#
summary_table
summary_table
y = summary_table[,"F-test"]#
xlab = summary_table[, "month"]#
x = sort(unique(d$month_of_year))#
#
plot(x,y, ylab="F-test value", xlab="Month of Year", xaxt = "n", main="wing-to-body ~ sex")#
axis(1, at=seq(min(x),max(x),2), labels=xlab[-5])#
abline(h=1, col=2) # non-linear relationship where at the beginning of the year the variance between sexes is similar but then in spring it deviates a lot. In the summer the variance is similar and then towards the winter the variance deviates.
time_var_tests = function(d, print_test=FALSE) {#
  months = sort(unique(d$month_of_year))#
  month_labs <- c("Feb", "Apr", "May", "Aug", "Sept", "Oct", "Dec")#
#
  table = matrix(nrow=length(months), ncol=9)#
  i = 0#
  for (m in months) {#
    i = i + 1#
    data = d[d$month_of_year==m, ]#
    VAR = var.test(wing2body ~ pophost, data = data) # F test to compare the variances of two samples from normal pops#
    TTEST= t.test(wing2body ~ pophost, data=data) # t.test to find significant difference between the means of two groups#
    AOV = aov(wing2body ~ pophost, data=data) # used to analyze the differences among means. #
    p = TukeyHSD(AOV)$pophost[,"p adj"]#
    diff = TukeyHSD(AOV)$pophost[,"diff"]#
    if (print_test) {#
      print(month_labs[i])#
      print("t.test")#
      print(TTEST)#
      print("anova")#
      print(summary(AOV))#
      print(TukeyHSD(AOV))#
      cat("-------------------------------------------------")#
    }#
    # plot histograms#
    h = data %>%#
    ggplot( aes(x=wing2body, fill=pophost)) +#
      geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +#
      scale_fill_manual(values=c("#69b3a2", "#404080")) +#
      labs(fill="")  + labs(title=month_labs[i])#
    print(h)#
    # populate matrix#
    table[i,1] = month_labs[i]#
    table[i,2] = "GRT-BV"#
    table[i,3] = round(diff,4)#
    table[i,4] = round(p,5)#
    table[i,5] = "GRT=1 | BV=-1"#
    table[i,6] = round(TTEST$statistic,4)#
    table[i,7] = round(TTEST$p.value,5)#
    table[i,8] = round(VAR$statistic,2)#
    table[i,9] = round(VAR$p.value, 3)#
  }#
  colnames(table) = c("month","sex", "Tukey-diff", "p-val", "sex", "ttest", "p-val", "F-test", "p-val")#
  return(table)#
}
summary_table = time_var_tests(data_long)#
summary_table
levels(d$pophost)
head(d)
time_var_tests = function(d, print_test=FALSE, funhost="C.corindum") {#
  months = sort(unique(d$month_of_year))#
  month_labs <- c("Feb", "Apr", "May", "Aug", "Sept", "Oct", "Dec")#
#
  table = matrix(nrow=length(months), ncol=9)#
  i = 0#
  for (m in months) {#
    i = i + 1#
    data = d[d$month_of_year==m & pophost==funhost, ]#
    VAR = var.test(wing2body ~ sex, data = data) # F test to compare the variances of two samples from normal pops#
    TTEST= t.test(wing2body ~ sex, data=data) # t.test to find significant difference between the means of two groups#
    AOV = aov(wing2body ~ sex, data=data) # used to analyze the differences among means. #
    p = TukeyHSD(AOV)$sex[,"p adj"]#
    diff = TukeyHSD(AOV)$sex[,"diff"]#
    if (print_test) {#
      print(month_labs[i])#
      print("t.test")#
      print(TTEST)#
      print("anova")#
      print(summary(AOV))#
      print(TukeyHSD(AOV))#
      cat("-------------------------------------------------")#
    }#
    # plot histograms#
    h = data %>%#
    ggplot( aes(x=wing2body, fill=sex)) +#
      geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +#
      scale_fill_manual(values=c("#69b3a2", "#404080")) +#
      labs(fill="")  + labs(title=month_labs[i])#
    print(h)#
    # populate matrix#
    table[i,1] = month_labs[i]#
    table[i,2] = "M-F"#
    table[i,3] = round(diff,4)#
    table[i,4] = round(p,5)#
    table[i,5] = "M=-1 | F=1"#
    table[i,6] = round(TTEST$statistic,4)#
    table[i,7] = round(TTEST$p.value,5)#
    table[i,8] = round(VAR$statistic,2)#
    table[i,9] = round(VAR$p.value, 3)#
  }#
  colnames(table) = c("month","sex", "Tukey-diff", "p-val", "sex", "ttest", "p-val", "F-test", "p-val")#
  return(table)#
} #
## -------------------------------------------------------------------------------------------------------------------------#
summary_table = time_var_tests(data_long, funhost="C.corindum")#
summary_table
time_var_tests = function(d, print_test=FALSE, funhost="C.corindum") {#
  months = sort(unique(d$month_of_year))#
  month_labs <- c("Feb", "Apr", "May", "Aug", "Sept", "Oct", "Dec")#
#
  table = matrix(nrow=length(months), ncol=9)#
  i = 0#
  for (m in months) {#
    i = i + 1#
    data = d[d$month_of_year==m & d$pophost==funhost, ]#
    VAR = var.test(wing2body ~ sex, data = data) # F test to compare the variances of two samples from normal pops#
    TTEST= t.test(wing2body ~ sex, data=data) # t.test to find significant difference between the means of two groups#
    AOV = aov(wing2body ~ sex, data=data) # used to analyze the differences among means. #
    p = TukeyHSD(AOV)$sex[,"p adj"]#
    diff = TukeyHSD(AOV)$sex[,"diff"]#
    if (print_test) {#
      print(month_labs[i])#
      print("t.test")#
      print(TTEST)#
      print("anova")#
      print(summary(AOV))#
      print(TukeyHSD(AOV))#
      cat("-------------------------------------------------")#
    }#
    # plot histograms#
    h = data %>%#
    ggplot( aes(x=wing2body, fill=sex)) +#
      geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +#
      scale_fill_manual(values=c("#69b3a2", "#404080")) +#
      labs(fill="")  + labs(title=month_labs[i])#
    print(h)#
    # populate matrix#
    table[i,1] = month_labs[i]#
    table[i,2] = "M-F"#
    table[i,3] = round(diff,4)#
    table[i,4] = round(p,5)#
    table[i,5] = "M=-1 | F=1"#
    table[i,6] = round(TTEST$statistic,4)#
    table[i,7] = round(TTEST$p.value,5)#
    table[i,8] = round(VAR$statistic,2)#
    table[i,9] = round(VAR$p.value, 3)#
  }#
  colnames(table) = c("month","sex", "Tukey-diff", "p-val", "sex", "ttest", "p-val", "F-test", "p-val")#
  return(table)#
} #
## -------------------------------------------------------------------------------------------------------------------------#
summary_table = time_var_tests(data_long, funhost="C.corindum")#
summary_table
summary_table_C = time_var_tests(data_long, funhost="C.corindum")#
summary_table_K = time_var_tests(data_long, funhost="K.elegans")
summary_table_C#
summary_table_K
time_var_tests = function(d, print_test=FALSE, funhost="C.corindum") {#
  months = sort(unique(d$month_of_year))#
  month_labs <- c("Feb", "Apr", "May", "Aug", "Sept", "Oct", "Dec")#
#
  table = matrix(nrow=length(months), ncol=9)#
  i = 0#
  for (m in months) {#
    i = i + 1#
    data = d[d$month_of_year==m, ] #& d$pophost==funhost, ]#
    VAR = var.test(wing2body ~ sex, data = data) # F test to compare the variances of two samples from normal pops#
    TTEST= t.test(wing2body ~ sex, data=data) # t.test to find significant difference between the means of two groups#
    AOV = aov(wing2body ~ sex, data=data) # used to analyze the differences among means. #
    p = TukeyHSD(AOV)$sex[,"p adj"]#
    diff = TukeyHSD(AOV)$sex[,"diff"]#
    if (print_test) {#
      print(month_labs[i])#
      print("t.test")#
      print(TTEST)#
      print("anova")#
      print(summary(AOV))#
      print(TukeyHSD(AOV))#
      cat("-------------------------------------------------")#
    }#
    # plot histograms#
    h = data %>%#
    ggplot( aes(x=wing2body, fill=sex)) +#
      geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +#
      scale_fill_manual(values=c("#69b3a2", "#404080")) +#
      labs(fill="")  + labs(title=month_labs[i])#
    print(h)#
    # populate matrix#
    table[i,1] = month_labs[i]#
    table[i,2] = "M-F"#
    table[i,3] = round(diff,4)#
    table[i,4] = round(p,5)#
    table[i,5] = "M=-1 | F=1"#
    table[i,6] = round(TTEST$statistic,4)#
    table[i,7] = round(TTEST$p.value,5)#
    table[i,8] = round(VAR$statistic,2)#
    table[i,9] = round(VAR$p.value, 3)#
  }#
  colnames(table) = c("month","sex", "Tukey-diff", "p-val", "sex", "ttest", "p-val", "F-test", "p-val")#
  return(table)#
}
summary_table_both = time_var_tests(data_long)
summary_table_C#
summary_table_K#
summary_table_both
time_var_tests = function(d, print_test=FALSE, funhost="C.corindum") {#
  months = sort(unique(d$month_of_year))#
  month_labs <- c("Feb", "Apr", "May", "Aug", "Sept", "Oct", "Dec")#
#
  table = matrix(nrow=length(months), ncol=9)#
  i = 0#
  for (m in months) {#
    i = i + 1#
    data = d[d$month_of_year==m #
    			& d$pophost==funhost#
    			, ]#
    VAR = var.test(wing2body ~ sex, data = data) # F test to compare the variances of two samples from normal pops#
    TTEST= t.test(wing2body ~ sex, data=data) # t.test to find significant difference between the means of two groups#
    AOV = aov(wing2body ~ sex, data=data) # used to analyze the differences among means. #
    p = TukeyHSD(AOV)$sex[,"p adj"]#
    diff = TukeyHSD(AOV)$sex[,"diff"]#
    if (print_test) {#
      print(month_labs[i])#
      print("t.test")#
      print(TTEST)#
      print("anova")#
      print(summary(AOV))#
      print(TukeyHSD(AOV))#
      cat("-------------------------------------------------")#
    }#
    # plot histograms#
    h = data %>%#
    ggplot( aes(x=wing2body, fill=sex)) +#
      geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +#
      scale_fill_manual(values=c("#69b3a2", "#404080")) +#
      labs(fill="")  + labs(title=month_labs[i])#
    print(h)#
    # populate matrix#
    table[i,1] = month_labs[i]#
    table[i,2] = "M-F"#
    table[i,3] = round(diff,4)#
    table[i,4] = round(p,5)#
    table[i,5] = "M=-1 | F=1"#
    table[i,6] = round(TTEST$statistic,4)#
    table[i,7] = round(TTEST$p.value,5)#
    table[i,8] = round(VAR$statistic,2)#
    table[i,9] = round(VAR$p.value, 3)#
  }#
  colnames(table) = c("month","sex", "Tukey-diff", "p-val", "sex", "ttest", "p-val", "F-test", "p-val")#
  return(table)#
} #
## -------------------------------------------------------------------------------------------------------------------------#
summary_table_C = time_var_tests(data_long, funhost="C.corindum")
summary_table_C
time_var_tests = function(d, print_test=FALSE, testsex=="F") {#
  months = sort(unique(d$month_of_year))#
  month_labs <- c("Feb", "Apr", "May", "Aug", "Sept", "Oct", "Dec")#
#
  table = matrix(nrow=length(months), ncol=9)#
  i = 0#
  for (m in months) {#
    i = i + 1#
    data = d[d$month_of_year==m#
    		#& d$sex==testsex ###MLC: Comment out this line to run summary with both sexes#
#
    		, ]#
    VAR = var.test(wing2body ~ pophost, data = data) # F test to compare the variances of two samples from normal pops#
    TTEST= t.test(wing2body ~ pophost, data=data) # t.test to find significant difference between the means of two groups#
    AOV = aov(wing2body ~ pophost, data=data) # used to analyze the differences among means. #
    p = TukeyHSD(AOV)$pophost[,"p adj"]#
    diff = TukeyHSD(AOV)$pophost[,"diff"]#
    if (print_test) {#
      print(month_labs[i])#
      print("t.test")#
      print(TTEST)#
      print("anova")#
      print(summary(AOV))#
      print(TukeyHSD(AOV))#
      cat("-------------------------------------------------")#
    }#
    # plot histograms#
    h = data %>%#
    ggplot( aes(x=wing2body, fill=pophost)) +#
      geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +#
      scale_fill_manual(values=c("#69b3a2", "#404080")) +#
      labs(fill="")  + labs(title=month_labs[i])#
    print(h)#
    # populate matrix#
    table[i,1] = month_labs[i]#
    table[i,2] = "GRT-BV"#
    table[i,3] = round(diff,4)#
    table[i,4] = round(p,5)#
    table[i,5] = "GRT=1 | BV=-1"#
    table[i,6] = round(TTEST$statistic,4)#
    table[i,7] = round(TTEST$p.value,5)#
    table[i,8] = round(VAR$statistic,2)#
    table[i,9] = round(VAR$p.value, 3)#
  }#
  colnames(table) = c("month","sex", "Tukey-diff", "p-val", "sex", "ttest", "p-val", "F-test", "p-val")#
  return(table)#
} #
## -------------------------------------------------------------------------------------------------------------------------#
summary_table = time_var_tests(data_long)#
summary_table
time_var_tests = function(d, print_test=FALSE, testsex="F") {#
  months = sort(unique(d$month_of_year))#
  month_labs <- c("Feb", "Apr", "May", "Aug", "Sept", "Oct", "Dec")#
#
  table = matrix(nrow=length(months), ncol=9)#
  i = 0#
  for (m in months) {#
    i = i + 1#
    data = d[d$month_of_year==m#
    		#& d$sex==testsex ###MLC: Comment out this line to run summary with both sexes#
#
    		, ]#
    VAR = var.test(wing2body ~ pophost, data = data) # F test to compare the variances of two samples from normal pops#
    TTEST= t.test(wing2body ~ pophost, data=data) # t.test to find significant difference between the means of two groups#
    AOV = aov(wing2body ~ pophost, data=data) # used to analyze the differences among means. #
    p = TukeyHSD(AOV)$pophost[,"p adj"]#
    diff = TukeyHSD(AOV)$pophost[,"diff"]#
    if (print_test) {#
      print(month_labs[i])#
      print("t.test")#
      print(TTEST)#
      print("anova")#
      print(summary(AOV))#
      print(TukeyHSD(AOV))#
      cat("-------------------------------------------------")#
    }#
    # plot histograms#
    h = data %>%#
    ggplot( aes(x=wing2body, fill=pophost)) +#
      geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +#
      scale_fill_manual(values=c("#69b3a2", "#404080")) +#
      labs(fill="")  + labs(title=month_labs[i])#
    print(h)#
    # populate matrix#
    table[i,1] = month_labs[i]#
    table[i,2] = "GRT-BV"#
    table[i,3] = round(diff,4)#
    table[i,4] = round(p,5)#
    table[i,5] = "GRT=1 | BV=-1"#
    table[i,6] = round(TTEST$statistic,4)#
    table[i,7] = round(TTEST$p.value,5)#
    table[i,8] = round(VAR$statistic,2)#
    table[i,9] = round(VAR$p.value, 3)#
  }#
  colnames(table) = c("month","sex", "Tukey-diff", "p-val", "sex", "ttest", "p-val", "F-test", "p-val")#
  return(table)#
} #
## -------------------------------------------------------------------------------------------------------------------------#
summary_table = time_var_tests(data_long)#
summary_table
time_var_tests = function(d, print_test=FALSE, testsex="F") {#
  months = sort(unique(d$month_of_year))#
  month_labs <- c("Feb", "Apr", "May", "Aug", "Sept", "Oct", "Dec")#
#
  table = matrix(nrow=length(months), ncol=9)#
  i = 0#
  for (m in months) {#
    i = i + 1#
    data = d[d$month_of_year==m#
    		& d$sex==testsex ###MLC: Comment out this line to run summary with both sexes#
#
    		, ]#
    VAR = var.test(wing2body ~ pophost, data = data) # F test to compare the variances of two samples from normal pops#
    TTEST= t.test(wing2body ~ pophost, data=data) # t.test to find significant difference between the means of two groups#
    AOV = aov(wing2body ~ pophost, data=data) # used to analyze the differences among means. #
    p = TukeyHSD(AOV)$pophost[,"p adj"]#
    diff = TukeyHSD(AOV)$pophost[,"diff"]#
    if (print_test) {#
      print(month_labs[i])#
      print("t.test")#
      print(TTEST)#
      print("anova")#
      print(summary(AOV))#
      print(TukeyHSD(AOV))#
      cat("-------------------------------------------------")#
    }#
    # plot histograms#
    h = data %>%#
    ggplot( aes(x=wing2body, fill=pophost)) +#
      geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +#
      scale_fill_manual(values=c("#69b3a2", "#404080")) +#
      labs(fill="")  + labs(title=month_labs[i])#
    print(h)#
    # populate matrix#
    table[i,1] = month_labs[i]#
    table[i,2] = "GRT-BV"#
    table[i,3] = round(diff,4)#
    table[i,4] = round(p,5)#
    table[i,5] = "GRT=1 | BV=-1"#
    table[i,6] = round(TTEST$statistic,4)#
    table[i,7] = round(TTEST$p.value,5)#
    table[i,8] = round(VAR$statistic,2)#
    table[i,9] = round(VAR$p.value, 3)#
  }#
  colnames(table) = c("month","sex", "Tukey-diff", "p-val", "sex", "ttest", "p-val", "F-test", "p-val")#
  return(table)#
} #
## -------------------------------------------------------------------------------------------------------------------------#
summary_table_F = time_var_tests(data_long, testsex="F")#
summary_table_M = time_var_tests(data_long, testsex="M")
summary_table_F#
summary_table_M#
summary_table
y = summary_table[,"F-test"]#
xlab = summary_table[, "month"]#
x = sort(unique(d$month_of_year))#
#
plot(x,y, ylab="F-test value", xlab="Month of Year", xaxt = "n", main="wing-to-body ~ pophost")#
axis(1, at=seq(min(x),max(x),2), labels=xlab[-5])#
abline(h=1, col=2)
temp = data_long %>%#
  filter(!is.na(months_since_start), !is.na(sex), !is.na(wing2body))
time_var_tests = function(d, print_test=FALSE) {#
  months = unique(d$months_since_start)#
  #month_labs <- c("Feb", "Apr", "May", "Aug", "Sept", "Oct", "Dec")#
#
  table = matrix(nrow=length(months), ncol=9)#
  i = 0#
  for (m in months) {#
    i = i + 1#
    data = d[d$months_since_start==m, ]#
    VAR = var.test(wing2body ~ sex, data = data) # F test to compare the variances of two samples from normal pops#
    TTEST= t.test(wing2body ~ sex, data=data) # t.test to find significant difference between the means of two groups#
    AOV = aov(wing2body ~ sex, data=data) # used to analyze the differences among means. #
    p = TukeyHSD(AOV)$sex[,"p adj"]#
    diff = TukeyHSD(AOV)$sex[,"diff"]#
    if (print_test) {#
      print(m)#
      print("t.test")#
      print(TTEST)#
      print("anova")#
      print(summary(AOV))#
      print(TukeyHSD(AOV))#
      cat("-------------------------------------------------")#
    }#
    # plot histograms#
    h = data %>%#
    ggplot( aes(x=wing2body, fill=sex)) +#
      geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +#
      scale_fill_manual(values=c("#69b3a2", "#404080")) +#
      labs(fill="")  + labs(title=m)#
    print(h)#
    # populate matrix#
    table[i,1] = m#
    table[i,2] = "M-F"#
    table[i,3] = round(diff,4)#
    table[i,4] = round(p,5)#
    table[i,5] = "M=-1 | F=1"#
    table[i,6] = round(TTEST$statistic,4)#
    table[i,7] = round(TTEST$p.value,5)#
    table[i,8] = round(VAR$statistic,2)#
    table[i,9] = round(VAR$p.value, 3)#
  }#
  colnames(table) = c("month","sex", "Tukey-diff", "p-val", "sex", "ttest", "p-val", "F-test", "p-val")#
  return(table)#
} #
#
summary_table = time_var_tests(temp)#
summary_table
## ----setup, include=FALSE-------------------------------------------------------------------------------------------------#
rm(list=ls())#
library(ggformula)#
library(splines)#
library(gridExtra) #grid.arrange()#
library(ggpmisc) #stat_fit_glance#
library(cowplot)#
#
knitr::opts_chunk$set(echo = TRUE)#
## -------------------------------------------------------------------------------------------------------------------------#
source_path = "~/Documents/Florida soapberry project/2019 Dispersal/SBB-dispersal git/avbernat_working_on/Rsrc"#
#
script_names = c("compare_models.R","regression_output.R", "clean_morph_data2.R", "AICprobabilities.R")#
#
for (script in script_names) { #
  path = paste0(source_path, script)#
  source(path) #
}
## ----setup, include=FALSE-------------------------------------------------------------------------------------------------#
rm(list=ls())#
library(ggformula)#
library(splines)#
library(gridExtra) #grid.arrange()#
library(ggpmisc) #stat_fit_glance#
library(cowplot)#
#
knitr::opts_chunk$set(echo = TRUE)#
## -------------------------------------------------------------------------------------------------------------------------#
source_path = "~/Documents/Florida soapberry project/2019 Dispersal/SBB-dispersal git/avbernat_working_on/Rsrc/"#
#
script_names = c("compare_models.R","regression_output.R", "clean_morph_data2.R", "AICprobabilities.R")#
#
for (script in script_names) { #
  path = paste0(source_path, script)#
  source(path) #
}
data_list <- read_morph_data("data/allmorphology05.10.21-coors.csv")#
raw_data = data_list[[1]]#
data_long = data_list[[2]]#
all_bugs = nrow(data_long)#
#
data_long = remove_torn_wings(data_long)
dir = "~/Documents/Florida soapberry project/2019 Dispersal/SBB-dispersal git/avbernat_working_on/"#
setwd(dir)
data_list <- read_morph_data("data/allmorphology05.10.21-coors.csv")#
raw_data = data_list[[1]]#
data_long = data_list[[2]]#
all_bugs = nrow(data_long)#
#
data_long = remove_torn_wings(data_long)
data_list <- read_morph_data("All_morphology/stats/data/allmorphology05.10.21-coors.csv")#
raw_data = data_list[[1]]#
data_long = data_list[[2]]#
all_bugs = nrow(data_long)#
#
data_long = remove_torn_wings(data_long)
SE = function(x){sd(x)/sqrt(length(x))}#
w2b_summary<-aggregate(wing2body~sex*pophost*dates, data=data_long, FUN=mean)#
w2b_summary$se<-aggregate(wing2body~sex*pophost*dates, data=data_long,#
                          FUN=SE)$wing2body#
#
#jitter slightly#
jitter = runif(n=nrow(w2b_summary), min=-0.5, max=0.5)#
w2b_summary$dates <- w2b_summary$dates + jitter
l1 = lowess(w2b_summary$dates, w2b_summary$wing2body, f=0.4)#
plot(w2b_summary$dates, w2b_summary$wing2body)#
lines(l1, type = "l")#
#
plot_lowess_residuals = function(lfit, x, y) {#
  lfun <- approxfun(lfit)#
  fitted <- lfun(x)#
  resid <- y-fitted#
  plot(fitted,resid)#
  abline(h=0,col=8)#
}#
#
plot_lowess_residuals(l1, w2b_summary$dates, w2b_summary$wing2body)
l1 = lowess(w2b_summary$dates, w2b_summary$wing2body, f=0.4)#
plot(w2b_summary$dates, w2b_summary$wing2body)#
lines(l1, type = "l")
l1 = lowess(w2b_summary$dates, w2b_summary$wing2body, f=0.4)#
plot(w2b_summary$dates, w2b_summary$wing2body)#
lines(l1, type = "l")
plot_lowess_residuals = function(lfit, x, y) {#
  lfun <- approxfun(lfit)#
  fitted <- lfun(x)#
  resid <- y-fitted#
  plot(fitted,resid)#
  abline(h=0,col=8)#
}#
#
plot_lowess_residuals(l1, w2b_summary$dates, w2b_summary$wing2body)
l1 = lowess(w2b_summary$dates, w2b_summary$wing2body, f=0.4)#
plot(w2b_summary$dates, w2b_summary$wing2body)#
lines(l1, type = "l")
d = w2b_summary#
#
# general plotting features#
xlab_years = na.omit(sort(unique(data_long$dates))[-2])#
host_colors_shade = c("turquoise3", "green")#
host_colors_pts = c("turquoise3", "springgreen4")#
#
# date plotting features#
threshold = unique(d$dates)[10]#
d$date_b = "2013-2014"#
d$date_b[d$dates >= threshold] = "2015-2020"#
#
d$date_b = as.factor(d$date_b)#
#
w2b_table<-aggregate(wing2body~dates, data=data_long, FUN=mean)#
w2b_table$date_b = "2013-2014"#
w2b_table$date_b[w2b_table$dates >= threshold] = "2015-2020"#
w2b_table$date_b = as.factor(w2b_table$date_b)#
#
last_n_years = w2b_table[w2b_table$date_b=="2015-2020",]#
last_n_years#
## -------------------------------------------------------------------------------------------------------------------------#
dfF = d[d$sex=="F",]#
dfM = d[d$sex=="M",]#
#
dfF$pophost[dfF$pophost=="C.corindum"]<-"C. corindum"#
dfF$pophost[dfF$pophost=="K.elegans"]<-"K. elegans"#
dfM$pophost[dfM$pophost=="C.corindum"]<-"C. corindum"#
dfM$pophost[dfM$pophost=="K.elegans"]<-"K. elegans"#
#
dfF$pophost = factor(dfF$pophost, levels = c("K. elegans", "C. corindum") )#
dfF$`Host Plant` = dfF$pophost#
dfM$pophost = factor(dfM$pophost, levels = c("K. elegans", "C. corindum") )#
dfM$`Host Plant` = dfM$pophost#
## ----fig.width=4.7, fig.height=2.15---------------------------------------------------------------------------------------#
p0 = ggplot() + #
  ggtitle("C") + xlab("Year") + ylab("Wing-to-Body Ratio") +#
  geom_vline(xintercept = xlab_years, color="gainsboro") + #
   geom_smooth(data=w2b_table, method="lm", se=FALSE, linetype = "dashed",#
              mapping = aes(x = dates, y = wing2body), colour="black", lwd=0.5) +#
  geom_smooth(data=w2b_table, method="loess", #
              mapping = aes(x = dates, y = wing2body), colour="black") + #
  geom_point(data=w2b_table, mapping = aes(x = dates, y = wing2body)) +#
  ylim(0.71, 0.75) +#
  stat_smooth(data=last_n_years, mapping = aes(x = dates, y = wing2body), method = "lm", formula = y ~ x, se = FALSE,#
               colour="blue") # linetype = "longdash",#
#
p0 = p0 + guides(fill = guide_legend(reverse = TRUE)) + theme_classic() +#
  theme(axis.text=element_text(size=13),#
        axis.title=element_text(size=16), #
        plot.title=element_text(size=20)) + guides(color = FALSE)  + scale_linetype(guide = FALSE) +#
  theme(legend.key = element_rect(fill = "white", color = NA), #
        legend.key.size = unit(0.5, "cm"),#
        legend.key.width = unit(0.5,"cm")) + #
  scale_fill_manual(values = "blue", labels=c("C. corindum", "K. elegans")) + #
  labs(fill = "Host Plant") + theme(legend.title = element_text(size = 14),#
                                    legend.text = element_text(size = 13, face="italic")) +#
  scale_color_manual(values="blue") + theme(legend.position = c(0.2, 0.88)) + theme(legend.title = element_blank())#
#
# loess #
alpha = paste("alpha[loess]==", ggplot_build(p0)$data[[2]]$alpha[1])#
degree="lambda[loess]==0"#
mlinear = glm(wing2body ~ dates, data=d, family=gaussian)#
pvalue = paste0("italic(p)[glm]==",round(summary(mlinear)$coeff[[8]],2))#
#
p0 = p0 + annotate(geom="text", x=unique(d$dates)[10], y=0.74, label=alpha, color="black", parse=TRUE, size=6) +#
          annotate(geom="text", x=unique(d$dates)[10], y=0.748, label=degree, color="black",parse=TRUE, size=6) +#
          annotate(geom="text", x=unique(d$dates)[15], y=0.718, label=pvalue, color="black", parse=TRUE, size=6)#
#
# last 5 years#
mllinear = glm(wing2body ~ dates, data=w2b_table[w2b_table$date_b=="2015-2020",], family=gaussian)#
pval = paste0("italic(p)[glm]==",round(summary(mllinear)$coeff[[8]],2))#
summary(mllinear)#
#
p0 = p0 + annotate(geom="text", x=unique(d$dates)[24], y=0.743, label=pval, color="blue", parse=TRUE, size=6)#
p0
w2b_summary<-aggregate(wing2body~sex*pophost*month_of_year, data=data_long, FUN=mean)#
df = w2b_summary#
#
xlab_dates = na.omit(sort(unique(data_long$month_of_year)))#
xlab_months = xlab_dates[c(-2,-5)]#
month_labs <- c("Feb", "May", "Aug", "Oct", "Dec")#
#
sex_colors_shade = c("brown1", "sienna4")#
sex_colors_pts = c("brown1", "grey27")
df$pophost[df$pophost=="C.corindum"]<-"C. corindum"#
df$pophost[df$pophost=="K.elegans"]<-"K. elegans"#
df$pophost = factor(df$pophost, levels = c("K. elegans", "C. corindum") )#
#
df$`Host Plant` = df$pophost#
#
df$sex[df$sex=="F"]<-"Females"#
df$sex[df$sex=="M"]<-"Males"#
df$sex = factor(df$sex, levels = c("Males", "Females") )#
df$`Sex` = df$sex
customPlot = list( theme_classic(),#
                   theme(axis.text=element_text(size=13),#
                      axis.title=element_text(size=16), #
                      plot.title=element_text(size=20),),#
                   theme(legend.position = c(0.2, 0.9)),#
                   theme(legend.title = element_text(size=14, face="italic"), #element_text(size = 14),#
                         legend.text = element_text(size = 13, face="italic"))#
                   )
p1 = ggplot() + #
  ggtitle("Females") + xlab("Year") + ylab("Wing-to-Body Ratio") +                          # title and labels#
  geom_vline(xintercept = xlab_years, color="gainsboro") +                                  # add grey lines for the each collection date#
  geom_smooth(data=dfF, method="glm", se=FALSE, linetype = "dashed",                        # GLM regression and pvalue#
              mapping = aes(x = dates, y = wing2body), colour="black", lwd=0.5) + #
  geom_smooth(data=dfF, method="loess",                                                     # LOESS regression#
              mapping = aes(x = dates, y = wing2body, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=dfF, mapping = aes(x = dates, y = wing2body, colour=`Host Plant`)) +   # data points and yaxis value range#
  ylim(0.70, 0.76) +#
  customPlot +#
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green"))#
#
# Males#
p2 = ggplot() + #
  ggtitle("Males") + xlab("Year") + ylab("Wing-to-Body Ratio") +                            # title and labels#
  geom_vline(xintercept = xlab_years, color="gainsboro") +                                  # add grey lines for the each collection date#
  geom_smooth(data=dfM, method="glm", se=FALSE, linetype = "dashed",                        # GLM regression and pvalue#
              mapping = aes(x = dates, y = wing2body), colour="black", lwd=0.5) + #
  geom_smooth(data=dfM, method="loess",                                                     # LOESS regression#
              mapping = aes(x = dates, y = wing2body, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=dfM, mapping = aes(x = dates, y = wing2body, colour=`Host Plant`)) +   # data points and yaxis value range#
  ylim(0.70, 0.76) +#
  customPlot +#
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green"))#
#
grid.arrange(p1, p2, ncol=2)
p5 = ggplot() + #
  ggtitle("A") + xlab("Month") + ylab("Wing-to-Body Ratio") +                              # title and labels#
  geom_vline(xintercept = xlab_dates, color="gainsboro") +                                          # add grey lines for the each collection date#
  geom_smooth(data=df, method="glm", se=FALSE, linetype = "dashed",                        # GLM regression and pvalue#
              mapping = aes(x = month_of_year, y = wing2body), colour="black", lwd=0.5) + #
  geom_smooth(data=df, method="loess",                                                     # LOESS regression#
              mapping = aes(x = month_of_year, y = wing2body, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=df, mapping = aes(x = month_of_year, y = wing2body, colour=`Host Plant`)) +   # data points and yaxis value range#
  ylim(0.71, 0.75) +#
  customPlot +#
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green")) +#
  scale_x_continuous(breaks=xlab_months, labels= month_labs)
p6 = ggplot() + #
  ggtitle("B") + xlab("Month") + ylab("Wing-to-Body Ratio") +                             # title and labels#
  geom_vline(xintercept = xlab_dates, color="gainsboro") +                                # add grey lines for the each collection date#
  geom_smooth(data=df, method="glm", se=FALSE, linetype = "dashed",                        # GLM regression and pvalue#
              mapping = aes(x = month_of_year, y = wing2body), colour="black", lwd=0.5) + #
  geom_smooth(data=df, method="loess",                                                     # LOESS regression#
              mapping = aes(x = month_of_year, y = wing2body, colour=Sex, fill=Sex)) + #
  geom_point(data=df, mapping = aes(x = month_of_year, y = wing2body, colour=Sex)) +   # data points and yaxis value range#
  ylim(0.71, 0.75) +#
  customPlot +#
  scale_color_manual(values=c("Females" = "brown3", "Males" = "black")) +#
  scale_fill_manual(values = c("Females" = "brown1", "Males" = "sienna4")) +#
  scale_x_continuous(breaks=xlab_months, labels= month_labs) + theme(axis.title.y = element_blank())#
# extract the LOESS#
alpha = paste("alpha[loess]==", ggplot_build(p5)$data[[2]]$alpha[1])#
degree="lambda[loess]==0"#
#
mlinear = glm(wing2body ~ month_of_year, data=df, family=gaussian)#
#round(summary(mlinear)$coeff[[8]],3) #
pvalue = paste0("italic(p)[glm]==",round(summary(mlinear)$coeff[[8]],3))#
#
p5 = p5 + annotate(geom="text", x=10, y=0.744, label=alpha, color="black", parse=TRUE) +#
          annotate(geom="text", x=10, y=0.747, label=degree, color="black", parse=TRUE) +#
          annotate(geom="text", x=6.3, y=0.715, label=pvalue, color="black", parse=TRUE) #
p6 = p6 + annotate(geom="text", x=10, y=0.744, label=alpha, color="black", parse=TRUE) +#
          annotate(geom="text", x=10, y=0.747, label=degree, color="black", parse=TRUE) +#
          annotate(geom="text", x=6.3, y=0.715, label=pvalue, color="black", parse=TRUE) #
## ----fig.width=4.7*1.1, fig.height=4.4*1.1--------------------------------------------------------------------------------#
figure = ggdraw() +#
  draw_plot(p5, 0, .5, .5, .5) +#
  draw_plot(p6, 0.5, .5, .5, .5) +#
  draw_plot(p0, 0, 0, 1, .5)#
figure#
#ggsave("w2b_over_time.pdf", plot=figure)
?ggdraw
??ggdraw
head(ggplot_build(p5)$data[[2]]) # alpha = 0.4 (smoothing parameter)#
head(ggplot_build(p6)$data[[2]])
-------------------------------------------------------------------------------------------------------------------------#
dfF = df[df$sex=="Females",]#
dfM = df[df$sex=="Males",]#
#
dfF$pophost = factor(dfF$pophost, levels = c("K. elegans", "C. corindum") )#
dfF$`Host Plant` = dfF$pophost#
dfM$pophost = factor(dfM$pophost, levels = c("K. elegans", "C. corindum") )#
dfM$`Host Plant` = dfM$pophost#
## ----fig.width=4.7, fig.height=2.3----------------------------------------------------------------------------------------#
# females#
p3 = ggplot() + #
  ggtitle("Females") + xlab("Month") + ylab("Wing-to-Body Ratio") +#
  geom_vline(xintercept = xlab_dates, color="gainsboro") + #
  geom_smooth(data=dfF, method="lm", se=FALSE, linetype = "dashed", lwd=0.5,#
              mapping = aes(x = month_of_year, y = wing2body, colour = `Host Plant`)) +#
  geom_smooth(data=dfF, method="loess", #
              mapping = aes(x = month_of_year, y = wing2body, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=dfF, mapping = aes(x = month_of_year, y = wing2body, colour=`Host Plant`)) +#
  ylim(0.70, 0.765) +#
  customPlot + #
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green")) +#
  scale_x_continuous(breaks=xlab_months, labels= month_labs)#
#
# males#
p4 = ggplot() + #
  ggtitle("Males") + xlab("Month") + ylab("Wing-to-Body Ratio") +#
  geom_vline(xintercept = xlab_dates, color="gainsboro") + #
  geom_smooth(data=dfM, method="lm", se=FALSE, linetype = "dashed", lwd=0.5,#
              mapping = aes(x = month_of_year, y = wing2body, colour = `Host Plant`)) +#
  geom_smooth(data=dfM, method="loess", #
              mapping = aes(x = month_of_year, y = wing2body, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=dfM, mapping = aes(x = month_of_year, y = wing2body, colour=`Host Plant`)) +#
  ylim(0.70, 0.765) +#
  customPlot + #
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green")) +#
  scale_x_continuous(breaks=xlab_months, labels= month_labs)#
#
grid.arrange(p3, p4, ncol=2)
dfF = df[df$sex=="Females",]#
dfM = df[df$sex=="Males",]#
#
dfF$pophost = factor(dfF$pophost, levels = c("K. elegans", "C. corindum") )#
dfF$`Host Plant` = dfF$pophost#
dfM$pophost = factor(dfM$pophost, levels = c("K. elegans", "C. corindum") )#
dfM$`Host Plant` = dfM$pophost#
## ----fig.width=4.7, fig.height=2.3----------------------------------------------------------------------------------------#
# females#
p3 = ggplot() + #
  ggtitle("Females") + xlab("Month") + ylab("Wing-to-Body Ratio") +#
  geom_vline(xintercept = xlab_dates, color="gainsboro") + #
  geom_smooth(data=dfF, method="lm", se=FALSE, linetype = "dashed", lwd=0.5,#
              mapping = aes(x = month_of_year, y = wing2body, colour = `Host Plant`)) +#
  geom_smooth(data=dfF, method="loess", #
              mapping = aes(x = month_of_year, y = wing2body, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=dfF, mapping = aes(x = month_of_year, y = wing2body, colour=`Host Plant`)) +#
  ylim(0.70, 0.765) +#
  customPlot + #
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green")) +#
  scale_x_continuous(breaks=xlab_months, labels= month_labs)#
#
# males#
p4 = ggplot() + #
  ggtitle("Males") + xlab("Month") + ylab("Wing-to-Body Ratio") +#
  geom_vline(xintercept = xlab_dates, color="gainsboro") + #
  geom_smooth(data=dfM, method="lm", se=FALSE, linetype = "dashed", lwd=0.5,#
              mapping = aes(x = month_of_year, y = wing2body, colour = `Host Plant`)) +#
  geom_smooth(data=dfM, method="loess", #
              mapping = aes(x = month_of_year, y = wing2body, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=dfM, mapping = aes(x = month_of_year, y = wing2body, colour=`Host Plant`)) +#
  ylim(0.70, 0.765) +#
  customPlot + #
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green")) +#
  scale_x_continuous(breaks=xlab_months, labels= month_labs)#
#
grid.arrange(p3, p4, ncol=2)
head(ggplot_build(p3)$data[[2]])#
head(ggplot_build(p4)$data[[2]])
mloess <- loess(wing2body ~ month_of_year, data=dfF, degree=0)#
# Using a zero degree polynomial turns LOESS into a weighted moving average. #
xrange <- range(dfF$month_of_year)#
xseq <- seq(from=xrange[1], to=xrange[2], length=80)#
pred <- predict(mloess, newdata = data.frame(month_of_year = xseq), se=TRUE)#
y = pred$fit#
ci <- pred$se.fit * qt(0.95 / 2 + .5, pred$df)#
ymin = y - ci#
ymax = y + ci#
loess.DF <- data.frame(x = xseq, y, ymin, ymax, se = pred$se.fit)#
head(loess.DF)#
summary(loess.DF)#
summary(mloess)
mlinear = glm(wing2body ~ month_of_year, data=df, family=gaussian)#
mlinearF = glm(wing2body ~ month_of_year, data=dfF, family=gaussian)#
mlinearM = glm(wing2body ~ month_of_year, data=dfM, family=gaussian)#
#
summary(mlinear)$coeff[[8]] # significant for all (but only with K.elegans)#
summary(mlinearF)$coeff # not significant for females (or when split by host plant)#
summary(mlinearM)$coeff # significant for males (for K.elegans, not for C.corindum)
head(df)
df
dfF
dfM
summary(mlinear)$coeff[[8]] # significant for all (but only with K.elegans)#
summary(mlinearF)$coeff # not significant for females (or when split by host plant)#
summary(mlinearM)$coeff # significant for males (for K.elegans, not for C.corindum)
summary(mlinear)
summary(mlinearF)
w_morph_summary<-aggregate(wing_morph_binom~sex*pophost*month_of_year, data=raw_data, FUN=mean)#
w_morph_summary$se<-aggregate(wing_morph_binom~sex*pophost*month_of_year, data=raw_data, FUN=SE)$wing_morph_binom#
#
#jitter slightly#
jitter = runif(n=nrow(w_morph_summary), min=-0.5, max=0.5)#
w_morph_summary$dates <- w_morph_summary$month_of_year + jitter#
#
# create groups#
dd = w_morph_summary#
#
dd$pophost[dd$pophost=="C.corindum"]<-"C. corindum"#
dd$pophost[dd$pophost=="K.elegans"]<-"K. elegans"#
dd$pophost = factor(dd$pophost, levels = c("K. elegans", "C. corindum") )#
#
dd$`Host Plant` = dd$pophost#
#
dd$sex[dd$sex=="F"]<-"Females"#
dd$sex[dd$sex=="M"]<-"Males"#
dd$sex = factor(dd$sex, levels = c("Males", "Females") )#
dd$`Sex` = dd$sex #
#
dfF = dd[dd$sex=="Females",]#
dfM = dd[dd$sex=="Males",]
w_morph_summary<-aggregate(wing_morph_binom~sex*pophost*month_of_year, data=raw_data, FUN=mean)#
w_morph_summary$se<-aggregate(wing_morph_binom~sex*pophost*month_of_year, data=raw_data, FUN=SE)$wing_morph_binom#
#
#jitter slightly#
jitter = runif(n=nrow(w_morph_summary), min=-0.5, max=0.5)#
w_morph_summary$dates <- w_morph_summary$month_of_year + jitter#
#
# create groups#
dd = w_morph_summary#
#
dd$pophost[dd$pophost=="C.corindum"]<-"C. corindum"#
dd$pophost[dd$pophost=="K.elegans"]<-"K. elegans"#
dd$pophost = factor(dd$pophost, levels = c("K. elegans", "C. corindum") )#
#
dd$`Host Plant` = dd$pophost#
#
dd$sex[dd$sex=="F"]<-"Females"#
dd$sex[dd$sex=="M"]<-"Males"#
dd$sex = factor(dd$sex, levels = c("Males", "Females") )#
dd$`Sex` = dd$sex #
#
dfF = dd[dd$sex=="Females",]#
dfM = dd[dd$sex=="Males",]
p7 = ggplot() + #
  ggtitle("Females") + xlab("Month") + ylab("Long-Wing Morph Frequency") +#
  geom_vline(xintercept = xlab_dates, color="gainsboro") + #
  geom_smooth(data=dfF, method="lm", se=FALSE, linetype = "dashed", lwd=0.5,#
              mapping = aes(x = month_of_year, y = wing_morph_binom, colour = `Host Plant`)) +#
  geom_smooth(data=dfF, method="loess", #
              mapping = aes(x = month_of_year, y = wing_morph_binom, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=dfF, mapping = aes(x = month_of_year, y = wing_morph_binom, colour=`Host Plant`)) +#
  customPlot + #
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green")) +#
  scale_x_continuous(breaks=xlab_months, labels= month_labs) +#
  ylim(-0.75,2.25)#
#
p8 = ggplot() + #
  ggtitle("Males") + xlab("Month") + ylab("Long-Wing Morph Frequency") +#
  geom_vline(xintercept = xlab_dates, color="gainsboro") + #
  geom_smooth(data=dfM, method="lm", se=FALSE, linetype = "dashed", lwd=0.5,#
              mapping = aes(x = month_of_year, y = wing_morph_binom, colour = `Host Plant`)) +#
  geom_smooth(data=dfM, method="loess", #
              mapping = aes(x = month_of_year, y = wing_morph_binom, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=dfM, mapping = aes(x = month_of_year, y = wing_morph_binom, colour=`Host Plant`)) +#
  customPlot + #
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green")) +#
  scale_x_continuous(breaks=xlab_months, labels= month_labs) +#
  ylim(-0.75,2.25)#
#
grid.arrange(p7,p8, ncol=2)
extrafigure = grid.arrange(p3,p4,p7,p8, ncol=2)#
ggsave("extra_figure.pdf", plot=extrafigure)
extrafigure = grid.arrange(p3,p4,p7,p8, ncol=2)#
ggsave("extra_figure.pdf", plot=extrafigure)
?binom
extrafigure = grid.arrange(p3,p4,p7,p8, ncol=2)#
ggsave("extra_figure.pdf", plot=extrafigure)
customPlot = list( theme_classic(),#
                   theme(axis.text=element_text(size=13),#
                      axis.title=element_text(size=16), #
                      plot.title=element_text(size=20),),#
                   theme(legend.position = c(0.23, 0.95)),#
                   theme(legend.title = element_text(size=14, face="italic"), #element_text(size = 14),#
                         legend.text = element_text(size = 13, face="italic"))#
                   )
p9 = ggplot() + #
  ggtitle("A") + xlab("Month") + ylab("Long-Wing Morph Frequency") +#
  geom_vline(xintercept = xlab_dates, color="gainsboro") + #
  geom_smooth(data=dd, method="lm", se=FALSE, linetype = "dashed", lwd=0.5,#
              mapping = aes(x = month_of_year, y = wing_morph_binom), colour="black") +#
  geom_smooth(data=dd, method="loess", #
              mapping = aes(x = month_of_year, y = wing_morph_binom, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=dd, mapping = aes(x = month_of_year, y = wing_morph_binom, colour=`Host Plant`)) +#
  customPlot + #
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green")) +#
  scale_x_continuous(breaks=xlab_months, labels= month_labs) + ylim(0.3,1.2)#
#
p10 = ggplot() + #
  ggtitle("B") + xlab("Month") + ylab("Long-Wing Morph Frequency") +#
  geom_vline(xintercept = xlab_dates, color="gainsboro") + #
  geom_smooth(data=dd, method="lm", se=FALSE, linetype = "dashed", lwd=0.5,#
              mapping = aes(x = month_of_year, y = wing_morph_binom), colour="black") +#
  geom_smooth(data=dd, method="loess", #
              mapping = aes(x = month_of_year, y = wing_morph_binom, colour=Sex, fill=Sex)) + #
  geom_point(data=dd, mapping = aes(x = month_of_year, y = wing_morph_binom, colour=Sex)) +#
  customPlot + #
  scale_color_manual(values=c("Females" = "brown3", "Males" = "black")) +#
  scale_fill_manual(values = c("Females" = "brown1", "Males" = "sienna4")) +#
  scale_x_continuous(breaks=xlab_months, labels= month_labs) + theme(axis.title.y = element_blank()) + ylim(0.3,1.2)#
#
# extract the LOESS#
alpha = paste("alpha[loess]==", ggplot_build(p9)$data[[2]]$alpha[1])#
degree="lambda[loess]==0"#
#
mlinear = glm(wing_morph_binom ~ month_of_year, data=dd, family=gaussian)#
round(summary(mlinear)$coeff[[8]],3) # significant for all (but only with K.elegans)#
pvalue = paste0("italic(p)[glm]==",round(summary(mlinear)$coeff[[8]],2))#
#
p9 = p9 + annotate(geom="text", x=7.4, y=1.0, label=alpha, color="black", parse=TRUE) +#
          annotate(geom="text", x=7.4, y=1.04, label=degree, color="black", parse=TRUE) +#
          annotate(geom="text", x=5, y=0.718, label=pvalue, color="black", parse=TRUE)#
#
p10 = p10 + annotate(geom="text", x=7.4, y=1.1, label=alpha, color="black", parse=TRUE) +#
          annotate(geom="text", x=7.4, y=1.15, label=degree, color="black",parse=TRUE) +#
          annotate(geom="text", x=5, y=1, label=pvalue, color="black", parse=TRUE)#
#
grid.arrange(p9,p10, ncol=2)
dd
p1 = ggplot() + #
  ggtitle("Females") + xlab("Year") + ylab("Wing-to-Body Ratio") +                          # title and labels#
  geom_vline(xintercept = xlab_years, color="gainsboro") +                                  # add grey lines for the each collection date#
  geom_smooth(data=dfF, method="glm", se=FALSE, linetype = "dashed",                        # GLM regression and pvalue#
              mapping = aes(x = dates, y = wing2body), colour="black", lwd=0.5) + #
  geom_smooth(data=dfF, method="loess",                                                     # LOESS regression#
              mapping = aes(x = dates, y = wing2body, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=dfF, mapping = aes(x = dates, y = wing2body, colour=`Host Plant`)) +   # data points and yaxis value range#
  ylim(0.70, 0.76) +#
  customPlot +#
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green"))
p1
w_morph_summary<-aggregate(wing_morph_binom~sex*pophost*month_of_year, data=raw_data, FUN=mean)#
w_morph_summary$se<-aggregate(wing_morph_binom~sex*pophost*month_of_year, data=raw_data, FUN=SE)$wing_morph_binom#
#
#jitter slightly#
jitter = runif(n=nrow(w_morph_summary), min=-0.5, max=0.5)#
w_morph_summary$dates <- w_morph_summary$month_of_year + jitter#
#
# create groups#
dd = w_morph_summary#
#
dd$pophost[dd$pophost=="C.corindum"]<-"C. corindum"#
dd$pophost[dd$pophost=="K.elegans"]<-"K. elegans"#
dd$pophost = factor(dd$pophost, levels = c("K. elegans", "C. corindum") )#
#
dd$`Host Plant` = dd$pophost#
#
dd$sex[dd$sex=="F"]<-"Females"#
dd$sex[dd$sex=="M"]<-"Males"#
dd$sex = factor(dd$sex, levels = c("Males", "Females") )#
dd$`Sex` = dd$sex #
#
dfF = dd[dd$sex=="Females",]#
dfM = dd[dd$sex=="Males",]#
## ----fig.width=4.7, fig.height=2.3----------------------------------------------------------------------------------------#
###MLC NOTES: UNSURE#
###MLC: Something is going wrong here calculating variance for a binomial response - a frequency or probability plot should have a y-axis with a strict minimum of 0 and maximum of 1, but that is not happening with the variance plotted here. So, the estimated variance is probably not accurate, and the expanded y-axis range makes it difficult to see changes that might be visible along the month axis. I have historically used binom.confint() in the binom() library to calculate binomial confidence intervals; I don't know what the smoothing options are, but I do think we need a different function for this one. In principal, I like this idea.#
#
p7 = ggplot() + #
  ggtitle("Females") + xlab("Month") + ylab("Long-Wing Morph Frequency") +#
  geom_vline(xintercept = xlab_dates, color="gainsboro") + #
  geom_smooth(data=dfF, method="lm", se=FALSE, linetype = "dashed", lwd=0.5,#
              mapping = aes(x = month_of_year, y = wing_morph_binom, colour = `Host Plant`)) +#
  geom_smooth(data=dfF, method="loess", #
              mapping = aes(x = month_of_year, y = wing_morph_binom, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=dfF, mapping = aes(x = month_of_year, y = wing_morph_binom, colour=`Host Plant`)) +#
  customPlot + #
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green")) +#
  scale_x_continuous(breaks=xlab_months, labels= month_labs) +#
  ylim(-0.75,2.25)
p7
p7 = ggplot() + #
  ggtitle("Females") + xlab("Month") + ylab("Long-Wing Morph Frequency") +#
  geom_vline(xintercept = xlab_dates, color="gainsboro") + #
  geom_smooth(data=dfF, method="lm", se=FALSE, linetype = "dashed", lwd=0.5,#
              mapping = aes(x = month_of_year, y = wing_morph_binom, colour = `Host Plant`)) +#
  #geom_smooth(data=dfF, method="loess", #
  #            mapping = aes(x = month_of_year, y = wing_morph_binom, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=dfF, mapping = aes(x = month_of_year, y = wing_morph_binom, colour=`Host Plant`)) +#
  customPlot + #
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green")) +#
  scale_x_continuous(breaks=xlab_months, labels= month_labs) +#
  ylim(-0.75,2.25)
p7
p7 = ggplot() + #
  ggtitle("Females") + xlab("Month") + ylab("Long-Wing Morph Frequency") +#
  geom_vline(xintercept = xlab_dates, color="gainsboro") + #
  geom_smooth(data=dfF, method="lm", se=FALSE, linetype = "dashed", lwd=0.5,#
              mapping = aes(x = month_of_year, y = wing_morph_binom, colour = `Host Plant`)) +#
  geom_smooth(data=raw_data[raw_data$sex=="F",], method="loess", #
              mapping = aes(x = month_of_year, y = wing_morph_binom, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=dfF, mapping = aes(x = month_of_year, y = wing_morph_binom, colour=`Host Plant`)) +#
  customPlot + #
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green")) +#
  scale_x_continuous(breaks=xlab_months, labels= month_labs) +#
  ylim(-0.75,2.25)
p7
dfF
p7 = ggplot() + #
  ggtitle("Females") + xlab("Month") + ylab("Long-Wing Morph Frequency") +#
  geom_vline(xintercept = xlab_dates, color="gainsboro") + #
  geom_smooth(data=dfF, method="lm", se=FALSE, linetype = "dashed", lwd=0.5,#
              mapping = aes(x = month_of_year, y = wing_morph_binom, colour = `Host Plant`)) +#
  geom_smooth(data=raw_data[raw_data$sex=="F",], method="loess", #
              mapping = aes(x = month_of_year, y = wing_morph_binom, colour=pophost, fill=pophost)) + #
  geom_point(data=dfF, mapping = aes(x = month_of_year, y = wing_morph_binom, colour=`Host Plant`)) +#
  customPlot + #
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green")) +#
  scale_x_continuous(breaks=xlab_months, labels= month_labs) +#
  ylim(-0.75,2.25)
p7
head(raw_data)
dfF
rm(list=ls())#
library(ggformula)#
library(splines)#
library(gridExtra) #grid.arrange()#
library(ggpmisc) #stat_fit_glance#
library(cowplot)#
#
###MLC: needed to reset wd#
dir = "~/Documents/Florida soapberry project/2019 Dispersal/SBB-dispersal git/avbernat_working_on/"#
setwd(dir)#
#
knitr::opts_chunk$set(echo = TRUE)#
## -------------------------------------------------------------------------------------------------------------------------#
###MLC NOTES: KEEP#
source_path = "~/Documents/Florida soapberry project/2019 Dispersal/SBB-dispersal git/avbernat_working_on/Rsrc/"#
#
script_names = c("compare_models.R","regression_output.R", "clean_morph_data2.R", "AICprobabilities.R")#
#
for (script in script_names) { #
  path = paste0(source_path, script)#
  source(path) #
}#
## ----warning=FALSE--------------------------------------------------------------------------------------------------------#
###MLC NOTES: KEEP#
data_list <- read_morph_data("All_morphology/stats/data/allmorphology05.10.21-coors.csv")#
raw_data = data_list[[1]]#
data_long = data_list[[2]]#
all_bugs = nrow(data_long)#
#
data_long = remove_torn_wings(data_long)#
## -------------------------------------------------------------------------------------------------------------------------#
###MLC NOTES: I am not sure which figures these initial sections are needed for; I'm going to comment on what figures I think should go in the paper in some form, then should keep only the chunks up here that are necessary for those.#
#
SE = function(x){sd(x)/sqrt(length(x))}#
w2b_summary<-aggregate(wing2body~sex*pophost*dates, data=data_long, FUN=mean)#
w2b_summary$se<-aggregate(wing2body~sex*pophost*dates, data=data_long,#
                          FUN=SE)$wing2body#
#
#jitter slightly#
jitter = runif(n=nrow(w2b_summary), min=-0.5, max=0.5)#
w2b_summary$dates <- w2b_summary$dates + jitter#
## -------------------------------------------------------------------------------------------------------------------------#
###MLC NOTES: CUT#
#
# check for residuals for loess#
l1 = lowess(w2b_summary$dates, w2b_summary$wing2body, f=0.4)#
plot(w2b_summary$dates, w2b_summary$wing2body)#
lines(l1, type = "l")#
#
plot_lowess_residuals = function(lfit, x, y) {#
  lfun <- approxfun(lfit)#
  fitted <- lfun(x)#
  resid <- y-fitted#
  plot(fitted,resid)#
  abline(h=0,col=8)#
}#
#
plot_lowess_residuals(l1, w2b_summary$dates, w2b_summary$wing2body)#
## -------------------------------------------------------------------------------------------------------------------------#
###MLC NOTES: KEEP? Not sure yet what needs these#
d = w2b_summary#
#
# general plotting features#
xlab_years = na.omit(sort(unique(data_long$dates))[-2])#
host_colors_shade = c("turquoise3", "green")#
host_colors_pts = c("turquoise3", "springgreen4")#
#
# date plotting features#
threshold = unique(d$dates)[10]#
d$date_b = "2013-2014"#
d$date_b[d$dates >= threshold] = "2015-2020"#
#
d$date_b = as.factor(d$date_b)#
#
w2b_table<-aggregate(wing2body~dates, data=data_long, FUN=mean)#
w2b_table$date_b = "2013-2014"#
w2b_table$date_b[w2b_table$dates >= threshold] = "2015-2020"#
w2b_table$date_b = as.factor(w2b_table$date_b)#
#
last_n_years = w2b_table[w2b_table$date_b=="2015-2020",]#
last_n_years#
## -------------------------------------------------------------------------------------------------------------------------#
###MLC NOTES: KEEP? Not sure yet which figures need these#
dfF = d[d$sex=="F",]#
dfM = d[d$sex=="M",]#
#
dfF$pophost[dfF$pophost=="C.corindum"]<-"C. corindum"#
dfF$pophost[dfF$pophost=="K.elegans"]<-"K. elegans"#
dfM$pophost[dfM$pophost=="C.corindum"]<-"C. corindum"#
dfM$pophost[dfM$pophost=="K.elegans"]<-"K. elegans"#
#
dfF$pophost = factor(dfF$pophost, levels = c("K. elegans", "C. corindum") )#
dfF$`Host Plant` = dfF$pophost#
dfM$pophost = factor(dfM$pophost, levels = c("K. elegans", "C. corindum") )#
dfM$`Host Plant` = dfM$pophost#
## ----fig.width=4.7, fig.height=2.15---------------------------------------------------------------------------------------#
###MLC NOTES: CUT; this is a really nice figure, but ultimately I don't think the result is central/interesting enough to warrant a figure (e.g., wing2body ratio does not change detectably over time) #
#
p0 = ggplot() + #
  ggtitle("C") + xlab("Year") + ylab("Wing-to-Body Ratio") +#
  geom_vline(xintercept = xlab_years, color="gainsboro") + #
   geom_smooth(data=w2b_table, method="lm", se=FALSE, linetype = "dashed",#
              mapping = aes(x = dates, y = wing2body), colour="black", lwd=0.5) +#
  geom_smooth(data=w2b_table, method="loess", #
              mapping = aes(x = dates, y = wing2body), colour="black") + #
  geom_point(data=w2b_table, mapping = aes(x = dates, y = wing2body)) +#
  ylim(0.71, 0.75) +#
  stat_smooth(data=last_n_years, mapping = aes(x = dates, y = wing2body), method = "lm", formula = y ~ x, se = FALSE,#
               colour="blue") # linetype = "longdash",#
#
p0 = p0 + guides(fill = guide_legend(reverse = TRUE)) + theme_classic() +#
  theme(axis.text=element_text(size=13),#
        axis.title=element_text(size=16), #
        plot.title=element_text(size=20)) + guides(color = FALSE)  + scale_linetype(guide = FALSE) +#
  theme(legend.key = element_rect(fill = "white", color = NA), #
        legend.key.size = unit(0.5, "cm"),#
        legend.key.width = unit(0.5,"cm")) + #
  scale_fill_manual(values = "blue", labels=c("C. corindum", "K. elegans")) + #
  labs(fill = "Host Plant") + theme(legend.title = element_text(size = 14),#
                                    legend.text = element_text(size = 13, face="italic")) +#
  scale_color_manual(values="blue") + theme(legend.position = c(0.2, 0.88)) + theme(legend.title = element_blank())#
#
# loess #
alpha = paste("alpha[loess]==", ggplot_build(p0)$data[[2]]$alpha[1])#
degree="lambda[loess]==0"#
mlinear = glm(wing2body ~ dates, data=d, family=gaussian)#
pvalue = paste0("italic(p)[glm]==",round(summary(mlinear)$coeff[[8]],2))#
#
p0 = p0 + annotate(geom="text", x=unique(d$dates)[10], y=0.74, label=alpha, color="black", parse=TRUE, size=6) +#
          annotate(geom="text", x=unique(d$dates)[10], y=0.748, label=degree, color="black",parse=TRUE, size=6) +#
          annotate(geom="text", x=unique(d$dates)[15], y=0.718, label=pvalue, color="black", parse=TRUE, size=6)#
#
# last 5 years#
mllinear = glm(wing2body ~ dates, data=w2b_table[w2b_table$date_b=="2015-2020",], family=gaussian)#
pval = paste0("italic(p)[glm]==",round(summary(mllinear)$coeff[[8]],2))#
summary(mllinear)#
#
p0 = p0 + annotate(geom="text", x=unique(d$dates)[24], y=0.743, label=pval, color="blue", parse=TRUE, size=6)#
p0
w2b_table
w2b_summary<-aggregate(wing2body~sex*pophost*month_of_year, data=data_long, FUN=mean)#
df = w2b_summary#
#
xlab_dates = na.omit(sort(unique(data_long$month_of_year)))#
xlab_months = xlab_dates[c(-2,-5)]#
month_labs <- c("Feb", "May", "Aug", "Oct", "Dec")#
#
sex_colors_shade = c("brown1", "sienna4")#
sex_colors_pts = c("brown1", "grey27")#
## -------------------------------------------------------------------------------------------------------------------------#
###MLC NOTES: KEEP? Not sure yet which figures need these#
df$pophost[df$pophost=="C.corindum"]<-"C. corindum"#
df$pophost[df$pophost=="K.elegans"]<-"K. elegans"#
df$pophost = factor(df$pophost, levels = c("K. elegans", "C. corindum") )#
#
df$`Host Plant` = df$pophost#
#
df$sex[df$sex=="F"]<-"Females"#
df$sex[df$sex=="M"]<-"Males"#
df$sex = factor(df$sex, levels = c("Males", "Females") )#
df$`Sex` = df$sex
customPlot = list( theme_classic(),#
                   theme(axis.text=element_text(size=13),#
                      axis.title=element_text(size=16), #
                      plot.title=element_text(size=20),),#
                   theme(legend.position = c(0.2, 0.9)),#
                   theme(legend.title = element_text(size=14, face="italic"), #element_text(size = 14),#
                         legend.text = element_text(size = 13, face="italic"))#
                   )
p1 = ggplot() + #
  ggtitle("Females") + xlab("Year") + ylab("Wing-to-Body Ratio") +                          # title and labels#
  geom_vline(xintercept = xlab_years, color="gainsboro") +                                  # add grey lines for the each collection date#
  geom_smooth(data=dfF, method="glm", se=FALSE, linetype = "dashed",                        # GLM regression and pvalue#
              mapping = aes(x = dates, y = wing2body), colour="black", lwd=0.5) + #
  geom_smooth(data=dfF, method="loess",                                                     # LOESS regression#
              mapping = aes(x = dates, y = wing2body, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=dfF, mapping = aes(x = dates, y = wing2body, colour=`Host Plant`)) +   # data points and yaxis value range#
  ylim(0.70, 0.76) +#
  customPlot +#
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green"))
p1
dfF
p1 = ggplot() + #
  ggtitle("Females") + xlab("Year") + ylab("Wing-to-Body Ratio") +                          # title and labels#
  geom_vline(xintercept = xlab_years, color="gainsboro") +                                  # add grey lines for the each collection date#
  geom_smooth(data=dfF, method="glm", se=FALSE, linetype = "dashed",                        # GLM regression and pvalue#
              mapping = aes(x = dates, y = wing2body), colour="black", lwd=0.5) + #
  #geom_smooth(data=dfF, method="loess",                                                     # LOESS regression#
  #            mapping = aes(x = dates, y = wing2body, colour=`Host Plant`, fill=`Host Plant`)) + #
  geom_point(data=dfF, mapping = aes(x = dates, y = wing2body, colour=`Host Plant`)) +   # data points and yaxis value range#
  ylim(0.70, 0.76) +#
  customPlot +#
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green"))#
p1
p1 = ggplot() + #
  ggtitle("Females") + xlab("Year") + ylab("Wing-to-Body Ratio") +                          # title and labels#
  geom_vline(xintercept = xlab_years, color="gainsboro") +                                  # add grey lines for the each collection date#
  geom_smooth(data=dfF, method="glm", se=FALSE, linetype = "dashed",                        # GLM regression and pvalue#
              mapping = aes(x = dates, y = wing2body), colour="black", lwd=0.5) + #
  geom_smooth(data=dfF, method="loess",                                                     # LOESS regression#
              mapping = aes(x = dates, y = wing2body, colour=pophost, fill=pophost)) + #
  geom_point(data=dfF, mapping = aes(x = dates, y = wing2body, colour=`Host Plant`)) +   # data points and yaxis value range#
  ylim(0.70, 0.76) +#
  customPlot +#
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green"))#
p1
p1 = ggplot() + #
  ggtitle("Females") + xlab("Year") + ylab("Wing-to-Body Ratio") +                          # title and labels#
  geom_vline(xintercept = xlab_years, color="gainsboro") +                                  # add grey lines for the each collection date#
  geom_smooth(data=dfF, method="glm", se=FALSE, linetype = "dashed",                        # GLM regression and pvalue#
              mapping = aes(x = dates, y = wing2body), colour="black", lwd=0.5) + #
  geom_smooth(data=raw_data[raw_data$sex=="F",], method="loess",                                                     # LOESS regression#
              mapping = aes(x = dates, y = wing2body, colour=pophost, fill=pophost)) + #
  geom_point(data=dfF, mapping = aes(x = dates, y = wing2body, colour=`Host Plant`)) +   # data points and yaxis value range#
  ylim(0.70, 0.76) +#
  customPlot +#
  scale_color_manual(values=c("C. corindum" = "turquoise3", "K. elegans" = "springgreen4")) +#
  scale_fill_manual(values = c("C. corindum" = "turquoise3", "K. elegans" = "green"))#
p1
mloess <- loess(wing2body ~ month_of_year, data=dfF, degree=0)#
# Using a zero degree polynomial turns LOESS into a weighted moving average. #
xrange <- range(dfF$month_of_year)#
xseq <- seq(from=xrange[1], to=xrange[2], length=80)#
pred <- predict(mloess, newdata = data.frame(month_of_year = xseq), se=TRUE)#
y = pred$fit#
ci <- pred$se.fit * qt(0.95 / 2 + .5, pred$df)#
ymin = y - ci#
ymax = y + ci#
loess.DF <- data.frame(x = xseq, y, ymin, ymax, se = pred$se.fit)#
head(loess.DF)#
summary(loess.DF)#
summary(mloess)
