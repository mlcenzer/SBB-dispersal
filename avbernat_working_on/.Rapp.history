sample_test(100)#
boxplot(Results$Resp~Results$Trt)
sample_test<-function(s_size){#
Results<-data.frame(Trt=rep(c('A', 'B'), times=1, each=s_size), Resp=c(rnorm(s_size, 5, 1), rnorm(s_size,3,1)))#
Results#
}#
#
output<-sample_test(100)#
boxplot(output$Resp~output$Trt)
output<-sample_test(10)#
boxplot(output$Resp~output$Trt)
output<-sample_test(1000)#
boxplot(output$Resp~output$Trt)
output<-sample_test(2)#
boxplot(output$Resp~output$Trt)
output<-sample_test(5)#
boxplot(output$Resp~output$Trt)
output<-sample_test(5)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
output<-sample_test(10)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
output<-sample_test(100)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
?boxplot
sample_test<-function(s_size, sd){#
Results<-data.frame(Trt=rep(c('A', 'B'), times=1, each=s_size), Resp=c(rnorm(s_size, 5, sd), rnorm(s_size,3,sd)))#
Results#
}#
#
output<-sample_test(s_size=100, sd=2)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
output<-sample_test(s_size=1000, sd=2)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim#
#
#Run it for different sample si
output<-sample_test(s_size=100, sd=2)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
output<-sample_test(s_size=100, sd=1)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
plot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
10.49+29.33+18.60+15.55+19.95+5.69+6.39+7.16
113.16/2
348.69/4
150/5
14+33+18+18+22
21+15+32+13+25+16+33
155+15
170-105
155/7
2046/15
136/4
30*15
30*15*4.5
100000/12
3/8
47.71/2
60*1.75
500/20
52*5
260/25
200/8
exp^2
exp^(1/2)
e^(1/2)
exp
exp(1/2)
exp(-1/2)
exp(-1/2)+e(-0.08^2/2*(0.1^2))
exp(-1/2)+exp(-0.08^2/2*(0.1^2))
exp(-1/2)+exp((-0.08^2)/2*(0.1^2))
exp((-0.08^2)/2*(0.1^2))
exp((-0.05^2)/2*(0.1^2))
exp((-0.09^2)/2*(0.1^2))
exp((-0.1^2)/2*(0.1^2))
exp((-0.1^2)/(2*(0.1^2)))
exp((-0.08^2)/(2*(0.1^2)))
exp((-0.07^2)/(2*(0.1^2)))
exp((-0.01^2)/(2*(0.1^2)))
1-0.9*(4*0.1*0.9)^1
1-0.1*(4*0.1*0.9)^1
1-0.1*(4*0.2*0.9)^1
1-0.1*(4*0.3*0.9)^1
1-0.1*(4*0.4*0.9)^1
1-0.1*(4*0.2*0.8)^1
1-0.1*(4*0.3*0.7)^1
1-0.1*(4*0.4*0.6)^1
1-0.1*(4*0.4*0.6)^16
1-0.1*(4*0.5*0.5)^16
1-0.1*(4*0.3*0.7)^16
1-0.1*(4*0.3*0.7)^(1/16)
1/16
x=0.5#
#
survival<-function(x){#
	1-0.1*(4*x*(1-x))^(1/16)#
}
survival(x)
survival(0.6)
sapply(seq(0,1, by=0.1), survival)
plot(sapply(seq(0,1, by=0.1), survival))
survival<-function(x, B=1){#
	1-0.1*(4*x*(1-x))^B)#
}#
#
survival(0.6)#
plot(sapply(seq(0,1, by=0.1), survival))
survival<-function(x, B=1){#
	1-0.1*(4*x*(1-x))^B)#
}#
#
survival(0.6)
survival<-function(x, B=1){#
	1-0.1*(4*x*(1-x))^B#
}#
#
survival(0.6)
plot(sapply(seq(0,1, by=0.1), survival))
survival<-function(x, B=16){#
	1-0.1*(4*x*(1-x))^B#
}#
#
survival(0.6)#
plot(sapply(seq(0,1, by=0.1), survival))
279.93+17.54
(279.93+17.54)/2
69/12
(69/12)/2
29.79+15.75
sample(1:4, 4, replace=FALSE)
runif(1,min=0, max=1)
sample(1:4, 3, replace=FALSE)
87.65*2
110+8+29+16+17+44+75+2+8+59+29+66+38+40+25+13+220+29+12+29+50
5400/60
8*60
480/9
480/90
2.7*(480/90)
252+368.96
620.96-367.96
5000000/5000
25.40*8
14.86*2
22000/60000000
36000/328000000
686991/328000000
686991/3280000
36000/3280000
library(broom)
365*24*60*60
264/23
246/23
3090/39
28*(3090/39)
10/8
10000/50
200*1.25
2500/60
71/70
70*0.02
library(rethinking)
exp(-0.61)/(1+exp(-0.61))
686947/17953597
154793/4657693
93563/2707877
106713/5150000
120279/4485000
18.74*24
518.16/2
5833/3
6*6*6
216-148
216-144
518.16/2
472.81/2
472.81/2 - 115.20
9.53+6.05
15.58/2
exp(1062)
1/exp(1062)
5833.34*12
1875*12
1e4
1e5
23*60
0.382+0.33+0.35+0.414+0.274
0.382+0.33+0.35+0.414+0.274+0.246+0.369+0.32+0.257+0.388
0.382+0.33+0.35+0.414+0.274+0.246+0.369+0.32+0.257+0.388+0.357+0.339+0.354+0.311+0.331
0.382+0.33+0.35+0.414+0.274+0.246+0.369+0.32+0.257+0.388+0.357+0.339+0.354+0.311+0.331+0.336+0.318+0.293+0.273+0.274+0.363
0.382+0.33+0.35+0.414+0.274+0.246+0.369+0.32+0.257+0.388+0.357+0.339+0.354+0.311+0.331+0.336+0.318+0.293+0.273+0.274+0.363+0.313+0.283+0.272+0.317+0.294
0.382+0.33+0.35+0.414+0.274+0.246+0.369+0.32+0.257+0.388+0.357+0.339+0.354+0.311+0.331+0.336+0.318+0.293+0.273+0.274+0.363+0.313+0.283+0.272+0.317+0.294+0.293+0.325+0.32
diap_avg_8_stripe <- c(0.382, 0.33, 0.35, 0.414, 0.274, 0.246, 0.369, 0.32, 0.257, 0.388, 0.357, 0.339, 0.354, 0.311, 0.331, 0.336, 0.318, 0.293, 0.273, 0.274, 0.363, 0.313, 0.283, 0.272, 0.317, 0.294, 0.293, 0.325, 0.32)
mean(diap_avg_8_stripe)
sd(diap_avg_8_stripe)
sd(diap_avg_8_stripe)*qnorm(0.95)/length(diap_avg_8_stripe)
load('~/Dropbox/diapause_ibm/MC plotting/from server/summaries/diap_disp_ev_F_0.01_summary.Rdata')
diap_disp_ev_F_0.01_summary
(sd(diap_avg_8_stripe)*qnorm(0.975))/sqrt(length(diap_avg_8_stripe))
load('~/Dropbox/diapause_ibm/MC plotting/from server/summaries/diap_disp_ev_F_0.01_init_diap_0.90_summary.Rdata')
diap_disp_ev_F_0.01_init_diap_0.90_summary
load('~/Dropbox/diapause_ibm/MC plotting/from server/summaries/tau_change_disp_ev_F_0.01_init_diap_0.90_summary.Rdata')
tau_change_disp_ev_F_0.01_init_diap_0.90_summary
5833.34*12
466.68/5833.34
$340.81-48.17
340.81-48.17
(340.81-48.17)/2
(340.81-48.17-168.64)/2
1e5
1e2
1e3
33/30
1.1*50
25*5
25*5*12
33*5*12
12*30
12*30*5
14*30*5
load('~/Dropbox/diapause_ibm/model_output/one_rep.Rdata')
one.rep
415-87
425.87-21.11-86.93
16*0.8
16*0.08
10*0.05
12*0.05
84/1.5
34/1.5
278+7*26+25.75*12+25*12
278+7*26+25.75*12+25*12+250
## ----setup, include=FALSE-------------------------------------------------------------------------------------------------#
rm(list=ls())#
library(lme4)#
library(zoo)#
library(rethinking)#
#
library(lubridate)#
#
library(dplyr)#
library(ggplotify)#
library(gridExtra)#
library(ggformula)#
library(tidyselect)#
#
dir = "~/Documents/Florida soapberry projects/2019 Dispersal/SBB-dispersal git/avbernat_working_on/"#
setwd(dir)
dir = "~/Documents/Florida soapberry project/2019 Dispersal/SBB-dispersal git/avbernat_working_on/"#
setwd(dir)
knitr::opts_chunk$set(echo = TRUE)
source_path = "./Rsrc/"#
#
script_names = c("compare_models.R",#
                 "regression_output.R", #
                 "clean_morph_data2.R", # two functions: read_morph_data and remove_torn_wings#
                 "AICprobabilities.R")
for (script in script_names) { #
  path = paste0(source_path, script)#
  source(path) #
}
source("./RSsrc/spatial_dependencies.R") # space
source("./RSsrc/spatial_dependencies.R") # space
data_list <- read_morph_data("All_morphology/stats/data/allmorphology05.10.21-coors.csv")#
raw_data = data_list[[1]]#
data_long = data_list[[2]]
dotplot = function(var, data) {#
  plot(data[,var], seq(1:nrow(data)),#
       col=data$color, ylab="Order of the data from text file", xlab=paste0("Value of ", var))#
}
d = data_long %>%#
  filter(!is.na(wing2body))#
#
range(d$wing2body) # 0.5773723 0.8472103
MyVar <- c("wing2body", "wing2thorax", "body", "wing", "beak", "thorax", "lat", "long") #
d$color = "red"#
d$color[d$year == "2019" & d$month =="May"] = "black"#
#
par(mfrow=c(3,3))#
for (v in MyVar) {#
  dotplot(v, d)#
}
d2 = d %>% #
  filter(!beak<4.5) %>%#
  filter(!wing2body <0.62) #%>%#
  #filter(!body < 8) %>%#
  #filter(!wing2body > 0.79)#
#
d3 = remove_torn_wings(d2)#
#
par(mfrow=c(3,3))#
for (v in MyVar) {#
  dotplot(v, d3)#
}
raw_data_missing = raw_data %>%#
  filter(w_morph=="" | is.na(w_morph)) # had 30 that are hard to identify as either S or L based on the wing2thorax thresholds.#
raw_data_missing # need to determine the morph of these bugs manually. In the long term...need to do this manually because the boundaries of what is defined as a morph can change over time.
plot(d3$wing~d3$thorax)
plot(d3$wing~d3$thorax)
plot(log(d3$wing)~log(d3$thorax))
raw_data_missing = raw_data %>%#
  filter(w_morph=="" | is.na(w_morph)) # had 30 that are hard to identify as either S or L based on the wing2thorax thresholds.#
raw_data_missing
d3
cbind(d3$w_morph, d3$wing, d3$thorax)
cbind(d3$w_morph, d3$wing, d3$thorax, d3$body)
cbind(d3$w_morph, d3$wing, d3$thorax, d3$body, d3$wing2thorax)
5.52/2.5
plot(log(d3$wing)~log(d3$beak))
plot(log(d3$wing)~log(d3$thorax))
plot(log(d3$wing)~log(d3$body))
par(mfrow=c(3,1))#
hist(raw_data$wing[raw_data$w_morph=="L"]/raw_data$thorax[raw_data$w_morph=="L"],#
     main="Histogram of wing length/thorax length for long winged SBB",#
     xlab="wing length/thorax length",#
      breaks=seq(0.5, 3.8, by=0.05))#
hist(raw_data_missing$wing/raw_data_missing$thorax, #
      main="Histogram of wing length/thorax length for SBB w/o recorded wing morph",#
      xlab="wing length/thorax length",#
      breaks=seq(0.5, 3.8, by=0.05))#
hist(raw_data$wing[raw_data$w_morph=="S"]/raw_data$thorax[raw_data$w_morph=="S"],#
      main="Histogram of wing length/thorax length for short winged SBB",#
      xlab="wing length/thorax length",#
      breaks=seq(0.5,3.8,by=0.05))
et's take a look:#
raw_data_backup<-raw_data#
raw_data<-raw_data_backup[raw_data_backup$sex=="F",]
par(mfrow=c(3,1))#
hist(raw_data$wing[raw_data$w_morph=="L"]/raw_data$thorax[raw_data$w_morph=="L"],#
     main="Histogram of wing length/thorax length for long winged SBB",#
     xlab="wing length/thorax length",#
      breaks=seq(0.5, 3.8, by=0.05))#
hist(raw_data_missing$wing/raw_data_missing$thorax, #
      main="Histogram of wing length/thorax length for SBB w/o recorded wing morph",#
      xlab="wing length/thorax length",#
      breaks=seq(0.5, 3.8, by=0.05))#
hist(raw_data$wing[raw_data$w_morph=="S"]/raw_data$thorax[raw_data$w_morph=="S"],#
      main="Histogram of wing length/thorax length for short winged SBB",#
      xlab="wing length/thorax length",#
      breaks=seq(0.5,3.8,by=0.05))
0
''
raw_data_backup<-raw_data#
raw_data<-raw_data_backup[raw_data_backup$sex=="F",]#
#
## -------------------------------------------------------------------------------------------------------------------------#
par(mfrow=c(3,1))#
hist(raw_data$wing[raw_data$w_morph=="L"]/raw_data$thorax[raw_data$w_morph=="L"],#
     main="Histogram of wing length/thorax length for long winged SBB",#
     xlab="wing length/thorax length",#
      breaks=seq(0.5, 3.8, by=0.05))#
hist(raw_data_missing$wing/raw_data_missing$thorax, #
      main="Histogram of wing length/thorax length for SBB w/o recorded wing morph",#
      xlab="wing length/thorax length",#
      breaks=seq(0.5, 3.8, by=0.05))#
hist(raw_data$wing[raw_data$w_morph=="S"]/raw_data$thorax[raw_data$w_morph=="S"],#
      main="Histogram of wing length/thorax length for short winged SBB",#
      xlab="wing length/thorax length",#
      breaks=seq(0.5,3.8,by=0.05))
raw_data_backup<-raw_data#
raw_data<-raw_data_backup[raw_data_backup$sex=="M",]#
#
## -------------------------------------------------------------------------------------------------------------------------#
par(mfrow=c(3,1))#
hist(raw_data$wing[raw_data$w_morph=="L"]/raw_data$thorax[raw_data$w_morph=="L"],#
     main="Histogram of wing length/thorax length for long winged SBB",#
     xlab="wing length/thorax length",#
      breaks=seq(0.5, 3.8, by=0.05))#
hist(raw_data_missing$wing/raw_data_missing$thorax, #
      main="Histogram of wing length/thorax length for SBB w/o recorded wing morph",#
      xlab="wing length/thorax length",#
      breaks=seq(0.5, 3.8, by=0.05))#
hist(raw_data$wing[raw_data$w_morph=="S"]/raw_data$thorax[raw_data$w_morph=="S"],#
      main="Histogram of wing length/thorax length for short winged SBB",#
      xlab="wing length/thorax length",#
      breaks=seq(0.5,3.8,by=0.05))
## ----setup, include=FALSE-------------------------------------------------------------------------------------------------#
rm(list=ls())#
library(lme4)#
library(zoo)#
library(rethinking)#
#
library(lubridate)#
#
library(dplyr)#
library(ggplotify)#
library(gridExtra)#
library(ggformula)#
library(tidyselect)#
#
dir = "~/Documents/Florida soapberry project/2019 Dispersal/SBB-dispersal git/avbernat_working_on/"#
setwd(dir)#
#
knitr::opts_chunk$set(echo = TRUE)#
## -------------------------------------------------------------------------------------------------------------------------#
source_path = "./Rsrc/"#
#
script_names = c("compare_models.R",#
                 "regression_output.R", #
                 "clean_morph_data2.R", # two functions: read_morph_data and remove_torn_wings#
                 "AICprobabilities.R")#
#
for (script in script_names) { #
  path = paste0(source_path, script)#
  source(path) #
}#
#
source("./RSsrc/spatial_dependencies.R") # space#
## -------------------------------------------------------------------------------------------------------------------------#
data_list <- read_morph_data("All_morphology/stats/data/allmorphology05.10.21-coors.csv")#
raw_data = data_list[[1]]#
data_long = data_list[[2]]#
## -------------------------------------------------------------------------------------------------------------------------#
dotplot = function(var, data) {#
  plot(data[,var], seq(1:nrow(data)),#
       col=data$color, ylab="Order of the data from text file", xlab=paste0("Value of ", var))#
}#
## -------------------------------------------------------------------------------------------------------------------------#
# remove NA dates#
d = data_long %>%#
  filter(!is.na(wing2body))#
#
range(d$wing2body) # 0.5773723 0.8472103#
## -------------------------------------------------------------------------------------------------------------------------#
MyVar <- c("wing2body", "wing2thorax", "body", "wing", "beak", "thorax", "lat", "long") #
d$color = "red"#
d$color[d$year == "2019" & d$month =="May"] = "black"#
#
par(mfrow=c(3,3))#
for (v in MyVar) {#
  dotplot(v, d)#
}#
#
# remove outliers?#
d2 = d %>% #
  filter(!beak<4.5) %>%#
  filter(!wing2body <0.62) #%>%#
  #filter(!body < 8) %>%#
  #filter(!wing2body > 0.79)#
#
d3 = remove_torn_wings(d2)#
#
par(mfrow=c(3,3))#
for (v in MyVar) {#
  dotplot(v, d3)#
}#
#
plot(log(d3$wing)~log(d3$body))#
#
## -------------------------------------------------------------------------------------------------------------------------#
raw_data_missing = raw_data %>%#
  filter(w_morph=="" | is.na(w_morph)) # had 30 that are hard to identify as either S or L based on the wing2thorax thresholds.#
raw_data_missing # need to determine the morph of these bugs manually. In the long term...need to do this manually because the boundaries of what is defined as a morph can change over time.#
####MLC: I can see that there a few sneaking in here that are clearly short-winged, but were labelled long-winged in the file. Let's take a look:#
raw_data_backup<-raw_data
raw_data<-raw_data_backup[raw_data_backup$sex=="M",]#
#
## -------------------------------------------------------------------------------------------------------------------------#
par(mfrow=c(3,1))#
hist(raw_data$wing[raw_data$w_morph=="L"]/raw_data$thorax[raw_data$w_morph=="L"],#
     main="Histogram of wing length/thorax length for long winged SBB",#
     xlab="wing length/thorax length",#
      breaks=seq(0.5, 3.8, by=0.05))#
hist(raw_data_missing$wing/raw_data_missing$thorax, #
      main="Histogram of wing length/thorax length for SBB w/o recorded wing morph",#
      xlab="wing length/thorax length",#
      breaks=seq(0.5, 3.8, by=0.05))#
hist(raw_data$wing[raw_data$w_morph=="S"]/raw_data$thorax[raw_data$w_morph=="S"],#
      main="Histogram of wing length/thorax length for short winged SBB",#
      xlab="wing length/thorax length",#
      breaks=seq(0.5,3.8,by=0.05))
raw_data<-raw_data_backup
raw_data_problems<-raw_data[raw_data$w_morph=="L" & raw_data$wing2thorax<=2.2,]
raw_data_problems
raw_data$problems['wing2thorax',]
raw_data$problems[,'wing2thorax']
raw_data_problems['wing2thorax',]
raw_data_problems[,'wing2thorax']
raw_data_problems[,c('wing2thorax', 'thorax', 'wing', 'body')]
raw_data_too_long<-raw_data[raw_data$w_morph=="S" & raw_data$wing2thorax>=2.5,]
raw_data_too_long
raw_datatoo_long[,c('wing2thorax', 'thorax', 'wing', 'body')]
raw_data_too_long[,c('wing2thorax', 'thorax', 'wing', 'body')]
raw_data_too_long[,c('wing2thorax', 'thorax', 'wing', 'body', 'date')]
raw_data_too_long[,c('wing2thorax', 'beak','thorax', 'wing', 'body', 'date')]
group = raw_data %>% group_by(sex, #
                  datetime) %>% #
  summarize(count = n())
data = raw_data#
data$population[data$population=="Ft.Myers"]<-"Ft. Myers"#
data$population[data$population=="Key_Largo"]<-"Key Largo"#
data$population[data$population=="Lake_Placid"]<-"Lake Placid"#
data$population[data$population=="Lake_Wales"]<-"Lake Wales"#
data$population[data$population=="North_Key_Largo"]<-"North Key Largo"#
data$population[data$population=="Plantation_Key"]<-"Plantation Key"#
#
data$pophost[data$pophost=="C.corindum"]<-"C. corindum"#
data$pophost[data$pophost=="K.elegans"]<-"K. elegans"#
#
data = data[order(-data$lat),] #
#lat_order = unique(data$population) # should work but lat and long not right so need to do it manually:#
lat_order = c("Gainesville", "Leesburg", "Lake Wales", "Lake Placid", "Ft. Myers",  "Homestead",  "North Key Largo", "Key Largo", "Plantation Key")#
data$population = as.factor(data$population)#
data$population = factor(data$population,levels=lat_order)
colors = c("#787a87", "#E69F00", "#56B4E9",#
           "royalblue", "grey", "gold", #
           "#409973", "#9bc969", "ivory2") # the keys#
#
p = ggplot(data=subset(data, !is.na(datetime)), aes(x=datetime, fill=population)) + #
    geom_bar(position='stack', color="black", width=0.7) +#
    theme_bw() #+ geom_text(aes(label=), position=position_dodge(width=0.9), vjust=-0.25)#
p1 = p + labs(title=" ", fill="Population",#
         x="Field Collection Month", y = "Number of Bugs Collected")+#
   scale_fill_manual(values=colors) +#
   theme_classic() +theme(#
     axis.text.y = element_text(size=11),#
     axis.text.x=element_text(size=11, angle = 45, hjust = 1.1),#
        axis.title=element_text(size=17,face="bold"))  +#
theme(axis.title.x = element_text(vjust = -3)) +#
theme(axis.title.y = element_text(vjust = 4)) +#
  theme(plot.margin=unit(c(1,1,1.1,1.2),"cm"))#
#
p = ggplot(data=subset(data, !is.na(datetime)), aes(x=datetime, fill=pophost)) + #
    geom_bar(position='stack', color="black", width=0.7) +#
    theme_bw()#
p2 = p + labs(title=" ", fill="Host Plant",#
         x="Field Collection Month", y = "Number of Bugs Collected")+#
   scale_fill_manual(values=c("#56B4E9", "chartreuse4")) +#
   theme_classic() + theme(#
        axis.text.y = element_text(size=11),#
        axis.text.x=element_text(size=11, angle = 45, hjust = 1.1), # 9#
        axis.title=element_text(size=17,face="bold"))  +#
theme(axis.title.x = element_text(vjust = -3)) +#
theme(axis.title.y = element_text(vjust = 4)) +#
  theme(plot.margin=unit(c(1,1,1.1,1.2),"cm"))#
#
p = ggplot(data=subset(data, !is.na(datetime)), aes(x=datetime, fill=sex)) + #
    geom_bar(position='stack', color="black", width=0.7) +#
    theme_bw()#
p3 = p + labs(title=" ", fill="Sex",#
         x="Field Collection Month", y = "Number of Bugs Collected")+#
   scale_fill_manual(values=c("salmon1", "darkslategray3")) +#
   theme_classic() +theme(     #
        axis.text.y = element_text(size=11),#
        axis.text.x=element_text(size=11, angle = 45, hjust = 1.1), # 9#
        axis.title=element_text(size=17,face="bold"))  +#
theme(axis.title.x = element_text(vjust = -3)) +#
theme(axis.title.y = element_text(vjust = 4)) +#
  theme(plot.margin=unit(c(1,1,1.1,1.2),"cm"))
numF = paste0("F(", as.character(unlist(group[1:10,3])), ")")#
numM = paste0("M(", as.character(unlist(group[11:20,3])), ")")#
text = paste0(numF, "\n", numM)#
p1 + annotate(geom="text", x=1, y=400, label=text[1],#
              color="black", size=3) +#
  annotate(geom="text", x=2, y=470, label=text[2],#
              color="black", size=3) +#
  annotate(geom="text", x=3, y=270, label=text[3],#
              color="black", size=3) +#
  annotate(geom="text", x=4, y=220, label=text[4],#
              color="black", size=3) +#
  annotate(geom="text", x=5, y=320, label=text[5],#
              color="black", size=3) +#
  annotate(geom="text", x=6, y=500, label=text[6],#
              color="black", size=3) +#
  annotate(geom="text", x=7, y=240, label=text[7],#
              color="black", size=3) +#
  annotate(geom="text", x=8, y=730, label=paste0("\n", text[8]),#
              color="black", size=3) +#
  annotate(geom="text", x=9, y=440, label=text[9],#
              color="black", size=3) +#
  annotate(geom="text", x=10, y=650, label=text[10],#
              color="black", size=3)#
#
p2#
p3
m = glm(wing_morph_binom ~ months_since_start, data=raw_data, family="binomial")#
tidy_regression(m, is_color=FALSE)#
m = glm(wing_morph_binom ~ month_of_year, data=raw_data, family="binomial")#
tidy_regression(m, is_color=FALSE)
---------------------------------------#
nrow(data)
data<-data.frame(R=raw_data$wing_morph_binom, #
                 A=raw_data$sex_binom, #
                 B=raw_data$pophost_binom, #
                 C=(raw_data$month_of_year),#
                 D=raw_data$months_since_start)#
#
model_script = paste0(source_path,"generic models-binomial glm 3-FF.R")#
model_comparisonsAIC(model_script)
data<-data.frame(R=raw_data$wing_morph_binom, #
                 A=raw_data$sex_binom, #
                 B=raw_data$pophost_binom, #
                 C=(raw_data$month_of_year),#
                 D=raw_data$months_since_start)#
#
model_script = paste0(source_path,"generic models-binomial glm 3-FF.R")#
model_comparisonsAIC(model_script)
anova(m13, m15, test="Chisq") # Adding A*B marginally improves fit#
anova(m7, m13, test="Chisq") # Adding B*C marginally improves fit#
anova(m5, m7, test="Chisq")#
anova(m6, m7, test="Chisq")#
anova(m4, m7, test="Chisq")
m = glm(wing_morph_binom ~ sex_binom + pophost_binom + month_of_year, data=raw_data, family="binomial")
tidy_regression(m, is_color=FALSE) # m7#
summary(m)
head(data)
head(raw_data)
summary(m15)
temp = raw_data %>% #
  filter(!is.na(wing_morph_binom))#
#
check_spatial_dependencies(m, temp, temp$long, temp$lat, zone = 16, cutoff=14000, is_glm=TRUE)
?check_spatial_dependencies
??check_spatial_dependencies
## -------------------------------------------------------------------------------------------------------------------------#
m = glm(wing_morph_binom ~ months_since_start, data=raw_data, family="binomial")#
tidy_regression(m, is_color=FALSE)#
m = glm(wing_morph_binom ~ month_of_year, data=raw_data, family="binomial")#
tidy_regression(m, is_color=FALSE)
