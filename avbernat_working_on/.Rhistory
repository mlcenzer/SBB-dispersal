large = test %>%
filter(sex == "F", wing2body > 0.7184934)
srows = small$index
lrows = large$index
points(df$mass_per[lrows], pp[lrows,1], col="red", type="p", cex=c1, pch=16)
points(df$mass_per[srows], pp[srows,1], col="red", type="p", cex=c1)
# those with smaller wing2body ratio were more likely to NOT fly
points(df$mass_per[lrows], pp[lrows,2], col="blue", type="p", cex=c1, pch=16)
points(df$mass_per[srows], pp[srows,2], col="blue", type="p", cex=c1)
points(df$mass_per[lrows], pp[lrows,4], col="darkred", type="p", cex=c1, pch=16)
points(df$mass_per[srows], pp[srows,4], col="darkred", type="p", cex=c1)
}
}
pp6 = pp
df6 = df
plot5 = function(df, pp, PP, gradient=TRUE, circles=TRUE, stochasticity=TRUE, points=TRUE) {
c1 = 0.65
c2 = 1.2
if (stochasticity) {
plot(df$mass_per[Mrows], pp[Mrows,1], ylim=c(-0.00,0.8+0.05), xlim=c(-25,58), col="red",type="l",
ylab=" ", xlab="Percent Mass Change from T1 to T2 (%)",
lty=1, cex.axis=1.2, cex.lab=1.3)
points(df$mass_per[Mrows], pp[Mrows,2], col="blue", type="l", cex=0.45, lty=1)
points(df$mass_per[Mrows], pp[Mrows,3], col="darkgreen", type="l", cex=0.45, lty=1)
points(df$mass_per[Mrows], pp[Mrows,4], col="darkorange1", type="l", cex=0.45, lty=1) # darkred
}
if (points) {
plot(df$mass_per[Mrows], PP[Mrows,1], ylim=c(-0.00,0.8), xlim=c(-25,58), col="red",type="l",
ylab=" ", xlab="Percent Mass Change from T1 to T2 (%)",
lty=1, cex.axis=1.2, cex.lab=1.3)
points(df$mass_per[Mrows], PP[Mrows,2], col="blue", type="l", cex=0.45, lty=1)
points(df$mass_per[Mrows], PP[Mrows,3], col="darkgreen", type="l", cex=0.45, lty=1)
points(df$mass_per[Mrows], PP[Mrows,4], col="darkorange1", type="l", cex=0.45, lty=1) # darkred
}
mtext(expression(italic("Males")), side=3, adj=0.05, line=-2, cex=1.5, font=2)
mtext("C", side=3, adj=0.01, line=0.5, cex=1.5, font=2)
text(22,0.35, labels="Flew in T1 only", col="blue", cex=c2)
text(52,0.17, labels="Did Not Fly", col="red", cex=c2)
text(-16, 0, labels="Flew in T2 only", col="darkgreen", cex=c2)
text(-17,0.69, labels="Flew Twice", col="darkorange3", cex=c2) # 13,0.77, maroon, 13,0.77
if (circles) {
legend(39, .81+0.05,
pch=c(16,1),
title="Wing-to-body",
legend=c("> mean", "< mean"),
cex=1.1)
}
if (gradient) {
text(50,0.84, labels="Wing-to-body", cex=c2)
}
if (gradient) {
rbPal <- colorRampPalette(c('black','red'))
df$w2b_col <- rbPal(10)[as.numeric(cut(df$wing2body,breaks = 10))]
points(df$mass_per[Mrows], pp[Mrows, 1], pch=20, col=df$w2b_col[Mrows])
rbPal <- colorRampPalette(c('black','royalblue1'))
df$w2b_col <- rbPal(10)[as.numeric(cut(df$wing2body,breaks = 10))]
points(df$mass_per[Mrows], pp[Mrows, 2], pch=20, col=df$w2b_col[Mrows])
rbPal <- colorRampPalette(c('black','palegreen2'))
df$w2b_col <- rbPal(10)[as.numeric(cut(df$wing2body,breaks = 10))]
points(df$mass_per[Mrows], pp[Mrows, 3], pch=20, col=df$w2b_col[Mrows])
rbPal <- colorRampPalette(c('black','orange')) #violetred1
df$w2b_col <- rbPal(10)[as.numeric(cut(df$wing2body,breaks = 10))]
points(df$mass_per[Mrows], pp[Mrows, 4], pch=20, col=df$w2b_col[Mrows])
}
if (circles) {
# Mark points in the graph with high wing2body ratio vs. points with low wing2body ratio.
test <- df[with(df, order(wing2body)),] # ascending order
small = test %>%
filter(sex =="M", wing2body < 0.7184934)
large = test %>%
filter(sex == "M", wing2body > 0.7184934)
srows = small$index
lrows = large$index
points(df$mass_per[lrows], pp[lrows,1], col="red", type="p", cex=c1, pch=16)
points(df$mass_per[srows], pp[srows,1], col="red", type="p", cex=c1)
# those with smaller wing2body ratio were more likely to NOT fly
points(df$mass_per[lrows], pp[lrows,2], col="blue", type="p", cex=c1, pch=16)
points(df$mass_per[srows], pp[srows,2], col="blue", type="p", cex=c1)
points(df$mass_per[lrows], pp[lrows,3], col="darkgreen", type="p", cex=c1, pch=16)
points(df$mass_per[srows], pp[srows,3], col="darkgreen", type="p", cex=c1)
points(df$mass_per[lrows], pp[lrows,4], col="darkred", type="p", cex=c1, pch=16)
points(df$mass_per[srows], pp[srows,4], col="darkred", type="p", cex=c1)
}
}
# Function to plot color bar
color.bar <- function(lut, min, max=77, nticks=3, ticks=seq(min, max, len=nticks), title='') {
scale = (length(lut)-1)/(max-min)
final_ticks=seq(min/100, max/100, len=nticks)
#final_ticks = c("0.63", "0.66", "0.70", "0.74", "0.77")
final_ticks = c("0.63", "0.70", "0.77")
#dev.new(width=1.75, height=5)
plot(c(0,10), c(min,max), type='n', bty='n', xaxt='n', xlab='', yaxt='n', ylab='', main=title)
axis(2, ticks, las=1, labels=final_ticks)
for (i in 1:(length(lut)-1)) {
y = (i-1)/scale + min
rect(0,y,10,y+1/scale, col=lut[i], border=NA)
}
}
# getting those small subset plots and scales in the top right hand corner.
plot_histograms = function() {
x = 0.48
v <- c(x-0.13,x, 0.85, 0.90)
par( fig=v, new=TRUE, mar=c(0,0,0,0) )
hist(df$wing2body[Frows], col="white", main="", cex.axis=0.9)
text(0.64,45, labels="w2b", cex=0.9)
x = 0.88
v <- c(x-0.13, x, 0.85, 0.90)
par( fig=v, new=TRUE, mar=c(0,0,0,0) )
hist(df$wing2body[Mrows], col="white", main="", cex.axis=0.9, xlim=c(0.64,0.78))
text(0.66,40, labels="w2b", cex=0.9)
}
plot_color_scale = function() {
x = 0.98
v <- c(x-0.025, x, 0.75, 0.86)
par( fig=v, new=TRUE, mar=c(0,0,0,0) )
color.bar(colorRampPalette(c("black", "grey"))(1000), 63)
}
par(mfrow=c(1,2), tcl=-0.5) # length of tick marks set at default
par(mai=c(1,0.85,0.4,0)) # bottom, right, top, left
plot4(df6,pp6, pp3, gradient=TRUE, circles=FALSE, stochasticity=TRUE, points=FALSE)
par(mai=c(1,0.6,0.4,0.05))
plot5(df6,pp6, pp3, gradient=TRUE, circles=FALSE, stochasticity=TRUE, points=FALSE)
plot_histograms()
plot_color_scale()
data_fem = data_tested %>%
filter(sex=="F")
bar2 = function() {
# fig.height=2.4, fig.width=2.7
counts <- table(data_fem$eggs_b, data_fem$trial_type) # data_tested$flew_b
counts <- counts[1:2,2:3]
barplot(counts, #main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","darkgoldenrod2"),
legend = c("no eggs", "yes eggs"), ylim=c(0,110), beside=TRUE)
}
bar2()
data_fem = data_tested %>%
filter(sex=="F")
bar2 = function() {
# fig.height=2.4, fig.width=2.7
counts <- table(data_fem$eggs_b, data_fem$trial_type) # data_tested$flew_b
counts <- counts[1:2,2:3]
barplot(counts, #main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","darkgoldenrod2"),
legend = c("no eggs", "yes eggs"), ylim=c(0,110), beside=TRUE)
}
bar2()
data_fem = data_tested %>%
filter(sex=="F")
bar2 = function() {
# fig.height=2.4, fig.width=2.7
counts <- table(data_fem$eggs_b, data_fem$trial_type) # data_tested$flew_b
counts <- counts[1:2,2:3]
barplot(counts, #main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","darkgoldenrod2"),
legend = c("no eggs", "yes eggs"), ylim=c(0,110), beside=TRUE)
}
bar2()
# key = response in T2 - response in T1
Event = c("laid eggs in both trials", "laid eggs in T2 only", "laid eggs in neither trials", "laid eggs in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
# key = response in T2 - response in T1
Event = c("laid eggs in both trials", "laid eggs in T2 only", "laid eggs in neither trials", "laid eggs in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
df <- d %>%
filter(!is.na(egg_diff), !is.na(mass_diff), !is.na(flew_diff), sex_c == 1)
df <- df[with(df, order(mass_diff)),]
n_tfemales = nrow(df)
df$flight_case <- relevel(as.factor(df$flight_case), ref = "0")
par(mfrow=c(1,2))
data_fem = data_tested %>%
filter(sex=="F")
bar2 = function() {
counts <- table(data_fem$eggs_b, data_fem$trial_type) # data_tested$flew_b
counts <- counts[1:2,2:3]
barplot(counts, #main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","darkgoldenrod2"),
legend = c("no eggs", "yes eggs"), ylim=c(0,110), beside=TRUE)
}
bar2()
t = kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
t1 = kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
par(mfrow=c(1,2))
data_fem = data_tested %>%
filter(sex=="F")
bar2 = function() {
counts <- table(data_fem$eggs_b, data_fem$trial_type) # data_tested$flew_b
counts <- counts[1:2,2:3]
barplot(counts, #main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","darkgoldenrod2"),
legend = c("no eggs", "yes eggs"), ylim=c(0,110), beside=TRUE)
}
bar2()
t1
# key = response in T2 - response in T1
Event = c("laid eggs in both trials", "laid eggs in T2 only", "laid eggs in neither trials", "laid eggs in T1 only")
Encoding = c(2, 1,0,-1)
key = cbind(Event, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Delta Flight Response Key" = 2 ))
par(mfrow=c(1,2))
plot()
par(mfrow=c(1,2))
plot(n='')
par(mfrow=c(1,2))
plot(x='')
par(mfrow=c(1,2))
data_fem = data_tested %>%
filter(sex=="F")
bar2 = function() {
counts <- table(data_fem$eggs_b, data_fem$trial_type) # data_tested$flew_b
counts <- counts[1:2,2:3]
barplot(counts, #main="Flight Distribution by Trial",
xlab="Trial", col=c("lightblue","darkgoldenrod2"),
legend = c("no eggs", "yes eggs"), ylim=c(0,110), beside=TRUE)
}
bar2()
df$flight_case = droplevels(df$flight_case) # no female bug only flew in T2
null <- multinom(flight_case ~ 1, data = df)
# key
Host = c("Golden Rain Tree (GRT)", "Balloon Vine (BV)")
Encoding = c(1,-1)
key = cbind(Host, Encoding)
kable(key) %>%
kable_styling(bootstrap_options = "striped", "hover", full_width = F)  %>%
add_header_above(c("Host Plant Key" = 2 ))
Host = c("Golden Rain Tree (GRT)", "Balloon Vine (BV)")
Encoding = c(1,-1)
key = cbind(Host, Encoding)
kable(key)  %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))  %>%
kable_classic(html_font = "Cambria") %>%
add_header_above(c("Host Plant Key" = 2 ))
data <- data.frame(R = df$flight_case,
A = df$egg_case,
B = df$mass_diff,
C = df$host_c)
model_script = paste0(source_path,"generic multinomial models- multinom 1RF + 3 FF.R")
model_comparisonsAIC(model_script)
anova(m4, m7, test="Chisq") # Adding C does not improve fit
anova(m7, m13, test="Chisq") # Adding  mass_diff*host does not improve fit
anova(m4, m7, test="Chisq") # Adding C does not improve fit
anova(m7, m13, test="Chisq") # Adding  mass_diff*host does not improve fit
data <- data.frame(R = df$flight_case,
A = df$egg_case,
B = df$mass_per,
C = df$host_c)
model_script = paste0(source_path,"generic multinomial models- multinom 1RF + 3 FF.R")
model_comparisonsAIC(model_script)
anova(m4, m7, test="Chisq") # Adding C does not improve fit
anova(m7, m13, test="Chisq") # Adding  mass_diff*host does not improve fit
anova(m4, m7, test="Chisq") # Adding C does not improve fit
anova(m7, m13, test="Chisq") # Adding  mass_diff*host does not improve fit
anova(m4, m7, test="Chisq") # Adding C does not improve fit
anova(m7, m13, test="Chisq") # Adding  mass_diff*host does not improve fit
df <- d %>%
filter(!is.na(egg_diff), !is.na(mass_diff), !is.na(flew_diff), sex_c == 1)
df <- df[with(df, order(mass_per)),]
n_tfemales = nrow(df)
df$flight_case <- relevel(as.factor(df$flight_case), ref = "0")
df <- d %>%
filter(!is.na(egg_diff), !is.na(mass_diff), !is.na(flew_diff), sex_c == 1)
df <- df[with(df, order(mass_per)),]
n_tfemales = nrow(df)
df$flight_case <- relevel(as.factor(df$flight_case), ref = "0")
df <- d %>%
filter(!is.na(egg_diff), !is.na(mass_diff), !is.na(flew_diff), sex_c == 1)
df <- df[with(df, order(mass_per)),]
n_tfemales = nrow(df)
df$flight_case <- relevel(as.factor(df$flight_case), ref = "0")
df$flight_case = droplevels(df$flight_case) # no female bug only flew in T2
null <- multinom(flight_case ~ 1, data = df)
df$flight_case = droplevels(df$flight_case) # no female bug only flew in T2
null <- multinom(flight_case ~ 1, data = df)
data <- data.frame(R = df$flight_case,
A = df$egg_case,
B = df$mass_per,
C = df$host_c)
model_script = paste0(source_path,"generic multinomial models- multinom 1RF + 3 FF.R")
model_comparisonsAIC(model_script)
anova(m4, m7, test="Chisq") # Adding C does not improve fit
anova(m7, m13, test="Chisq") # Adding  mass_diff*host does not improve fit
M3 <- multinom(flight_case ~ mass_per + egg_case, data = df)
model_table = calculate_P2(M3, "mass_per", "egg_case")
M3 <- multinom(flight_case ~ mass_per + egg_case, data = df)
model_table = calculate_P2(M3, "mass_per", "egg_case")
M3 <- multinom(flight_case ~ mass_per + egg_case, data = df)
model_table = calculate_P2(M3, "mass_per", "egg_case")
M3 <- multinom(flight_case ~ mass_per + egg_case, data = df)
model_table = calculate_P2(M3, "mass_per", "egg_case")
M3 <- multinom(flight_case ~ mass_per + egg_case, data = df)
model_table = calculate_P2(M3, "mass_per", "egg_case")
M3 <- multinom(flight_case ~ mass_per + egg_case, data = df)
model_table = calculate_P2(M3, "mass_per", "egg_case")
run_multinom_model = function(d) {
m <- multinom(flight_case ~ mass_per + egg_case, trace=FALSE, data = d)
model_table = calculate_P2(m, "mass_per", "egg_case", print_table=FALSE)
return(model_table)
}
par(mfrow=c(1,2))
ML_eqs = get_significant_modelsf(15) # mass_per
ML_eqs = get_significant_modelsf(16) # egg_case
run_multinom_model = function(d) {
m <- multinom(flight_case ~ mass_per + egg_case, trace=FALSE, data = d)
model_table = calculate_P2(m, "mass_per", "egg_case", print_table=FALSE)
return(model_table)
}
par(mfrow=c(1,2))
ML_eqs = get_significant_modelsf(15) # mass_per
ML_eqs = get_significant_modelsf(16) # egg_case
# define a run_multinom_model function based on the best fit model
run_multinom_model = function(d) {
m <- multinom(flight_case ~ mass_per + egg_case, trace=FALSE, data = d)
model_table = calculate_P2(m, "mass_per", "egg_case", print_table=FALSE)
return(model_table)
}
par(mfrow=c(1,2))
ML_eqs = get_significant_modelsf(15) # mass_per
ML_eqs = get_significant_modelsf(16) # egg_case
# define a run_multinom_model function based on the best fit model
run_multinom_model = function(d) {
m <- multinom(flight_case ~ mass_per + egg_case, trace=FALSE, data = d)
model_table = calculate_P2(m, "mass_per", "egg_case", print_table=FALSE)
return(model_table)
}
# determine which multinomial model equations are significant with a plot
par(mfrow=c(1,2))
ML_eqs = get_significant_modelsf(15) # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
ML_eqs = get_significant_modelsf(16) # egg_case
mtext("A. Egg Response", side=3, adj=0, line=0.5, cex=1.6, font=1)
# define a run_multinom_model function based on the best fit model
run_multinom_model = function(d) {
m <- multinom(flight_case ~ mass_per + egg_case, trace=FALSE, data = d)
model_table = calculate_P2(m, "mass_per", "egg_case", print_table=FALSE)
return(model_table)
}
# determine which multinomial model equations are significant with a plot
par(mfrow=c(1,2))
ML_eqs = get_significant_modelsf(15) # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
ML_eqs = get_significant_modelsf(16) # egg_case
mtext("A. Egg \nResponse", side=3, adj=0, line=0.5, cex=1.6, font=1)
# define a run_multinom_model function based on the best fit model
run_multinom_model = function(d) {
m <- multinom(flight_case ~ mass_per + egg_case, trace=FALSE, data = d)
model_table = calculate_P2(m, "mass_per", "egg_case", print_table=FALSE)
return(model_table)
}
# determine which multinomial model equations are significant with a plot
par(mfrow=c(1,2))
ML_eqs = get_significant_modelsf(15) # mass_per
mtext("A. Mass", side=3, adj=0, line=0.5, cex=1.6, font=1)
ML_eqs = get_significant_modelsf(16) # egg_case
mtext("A. Egg \nResponse", side=3, adj=0, line=0.3, cex=1.6, font=1)
head(pp <- fitted(M3))
head(pp <- fitted(M3))
head(pp <- fitted(M3))
df$index = 1:nrow(df)
eggT1 = df %>%
filter(egg_case==-1)
egg0 = df %>%
filter(egg_case==0)
egg2 = df %>%
filter(egg_case==2)
eggT2 = df %>%
filter(egg_case==1)
eggT1_rows = eggT1$index
egg_0rows = egg0$index
egg_2rows = egg2$index
eggT2_rows = eggT2$index
data <- data.frame(R = df$flight_case,
A = df$egg_case,
B = df$mass_diff,
C = df$wing2body)
model_script = paste0(source_path,"generic multinomial models- multinom 1RF + 3 FF.R")
model_comparisonsAIC(model_script)
data <- data.frame(R = df$flight_case,
A = df$egg_case,
B = df$mass_per,
C = df$wing2body)
model_script = paste0(source_path,"generic multinomial models- multinom 1RF + 3 FF.R")
model_comparisonsAIC(model_script)
data <- data.frame(R = df$flight_case,
A = df$egg_case,
B = df$mass_per,
C = df$wing2body)
model_script = paste0(source_path,"generic multinomial models- multinom 1RF + 3 FF.R")
model_comparisonsAIC(model_script)
data <- data.frame(R = df$flight_case,
A = df$egg_case,
B = df$mass_per,
C = df$wing2body)
model_script = paste0(source_path,"generic multinomial models- multinom 1RF + 3 FF.R")
model_comparisonsAIC(model_script)
anova(m4, m7, test="Chisq") # adding wing2body does not include fit
anova(m7, m12, test="Chisq") # Adding A*C does not improve fit
anova(m7, m13, test="Chisq")
anova(m4, m7, test="Chisq") # adding wing2body does not include fit
anova(m7, m13, test="Chisq") # Adding A*C does not improve fit
anova(m7, m12, test="Chisq") # Adding B*C does not improve fit
plot6 = function(df, pp) {
# only laid eggs in T1
plot(df$mass_per[eggT1_rows], pp[eggT1_rows,1], ylim=c(0,1.05), xlim=c(-36,108), col="red", type="l", lty=1,main="Females Only", ylab="Flight Case Probability", xlab="Percent Change in Mass From T1 to T2 (g)")
# xlim=c(-0.045,0.07)
points(df$mass_per[eggT1_rows], pp[eggT1_rows,2], col="blue", type="l", lty=1, cex=0.45)
points(df$mass_per[eggT1_rows], pp[eggT1_rows,3], col="black", type="l", lty=1, cex=0.45)
# no egg change
points(df$mass_per[egg_0rows], pp[egg_0rows,1], col="red", type="l", lty=2) # did not fly in either
points(df$mass_per[egg_0rows], pp[egg_0rows,2], col="blue", type="l", lty=2) # flew in T1 only
points(df$mass_per[egg_0rows], pp[egg_0rows,3], col="black", type="l", lty=2) # flew in both
# eggs twice
points(df$mass_per[egg_2rows], pp[egg_2rows,1], col="red", type="l", lty=4) # did not fly in either
points(df$mass_per[egg_2rows], pp[egg_2rows,2], col="blue", type="l", lty=4) # flew in T1 only
points(df$mass_per[egg_2rows], pp[egg_2rows,3], col="black", type="l", lty=4) # flew in both
# only laid eggs in T2
points(df$mass_per[eggT2_rows], pp[eggT2_rows,1], col="red", type="l", lty=3) # flew in neither
points(df$mass_per[eggT2_rows], pp[eggT2_rows,2], col="blue", type="l", lty=3) # flew in T1 only
points(df$mass_per[eggT2_rows], pp[eggT2_rows,3], col="black", type="l", lty=3) # flew in both
# rect(-0.038,-1,0.064,2, NA, col = rgb(0.5,0,0.5,1/15), border="pink") # most likely to not fly unless gain more than about 0.025 g mass and then fly only in T1 (eggs were laid twice).
# rect(-0.045,-1,0.038,2, NA, col = rgb(0.5,0.2,0.5,1/15), border="pink") # most likely to not fly (2nd widest mass change, and laid eggs in T2)
# rect(-0.039,-1,0.008,2, NA, col = rgb(0.1,0.5,0.5,1/10), border="lightblue") # most likely to fly twice (lost mass and laid eggs only in T1)
# rect(-0.005,-1,0.029,2, NA, col = rgb(0.4,0.5,0.5,1/4), border="lightblue") # most likely to fly twice always (smallest mass change and did not lay eggs)
#
text(70,0.68, labels="Flew in T1 only", col="blue") # 0.059,0.54
text(-20,0.95, labels="Did Not Fly", col="red") # -0.036,0.95
text(-20,0.55, labels="Flew Twice", col="black") # -0.02,0.35
legend(76, 1.07,
legend = c("laid eggs in T1","no eggs laid", "eggs laid twice", "laid eggs in T2"),
lty=1:4,
col="black",
cex=0.8)
}
pp5 = fitted(M3)
df5 = df
plot6(df5,pp5)
?cvms
??cvms
script_names = c("clean_flight_data-Fall.R", # Loads and cleans data
"unique_flight_data-Fall.R")
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
script_names = c("clean_flight_data-Fall.R", # Loads and cleans data
"unique_flight_data-Fall.R")
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
script_names = c("clean_flight_data-Fall.R", # Loads and cleans data
"unique_flight_data-Fall.R")
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
script_names = c("clean_flight_data-Fall.R", # Loads and cleans data
"unique_flight_data-Fall.R")
for (script in script_names) {
path = paste0(source_path, script)
source(path)
}
View(clean_flight_data.Fall)
View(create_delta_data.Fall)
morph_d = read.csv("data/bug_morphology_flight-trials-Autumn2019.csv",
header=TRUE, sep=",", stringsAsFactors=TRUE)
data_path = paste0("../../Autumn_2019/stats/data/old_data/")
morph_d = read.csv(paste0(data_path,"bug_morphology_flight-trials-Autumn2019.csv"),
header=TRUE, sep=",", stringsAsFactors=TRUE)
data = clean_flight_data.Fall("data/old_data/all_flight_data-Fall2019.csv", morph_d)
morph_d[morph_d$ID == 146,]$sex = data[data$ID == 146,]$sex # this bug broke apart before morph measurements taken so using flight sex identification
data_path = paste0("../../Autumn_2019/stats/data/old_data/")
morph_d = read.csv(paste0(data_path,"bug_morphology_flight-trials-Autumn2019.csv"),
header=TRUE, sep=",", stringsAsFactors=TRUE)
data = clean_flight_data.Fall("data/old_data/all_flight_data-Fall2019.csv", morph_d)
morph_d[morph_d$ID == 146,]$sex = data[data$ID == 146,]$sex # this bug broke apart before morph measurements taken so using flight sex identification
data_path = paste0("../../Autumn_2019/stats/data/old_data/")
morph_d = read.csv(paste0(data_path,"bug_morphology_flight-trials-Autumn2019.csv"),
header=TRUE, sep=",", stringsAsFactors=TRUE)
data = clean_flight_data.Fall("data/old_data/all_flight_data-Fall2019.csv", morph_d)
morph_d[morph_d$ID == 146,]$sex = data[data$ID == 146,]$sex # this bug broke apart before morph measurements taken so using flight sex identification
data_mass = data %>%
filter(!is.na(mass))
# 60 min trial
data60 = data_mass %>%
filter(set_number < 53)
# 90 min trial
data90 = data_mass %>%
filter(set_number < 72 & set_number > 52)
# ongoing trial
ongoing_data = data_mass %>%
filter(set_number > 71)
d = create_delta_data.Fall(ongoing_data)
d = create_delta_data.Fall(ongoing_data)
d = create_delta_data.Fall(ongoing_data)
