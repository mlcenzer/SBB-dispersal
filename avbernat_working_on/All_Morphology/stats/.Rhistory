cols = c("green","darkgreen","grey78")
library(plotrix)
colorfunc = colorRamp(cols)
#colorfunc = colorRamp(c("red","black","blue"))
x <- sort(runif(length(SIM), min = 0, max = 1))
mycolors_sim = rgb(colorfunc(x), maxColorValue=255)
plot(cf$sym_dist, cf$model, ylab="% change", xlab=xlabel,
col=mycolors_sim[as.factor(cf$sym_dist)],pch=c(1,2)[as.factor(cf$host)],
cex=abs(cf$sym_dist)*.9)
grid()
abline(v=0, col="black")
abline(v=70, col="black")
legend(.05, 550,
legend=c("K. elegans", "C. corindum"),
col=c("black"), pch=c(1,2),cex=1)
legend(.05, 400,
legend=c("Close", "Homestead", "Far"),
col=cols, pch=c(20, 20, 19),cex=1)
```
```{r}
(exp(.46077) - 1) * 100
```
xlabel = expression(log(sqrt(avg("mass (g)"))))
#xlabel = "distance from sympatric zone"
# "log square root average mass (g)"
cft = cf[cf$host == -1,] # -1 is C.corindum
#cft = cf[cf$sym_dist == min(unique(cf$sym_dist)),]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[5],]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[1],]
#cft= cf
cols = c("green","darkgreen","grey78")
cols = c("skyblue","blue","grey78")
#cols = c("skyblue","black","green")
library(plotrix)
colorfunc = colorRamp(cols)
#colorfunc = colorRamp(c("red","black","blue"))
x <- sort(runif(length(SIM), min = 0, max = 1))
mycolors_sim = rgb(colorfunc(x), maxColorValue=255)
plot(cft$avg_mass_logsqrt, cft$model, ylab="% change", xlab=xlabel,
col=mycolors_sim[as.factor(cft$sym_dist)],pch=c(2,2)[as.factor(cft$host)],
ylim=c(-100,550)
# ,cex=abs(cft$sym_dist)*.8
)
grid()
abline(v=0, col="black")
abline(v=70, col="black")
legend(.05, 550,
legend=c("K. elegans", "C. corindum"),
col=c("black"), pch=c(1,2),cex=1)
legend(.05, 400,
legend=c("Far", "Homestead", "Close"),
col=cols, pch=c(20, 20, 19),cex=1)
xlabel = expression(log(sqrt(avg("mass (g)"))))
#xlabel = "distance from sympatric zone"
# "log square root average mass (g)"
cft = cf[cf$host == -1,] # -1 is C.corindum
#cft = cf[cf$sym_dist == min(unique(cf$sym_dist)),]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[5],]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[1],]
#cft= cf
cols = c("green","darkgreen","grey78")
cols = c("skyblue","blue","grey78")
#cols = c("skyblue","black","green")
library(plotrix)
colorfunc = colorRamp(cols)
#colorfunc = colorRamp(c("red","black","blue"))
x <- sort(runif(length(SIM), min = 0, max = 1))
mycolors_sim = rgb(colorfunc(x), maxColorValue=255)
plot(cft$avg_mass_logsqrt, cft$model, ylab="% change", xlab=xlabel,
col=mycolors_sim[as.factor(cft$sym_dist)],pch=c(2,2)[as.factor(cft$host)],
ylim=c(-100,550)
# ,cex=abs(cft$sym_dist)*.8
)
grid()
abline(v=0, col="black")
abline(v=70, col="black")
legend(.05, 550,
legend=c("K. elegans", "C. corindum"),
col=c("black"), pch=c(1,2),cex=1)
legend(.05, 400,
legend=c("Far", "Homestead", "Close"),
col=cols, pch=c(20, 20, 19),cex=1)
xlabel = expression(log(sqrt(avg("mass (g)"))))
#xlabel = "distance from sympatric zone"
# "log square root average mass (g)"
cft = cf[cf$host == -1,] # -1 is C.corindum
#cft = cf[cf$sym_dist == min(unique(cf$sym_dist)),]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[5],]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[1],]
#cft= cf
cols = c("green","darkgreen","grey78")
cols = c("skyblue","blue","grey78")
#cols = c("skyblue","black","green")
library(plotrix)
colorfunc = colorRamp(cols)
#colorfunc = colorRamp(c("red","black","blue"))
x <- sort(runif(length(SIM), min = 0, max = 1))
mycolors_sim = rgb(colorfunc(x), maxColorValue=255)
plot(cft$avg_mass_logsqrt, cft$model, ylab="% change", xlab=xlabel,
col=mycolors_sim[as.factor(cft$sym_dist)],pch=c(2,2)[as.factor(cft$host)],
ylim=c(-100,550)
# ,cex=abs(cft$sym_dist)*.8
)
grid()
abline(v=0, col="black")
abline(v=70, col="black")
legend(.05, 550,
legend=c("K. elegans", "C. corindum"),
col=c("black"), pch=c(1,2),cex=1)
legend(.05, 400,
legend=c("Far", "Homestead", "Close"),
col=cols, pch=c(20, 20, 19),cex=1)
xlabel = expression(log(sqrt(avg("mass (g)"))))
#xlabel = "distance from sympatric zone"
# "log square root average mass (g)"
cft = cf[cf$host == 1,] # -1 is C.corindum
#cft = cf[cf$sym_dist == min(unique(cf$sym_dist)),]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[5],]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[1],]
#cft= cf
cols = c("green","darkgreen","grey78")
#cols = c("skyblue","blue","grey78")
#cols = c("skyblue","black","green")
library(plotrix)
colorfunc = colorRamp(cols)
#colorfunc = colorRamp(c("red","black","blue"))
x <- sort(runif(length(SIM), min = 0, max = 1))
mycolors_sim = rgb(colorfunc(x), maxColorValue=255)
plot(cft$avg_mass_logsqrt, cft$model, ylab="% change", xlab=xlabel,
col=mycolors_sim[as.factor(cft$sym_dist)],pch=c(1,2)[as.factor(cft$host)],
ylim=c(-100,550)
# ,cex=abs(cft$sym_dist)*.8
)
grid()
abline(v=0, col="black")
abline(v=70, col="black")
legend(.05, 550,
legend=c("K. elegans", "C. corindum"),
col=c("black"), pch=c(1,2),cex=1)
legend(.05, 400,
legend=c("Far", "Homestead", "Close"),
col=cols, pch=c(20, 20, 19),cex=1)
xlabel = expression(log(sqrt(avg("mass (g)"))))
#xlabel = "distance from sympatric zone"
# "log square root average mass (g)"
cft = cf[cf$host == 1,] # -1 is C.corindum
#cft = cf[cf$sym_dist == min(unique(cf$sym_dist)),]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[5],]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[1],]
cft= cf
cols = c("green","darkgreen","grey78")
#cols = c("skyblue","blue","grey78")
#cols = c("skyblue","black","green")
library(plotrix)
colorfunc = colorRamp(cols)
#colorfunc = colorRamp(c("red","black","blue"))
x <- sort(runif(length(SIM), min = 0, max = 1))
mycolors_sim = rgb(colorfunc(x), maxColorValue=255)
plot(cft$avg_mass_logsqrt, cft$model, ylab="% change", xlab=xlabel,
col=mycolors_sim[as.factor(cft$sym_dist)],pch=c(1,2)[as.factor(cft$host)],
ylim=c(-100,550)
# ,cex=abs(cft$sym_dist)*.8
)
grid()
abline(v=0, col="black")
abline(v=70, col="black")
legend(.05, 550,
legend=c("K. elegans", "C. corindum"),
col=c("black"), pch=c(1,2),cex=1)
legend(.05, 400,
legend=c("Far", "Homestead", "Close"),
col=cols, pch=c(20, 20, 19),cex=1)
xlabel = expression(log(sqrt(avg("mass (g)"))))
#xlabel = "distance from sympatric zone"
# "log square root average mass (g)"
cft = cf[cf$host == 1,] # -1 is C.corindum
#cft = cf[cf$sym_dist == min(unique(cf$sym_dist)),]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[5],]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[1],]
cft= cf
cols = c("green","darkgreen","grey78")
#cols = c("skyblue","blue","grey78")
cols = c("skyblue","black","green")
library(plotrix)
colorfunc = colorRamp(cols)
#colorfunc = colorRamp(c("red","black","blue"))
x <- sort(runif(length(SIM), min = 0, max = 1))
mycolors_sim = rgb(colorfunc(x), maxColorValue=255)
plot(cft$avg_mass_logsqrt, cft$model, ylab="% change", xlab=xlabel,
col=mycolors_sim[as.factor(cft$sym_dist)],pch=c(1,2)[as.factor(cft$host)],
ylim=c(-100,550)
# ,cex=abs(cft$sym_dist)*.8
)
grid()
abline(v=0, col="black")
abline(v=70, col="black")
legend(.05, 550,
legend=c("K. elegans", "C. corindum"),
col=c("black"), pch=c(1,2),cex=1)
legend(.05, 400,
legend=c("Far", "Homestead", "Close"),
col=cols, pch=c(20, 20, 19),cex=1)
xlabel = expression(log(sqrt(avg("mass (g)"))))
#xlabel = "distance from sympatric zone"
# "log square root average mass (g)"
cft = cf[cf$host == 1,] # -1 is C.corindum
#cft = cf[cf$sym_dist == min(unique(cf$sym_dist)),]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[5],]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[1],]
cft= cf
cols = c("green","darkgreen","grey78")
#cols = c("skyblue","blue","grey78")
cols = c("blue","black","red")
library(plotrix)
colorfunc = colorRamp(cols)
#colorfunc = colorRamp(c("red","black","blue"))
x <- sort(runif(length(SIM), min = 0, max = 1))
mycolors_sim = rgb(colorfunc(x), maxColorValue=255)
plot(cft$avg_mass_logsqrt, cft$model, ylab="% change", xlab=xlabel,
col=mycolors_sim[as.factor(cft$sym_dist)],pch=c(1,2)[as.factor(cft$host)],
ylim=c(-100,550)
# ,cex=abs(cft$sym_dist)*.8
)
grid()
abline(v=0, col="black")
abline(v=70, col="black")
legend(.05, 550,
legend=c("K. elegans", "C. corindum"),
col=c("black"), pch=c(1,2),cex=1)
legend(.05, 400,
legend=c("Far", "Homestead", "Close"),
col=cols, pch=c(20, 20, 19),cex=1)
xlabel = expression(log(sqrt(avg("mass (g)"))))
#xlabel = "distance from sympatric zone"
# "log square root average mass (g)"
cft = cf[cf$host == 1,] # -1 is C.corindum
#cft = cf[cf$sym_dist == min(unique(cf$sym_dist)),]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[5],]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[1],]
cft= cf
cols = c("green","darkgreen","grey78")
#cols = c("skyblue","blue","grey78")
cols = c("blue","black","red")
library(plotrix)
colorfunc = colorRamp(cols)
#colorfunc = colorRamp(c("red","black","blue"))
x <- sort(runif(length(SIM), min = 0, max = 1))
mycolors_sim = rgb(colorfunc(x), maxColorValue=255)
plot(cft$avg_mass_logsqrt, cft$model, ylab="% change", xlab=xlabel,
col=mycolors_sim[as.factor(cft$sym_dist)],pch=c(1,2)[as.factor(cft$host)],
ylim=c(-100,550)
# ,cex=abs(cft$sym_dist)*.8
)
grid()
abline(v=0, col="black")
abline(v=70, col="black")
legend(.05, 550,
legend=c("K. elegans", "C. corindum"),
col=c("black"), pch=c(1,2),cex=1)
legend(.05, 400,
legend=c("Far", "Homestead", "Close"),
col=cols, pch=c(20, 20, 20),cex=1)
xlabel = expression(log(sqrt(avg("mass (g)"))))
#xlabel = "distance from sympatric zone"
# "log square root average mass (g)"
cft = cf[cf$host == 1,] # -1 is C.corindum
#cft = cf[cf$sym_dist == min(unique(cf$sym_dist)),]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[5],]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[1],]
cft= cf
cols = c("green","darkgreen","grey78")
#cols = c("skyblue","blue","grey78")
cols = c("green","black","blue")
library(plotrix)
colorfunc = colorRamp(cols)
#colorfunc = colorRamp(c("red","black","blue"))
x <- sort(runif(length(SIM), min = 0, max = 1))
mycolors_sim = rgb(colorfunc(x), maxColorValue=255)
plot(cft$avg_mass_logsqrt, cft$model, ylab="% change", xlab=xlabel,
col=mycolors_sim[as.factor(cft$sym_dist)],pch=c(1,2)[as.factor(cft$host)],
ylim=c(-100,550)
# ,cex=abs(cft$sym_dist)*.8
)
grid()
abline(v=0, col="black")
abline(v=70, col="black")
legend(.05, 550,
legend=c("K. elegans", "C. corindum"),
col=c("black"), pch=c(1,2),cex=1)
legend(.05, 400,
legend=c("Far", "Homestead", "Close"),
col=cols, pch=c(20, 20, 20),cex=1)
xlabel = expression(log(sqrt(avg("mass (g)"))))
#xlabel = "distance from sympatric zone"
# "log square root average mass (g)"
cft = cf[cf$host == 1,] # -1 is C.corindum
#cft = cf[cf$sym_dist == min(unique(cf$sym_dist)),]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[5],]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[1],]
cft= cf
cols = c("green","darkgreen","grey78")
#cols = c("skyblue","blue","grey78")
cols = c("pink","black","grey")
library(plotrix)
colorfunc = colorRamp(cols)
#colorfunc = colorRamp(c("red","black","blue"))
x <- sort(runif(length(SIM), min = 0, max = 1))
mycolors_sim = rgb(colorfunc(x), maxColorValue=255)
plot(cft$avg_mass_logsqrt, cft$model, ylab="% change", xlab=xlabel,
col=mycolors_sim[as.factor(cft$sym_dist)],pch=c(1,2)[as.factor(cft$host)],
ylim=c(-100,550)
# ,cex=abs(cft$sym_dist)*.8
)
grid()
abline(v=0, col="black")
abline(v=70, col="black")
legend(.05, 550,
legend=c("K. elegans", "C. corindum"),
col=c("black"), pch=c(1,2),cex=1)
legend(.05, 400,
legend=c("Far", "Homestead", "Close"),
col=cols, pch=c(20, 20, 20),cex=1)
xlabel = expression(log(sqrt(avg("mass (g)"))))
#xlabel = "distance from sympatric zone"
# "log square root average mass (g)"
cft = cf[cf$host == 1,] # -1 is C.corindum
#cft = cf[cf$sym_dist == min(unique(cf$sym_dist)),]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[5],]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[1],]
cft= cf
cols = c("green","darkgreen","grey78")
#cols = c("skyblue","blue","grey78")
cols = c("red","black","pink")
library(plotrix)
colorfunc = colorRamp(cols)
#colorfunc = colorRamp(c("red","black","blue"))
x <- sort(runif(length(SIM), min = 0, max = 1))
mycolors_sim = rgb(colorfunc(x), maxColorValue=255)
plot(cft$avg_mass_logsqrt, cft$model, ylab="% change", xlab=xlabel,
col=mycolors_sim[as.factor(cft$sym_dist)],pch=c(1,2)[as.factor(cft$host)],
ylim=c(-100,550)
# ,cex=abs(cft$sym_dist)*.8
)
grid()
abline(v=0, col="black")
abline(v=70, col="black")
legend(.05, 550,
legend=c("K. elegans", "C. corindum"),
col=c("black"), pch=c(1,2),cex=1)
legend(.05, 400,
legend=c("Far", "Homestead", "Close"),
col=cols, pch=c(20, 20, 20),cex=1)
xlabel = expression(log(sqrt(avg("mass (g)"))))
#xlabel = "distance from sympatric zone"
# "log square root average mass (g)"
cft = cf[cf$host == 1,] # -1 is C.corindum
#cft = cf[cf$sym_dist == min(unique(cf$sym_dist)),]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[5],]
#cft = cf[cf$sym_dist == (unique(cf$sym_dist))[1],]
cft= cf
cols = c("green","darkgreen","grey78")
#cols = c("skyblue","blue","grey78")
cols = c("pink","black","grey")
library(plotrix)
colorfunc = colorRamp(cols)
#colorfunc = colorRamp(c("red","black","blue"))
x <- sort(runif(length(SIM), min = 0, max = 1))
mycolors_sim = rgb(colorfunc(x), maxColorValue=255)
plot(cft$avg_mass_logsqrt, cft$model, ylab="% change", xlab=xlabel,
col=mycolors_sim[as.factor(cft$sym_dist)],pch=c(1,2)[as.factor(cft$host)],
ylim=c(-100,550)
# ,cex=abs(cft$sym_dist)*.8
)
grid()
abline(v=0, col="black")
abline(v=70, col="black")
legend(.05, 550,
legend=c("K. elegans", "C. corindum"),
col=c("black"), pch=c(1,2),cex=1)
legend(.05, 400,
legend=c("Far", "Homestead", "Close"),
col=cols, pch=c(20, 20, 20),cex=1)
cols = c("green","darkgreen","grey78")
library(plotrix)
colorfunc = colorRamp(cols)
#colorfunc = colorRamp(c("red","black","blue"))
x <- sort(runif(length(SIM), min = 0, max = 1))
mycolors_sim = rgb(colorfunc(x), maxColorValue=255)
plot(cf$sym_dist, cf$model, ylab="% change", xlab=xlabel,
col=mycolors_sim[as.factor(cf$sym_dist)],pch=c(1,2)[as.factor(cf$host)],
cex=abs(cf$sym_dist)*.9)
grid()
abline(v=0, col="black")
abline(v=70, col="black")
legend(.05, 550,
legend=c("K. elegans", "C. corindum"),
col=c("black"), pch=c(1,2),cex=1)
legend(.05, 400,
legend=c("Close", "Homestead", "Far"),
col=cols, pch=c(20, 20, 19),cex=1)
cols = c("green","darkgreen","grey78")
library(plotrix)
colorfunc = colorRamp(cols)
#colorfunc = colorRamp(c("red","black","blue"))
x <- sort(runif(length(SIM), min = 0, max = 1))
mycolors_sim = rgb(colorfunc(x), maxColorValue=255)
plot(cf$sym_dist, cf$model, ylab="% change", xlab=xlabel,
col=mycolors_sim[as.factor(cf$avg_mass_logsqrt)],pch=c(1,2)[as.factor(cf$host)],
cex=abs(cf$sym_dist)*.9)
grid()
abline(v=0, col="black")
abline(v=70, col="black")
legend(.05, 550,
legend=c("K. elegans", "C. corindum"),
col=c("black"), pch=c(1,2),cex=1)
legend(.05, 400,
legend=c("Close", "Homestead", "Far"),
col=cols, pch=c(20, 20, 19),cex=1)
install.packages("randomForest")
knitr::opts_chunk$set(echo = TRUE)
library(faraway)
data(pyrimidines)
head(pyrimidines)
set.seed(42)
n = nrow(pyrimidines) - 1
X_train = pyrimidines[train_idx, -27]
X_train = pyrimidines[train_idx, -length(pyrimidines)]
train_idx = sample(n, n/2, replace=FALSE)
X_train = pyrimidines[train_idx, -length(pyrimidines)]
-length(pyrimidines)
X_val = pyrimidines[-train_idx, length(pyrimidines)]
y_train = pyrimidines[-train_idx, length(pyrimidines)]
X_val = pyrimidines[-c(train_idx, 74),
-length(pyrimidines)]
y_val = pyrimidines[-c(train_idx, 74),
length(pyrimidines)]
y_val
X_val
X_train = pyrimidines[train_idx, -length(pyrimidines)]
y_train = pyrimidines[-train_idx, length(pyrimidines)]
y_val = pyrimidines[-c(train_idx, 74),
length(pyrimidines)]
X_test = pyrimidines[74, -length(pyrimidines)]
y_test = pyrimidines[74, length(pyrimidines)]
head(X_val)
test_point = nrow(pyrimidines)
last_col = length(pyrimidines)
tp = nrow(pyrimidines)
lcol = length(pyrimidines)
set.seed(42)
n = nrow(pyrimidines) - 1 # pretend the last row is the test point that want to build the prediction for. test point definition?
# 74 point is excluded from training and validation set
tp = nrow(pyrimidines)
lcol = length(pyrimidines)
train_idx = sample(n, n/2, replace=FALSE)
X_train = pyrimidines[train_idx, -lcol]
y_train = pyrimidines[-train_idx, lcol]
X_val = pyrimidines[-c(train_idx, tp), -lcol]
y_val = pyrimidines[-c(train_idx, tp), lcol]
X_test = pyrimidines[tp, -lcol]
y_test = pyrimidines[tp, lcol]
head(X_val)
# train set
# validation set
library(randomForest)
rf_result = randomForest(X_train, y_train, ntree = 100, mtry = sqrt(ncol(X_train)))
X_train
y_train
library(randomForest)
rf_result = randomForest(X_train, y_train, ntree = 100, mtry = sqrt(ncol(X_train)))
predict(rf_result, X_val)
rf_result = randomForest(X_train, y_train, ntree = 100, mtry = sqrt(ncol(X_train)))
X_train
y_train
X_train
sqrt(ncol(X_train)
)
set.seed(42)
n= nrow(pyrimidines) - 1
train_idx = sample(n,n/2, replace = FALSE)
X_train = pyrimidines[train_idx, -27]
X_val = pyrimidines[-train_idx, -27]
X_test = pyrimidines[n+1, -27]
y_train = pyrimidines[train_idx, 27]
y_val = pyrimidines[-train_idx, 27]
y_test = pyrimidines[n+1, 27]
head(X_val)
library(randomForest)
rf_result = randomForest(X_train, y_train,
ntree = 100,
mtry = sqrt(ncol(X_train)))
# mtry...the number of randomly available columns for each when trying to decide what splits to make.
predict(rf_result, X_val)
y_val
abs_errors_val = abs(predict(rf_result, X_val) - y_val)
abs_errors_val
error_radius = quantile(abs_errors_val, 0.95) # only 5% of the time do you have errors worse than this
error_radius
abs_errors_val = abs(predict(rf_result, X_val) - y_val)
error_radius = quantile(abs_errors_val, 0.95)
error_radius
predict(rf_result, X_test)
predict(rf_result, X_test) # how confident should be in this prediction?
predict_test_point = predict(rf_restul, X_test)
predict_test_point = predict(rf_result, X_test)
prediction_interval_test = c(predict_test_point - error_radius,
predict_test_point + error_radius)
prediction_interval_test
predict_test_point = predict(rf_result, X_test)
prediction_interval_test =  c(predict_test_point - error_radius,
predict_test_point + error_radius)
prediction_interval_test
