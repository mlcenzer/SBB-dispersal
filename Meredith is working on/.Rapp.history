rm(list=ls())#
#
#second draft stats for first mate#
setwd("~/Documents/Florida soapberry project/2019 May/2019 mate choice")#
#
#load functions and metadata#
source("age calculator.R")#
#
#Load and prep metadata#
#metadata#
data_raw<-read.csv("labdata_8_29.csv", header=TRUE, sep=",", quote="", stringsAsFactors=FALSE)#
#
data<-data_raw[data_raw$ID!="" & data_raw$ID!="ID #",]#
#
data$dead<-0#
data$dead[data$death.date!=""]<-1#
#
#######Analyze survival rates at this point.#
model<-glm(dead~nathost.site + pophost, family=binomial, data=data)#
summary(model)#
#
data_GV<-data[data$nathost=="K.elegans",]#
data_GV$site.year<--1#
data_GV$site.year[data_GV$nathost.site=="GV 2019"]<-1#
data_GV$site<--1#
data_GV$site[data_GV$nathost.site=="LW 2014"]<-1#
#
model<-glm(dead~site + site.year, family=binomial, data=data_GV)#
summary(model)#
#
########################Dvpt.time#
data<-data[data$dead==0 & data$eclosion.date!="",]#
data$ha.mo<-as.numeric(unlist(lapply(strsplit(data$hatch.date,"[.]"), function(x) x[1])))#
data$ha.day<-as.numeric(unlist(lapply(strsplit(data$hatch.date,"[.]"), function(x) x[2])))#
data$ec.mo<-as.numeric(unlist(lapply(strsplit(data$eclosion.date,"[.]"), function(x) x[1])))#
data$ec.day<-as.numeric(unlist(lapply(strsplit(data$eclosion.date,"[.]"), function(x) x[2])))#
data$june_days<-0#
data$july_days<-31#
data$aug_days<-0#
#
for(n in 1:nrow(data)){#
	if(data$ha.mo[n]=="6"){data$june_days[n]<-30-data$ha.day[n]}#
	if(data$ha.mo[n]=="7"){data$july_days[n]<-31-data$ha.day[n]}#
	if(data$ec.mo[n]=="7"){data$july_days[n]<-data$ec.day[n]}#
	if(data$ec.mo[n]=="8"){data$aug_days[n]<-data$ec.day[n]}#
}#
#
data$dvpt.time<-data$june_days+data$july_days+data$aug_days#
#
data_GV<-data[data$nathost=="K.elegans",]#
data_GV$site.year<--1#
data_GV$site.year[data_GV$nathost.site=="GV 2019"]<-1#
data_GV$site<--1#
data_GV$site[data_GV$nathost.site=="LW 2014"]<-1#
#
model<-glm(dvpt.time~site + site.year + sex, data=data_GV, family=Gamma)#
summary(model)
aggregate(dvpt.time~pop, data=data_GV)
aggregate(dvpt.time~pop, data=data_GV, FUN=mean)
aggregate(dvpt.time~pop*sex, data=data_GV, FUN=mean)
dv_data<-aggregate(dvpt.time~pop*sex, data=data_GV, FUN=mean)
dv_data$n<-aggregate(dvpt.time~pop*sex, data=data_GV, FUN=length)$dvpt.time
dv_data
dv_data$n<-aggregate(dvpt.time~pophost*sex, data=data_GV, FUN=length)$dvpt.time
dv_data<-aggregate(dvpt.time~pophost*sex, data=data_GV, FUN=mean)
dv_data$n<-aggregate(dvpt.time~pophost*sex, data=data_GV, FUN=length)$dvpt.time
dv_data
#exploring dispersal data#
rm(list=ls())#
setwd("~/Documents/Florida soapberry project/2019 Dispersal/SBB-dispersal git/Meredith is working on/")#
#
data30<-read.csv("data/dispersal_data.csv", header=TRUE, sep=",", quote="", stringsAsFactors=FALSE)#
#
data60_raw<-read.csv("data/dispersal_data2.csv", header=TRUE, sep=",", quote="", stringsAsFactors=FALSE)#
data60<-data60_raw[!is.na(data60_raw$flew),]#
#
data90_raw<-read.csv("data/dispersal3.csv", header=TRUE, sep=",", quote="", stringsAsFactors=FALSE)#
data90<-data90_raw[!is.na(data90_raw$flew),]#
#
#these need to be split and curated first.#
#datalong_raw<-read.csv("data/dispersal4.csv", header=TRUE, sep=",", quote="", stringsAsFactors=FALSE)#
#datalong<-datalong_raw[!is.na(datalong_raw$flew),]#
#
flight<-read.csv("flight output/flight_summary_modified.csv", header=TRUE, sep=",", quote="", stringsAsFactors=FALSE)#
data<-data.frame(ID=as.factor(c(data30$ID, data60$ID, data90$ID)), sex=NA, population=c(data30$population, data60$population, data90$population), chamber=c(data30$chamber, data60$chamber, data90$chamber), trial=rep(c("30", "60", "90"), times=c(nrow(data30), nrow(data60), nrow(data90))), flew=c(data30$flew, data60$flew, data90$flew), flight_type=c(data30$flight_type, data60$flight_type, data90$flight_type), mass=c(rep(NA, times=nrow(data30)), data60$mass, data90$mass), pophost=NA, distance=NA, avg_spd=NA)#
#
for(row in 1:nrow(data)){#
	data$sex[row]<-data30$sex[data30$ID==data$ID[row]]#
	if(data$population[row]=="North Key Largo"){#
		data$pophost[row]<-"C.corindum"#
	}#
	else if(data$population[row]=="Key Largo") data$pophost[row]<-"C.corindum"#
	else if(data$population[row]=="Plantation Key") data$pophost[row]<-"C.corindum"#
	else {data$pophost[row]<-"K.elegans"}#
	if(data$trial[row]=="30"){	#
		if(nrow(flight[flight$ID==data$ID[row] & flight$total_duration<=1800,])!=0){#
			data$distance[row] <- flight$distance[flight$ID==data$ID[row] & flight$total_duration<=1800]#
			data$avg_spd[row] <- flight$average_speed[flight$ID==data$ID[row] & flight$total_duration<=1800]#
		}#
		else {#
			data$distance[row]<-0#
			data$avg_spd[row]<-0#
			}#
	}#
	else if(data$trial[row]=="60"){#
		if(nrow(flight[flight$ID==data$ID[row] & flight$total_duration<=3600 & flight$total_duration>1800,])!=0){#
			data$distance[row] <- flight$distance[flight$ID==data$ID[row] & flight$total_duration<=3600 & flight$total_duration>1800]#
			data$avg_spd[row] <- flight$average_speed[flight$ID==data$ID[row] & flight$total_duration<=3600 & flight$total_duration>1800]#
		}#
		else {#
			data$distance[row]<-0#
			data$avg_spd[row]<-0#
			}#
	}#
	else if(data$trial[row]=="90"){#
		if(nrow(flight[flight$ID==data$ID[row] & flight$total_duration>3600,])!=0){#
			data$distance[row] <- flight$distance[flight$ID==data$ID[row] & flight$total_duration>3600]#
			data$avg_spd[row] <- flight$average_speed[flight$ID==data$ID[row] & flight$total_duration>3600]#
		}#
		else {#
			data$distance[row]<-0#
			data$avg_spd[row]<-0#
		}	#
	}#
}
head(data)
data
head(flights)
head(flight)
flight$max_speed
aggregate(max_speed~total_length, data=data, FUN=mean)
head(data)
aggregate(max_speed~total_length, data=flight, FUN=mean)
head(flight)
aggregate(max_speed~total_duration, data=flight, FUN=mean)
