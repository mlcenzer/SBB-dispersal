mat
#function#
breakfast_cals<-function(eggs, pancakes, bacon){#
	cals<-eggs*78 + pancakes*86 + bacon*43#
	cals#
}
breakfast_cals(eggs=2, pancakes=2, bacon=4)
breakfast_cals(eggs=3, pancakes=2)
breakfast_cals(eggs=3, pancakes=2, bacon=0)
egg_days<-c(1,0,5,2,3,2,0)#
pancake_days<-c(2,2,2,2,2,2,2)#
bacon_days<-c(0,2,0,4,0,1,1)#
#
breakfast_cals(egg_days, pancake_days, bacon_days)
run_amount<-function(breakfast){#
	distance<-(breakfast-300)/100#
}
rm()
clear()
vector<-c(1,2,4,7,1)
vector
matrix(0, nrow=2, ncol=3)
breakfast_cals<-function(eggs, pancakes, bacon){#
	cals<-eggs*78 + pancakes*86 + bacon*43#
	cals#
}
breakfast_cals(eggs=2, pancakes=2, bacon=5)
breakfast_cals(eggs=2, pancakes=2)
breakfast_cals<-function(eggs=0, pancakes=0, bacon=0){#
	cals<-eggs*78 + pancakes*86 + bacon*43#
	cals#
}
breakfast_cals(eggs=2)
#assignment#
#
#object#
a<-1#
#vector#
vec<-c(a,4)#
#matrix#
mat<-matrix(vec, nrow=2, ncol=2)#
#function#
breakfast_cals<-function(eggs=0, pancakes=0, bacon=0){#
	eggs*78 + pancakes*86 + bacon*43#
}
egg_days<-c(1,0,5,2,3,2,0)#
pancake_days<-c(2,2,2,2,2,2,2)#
bacon_days<-c(0,2,0,4,0,1,1)#
#
breakfast_cals(egg_days, pancake_days, bacon_days)
egg_days<-c(1,0,5,2,3,2,0)#
pancake_days<-c(2,2,2,2,2,2,2)#
bacon_days<-c(0,2)#
#
breakfast_cals(egg_days, pancake_days, bacon_days)
egg_days<-c(1,0,5,2,3,2,0)#
pancake_days<-c(2,2,2,2,2,2,2)#
bacon_days<-c(2)#
#
breakfast_cals(egg_days, pancake_days, bacon_days)
egg_days<-c(1,0,5,2,3,2)#
pancake_days<-c(2,2,2,2,2,2)#
bacon_days<-c(2,0)#
#
breakfast_cals(egg_days, pancake_days, bacon_days)
breakfast_cals(egg_days, pancake_days, bacon_days)
breakfast_cals(bacon_days, egg_days, pancake_days)
breakfast_cals(bacon=bacon_days, eggs=egg_days, pancakes=pancake_days)
?seq
seq()
seq(2)
?
length
length(bacon_days)
length(eggs_days)
length(egg_days)
matrix<-matrix(egg_days, ncol=2, nrow=length(egg_days))
matrix
matrix[1,2]
matrix[3,2]
matrix[,2]
rm(list=ls())
matrix
matrix<-matrix(egg_days, ncol=2, nrow=length(egg_days))
#assignment#
#
#object#
a<-1#
#vector#
vec<-c(a,4)#
#matrix#
mat<-matrix(vec, nrow=2, ncol=2)#
#function#
breakfast_cals<-function(eggs=0, pancakes=0, bacon=0){#
	eggs*78 + pancakes*86 + bacon*43#
}#
egg_days<-c(1,0,5,2,3,2)#
pancake_days<-c(2,2,2,2,2,2)#
bacon_days<-c(2,0)#
#
breakfast_cals(egg_days, pancake_days, bacon_days)#
#practice:#
#
#write a function to convert celsius to fahrenheit#
#
#Use that function to make a 2-column matrix, the first column of celsius from 0 to 50, the second of corresponding fahrenheit values#
#Make a matrix where the first column is a population with phenotype values between 0 and 10 (may be drawn randomly using rnorm() or runif())#
#
#use the sample() function to fill the second column with a second generation drawn from the first generation. There are multiple ways to do this!#
#
#do this for 10 generations.#
#
#wouldn't a loop be nice now?
egg_mat<-matrix(egg_days, ncol=2, nrow=length(egg_days))
egg_mat
egg_mat[,2]
egg_mat[,2]<-0
egg_mat
plot(egg_mat)
plot(egg_mat[,1]~egg_mat[,2])
24.65+78.70+64
(24.65+78.70+64)/2
119.57/2
2000*0.53
rbinom(10,1,0.5)
rbinom(1,10,0.5)
rbinom(10,1,0.5)
matrix(NA, ncol=5, nrow=5)
matrix(c(0,1), ncol=5, nrow=5)
matrix(c(0,1,2), ncol=5, nrow=5)
mat<-matrix(0, nrow=5, ncol=2)
mat
mat[,1]<-1:5
mat
mat[,3]<-1
install.packages("viridis")#
install.packages("mgcv")#
install.packages("boot")#
install.packages("magick")#
#
library(viridis)#
library(mgcv)  #needed for gam command#
library(boot)  #needed for the inv.logit command#
#library(magick)
2200*0.53
?ncol
583.34+291.67
12/5
35/12
#draw body sizes that differ between Treatments using rnorm#
Results<-data.frame(Trt=rep(c('A', 'B'), times=1, each=5), Resp=c(rnorm(5, 5, 1), rnorm(5,3,1)))
Results
boxplot(Results)
boxplot(Results$Resp~Results$Trt)
lm(Resp~Trt, data=Results)
summary(lm(Resp~Trt, data=Results))
#plot mean body sizes from each treatment#
boxplot(Results$Resp~Results$Trt)
sample_test<-function(s_size){#
Results<-data.frame(Trt=rep(c('A', 'B'), times=1, each=s_size), Resp=c(rnorm(s_size, 5, 1), rnorm(s_size,3,1)))#
Results#
}
sample_test(10)
sample_test<-function(s_size){#
Results<-data.frame(Trt=rep(c('A', 'B'), times=1, each=s_size), Resp=c(rnorm(s_size, 5, 1), rnorm(s_size,3,1)))#
boxplot(Results$Resp~Results$Trt)#
}
sample_test<-function(s_size){#
Results<-data.frame(Trt=rep(c('A', 'B'), times=1, each=s_size), Resp=c(rnorm(s_size, 5, 1), rnorm(s_size,3,1)))#
Results#
}#
#
sample_test(10)#
boxplot(Results$Resp~Results$Trt)
sample_test(100)#
boxplot(Results$Resp~Results$Trt)
sample_test<-function(s_size){#
Results<-data.frame(Trt=rep(c('A', 'B'), times=1, each=s_size), Resp=c(rnorm(s_size, 5, 1), rnorm(s_size,3,1)))#
Results#
}#
#
output<-sample_test(100)#
boxplot(output$Resp~output$Trt)
output<-sample_test(10)#
boxplot(output$Resp~output$Trt)
output<-sample_test(1000)#
boxplot(output$Resp~output$Trt)
output<-sample_test(2)#
boxplot(output$Resp~output$Trt)
output<-sample_test(5)#
boxplot(output$Resp~output$Trt)
output<-sample_test(5)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
output<-sample_test(10)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
output<-sample_test(100)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
?boxplot
sample_test<-function(s_size, sd){#
Results<-data.frame(Trt=rep(c('A', 'B'), times=1, each=s_size), Resp=c(rnorm(s_size, 5, sd), rnorm(s_size,3,sd)))#
Results#
}#
#
output<-sample_test(s_size=100, sd=2)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
output<-sample_test(s_size=1000, sd=2)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim#
#
#Run it for different sample si
output<-sample_test(s_size=100, sd=2)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
output<-sample_test(s_size=100, sd=1)#
boxplot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
plot(output$Resp~output$Trt, ylim=c(0,8))#try adding ylim
10.49+29.33+18.60+15.55+19.95+5.69+6.39+7.16
113.16/2
348.69/4
150/5
14+33+18+18+22
21+15+32+13+25+16+33
155+15
170-105
155/7
2046/15
136/4
30*15
30*15*4.5
100000/12
3/8
47.71/2
60*1.75
500/20
52*5
260/25
200/8
exp^2
exp^(1/2)
e^(1/2)
exp
exp(1/2)
exp(-1/2)
exp(-1/2)+e(-0.08^2/2*(0.1^2))
exp(-1/2)+exp(-0.08^2/2*(0.1^2))
exp(-1/2)+exp((-0.08^2)/2*(0.1^2))
exp((-0.08^2)/2*(0.1^2))
exp((-0.05^2)/2*(0.1^2))
exp((-0.09^2)/2*(0.1^2))
exp((-0.1^2)/2*(0.1^2))
exp((-0.1^2)/(2*(0.1^2)))
exp((-0.08^2)/(2*(0.1^2)))
exp((-0.07^2)/(2*(0.1^2)))
exp((-0.01^2)/(2*(0.1^2)))
1-0.9*(4*0.1*0.9)^1
1-0.1*(4*0.1*0.9)^1
1-0.1*(4*0.2*0.9)^1
1-0.1*(4*0.3*0.9)^1
1-0.1*(4*0.4*0.9)^1
1-0.1*(4*0.2*0.8)^1
1-0.1*(4*0.3*0.7)^1
1-0.1*(4*0.4*0.6)^1
1-0.1*(4*0.4*0.6)^16
1-0.1*(4*0.5*0.5)^16
1-0.1*(4*0.3*0.7)^16
1-0.1*(4*0.3*0.7)^(1/16)
1/16
x=0.5#
#
survival<-function(x){#
	1-0.1*(4*x*(1-x))^(1/16)#
}
survival(x)
survival(0.6)
sapply(seq(0,1, by=0.1), survival)
plot(sapply(seq(0,1, by=0.1), survival))
survival<-function(x, B=1){#
	1-0.1*(4*x*(1-x))^B)#
}#
#
survival(0.6)#
plot(sapply(seq(0,1, by=0.1), survival))
survival<-function(x, B=1){#
	1-0.1*(4*x*(1-x))^B)#
}#
#
survival(0.6)
survival<-function(x, B=1){#
	1-0.1*(4*x*(1-x))^B#
}#
#
survival(0.6)
plot(sapply(seq(0,1, by=0.1), survival))
survival<-function(x, B=16){#
	1-0.1*(4*x*(1-x))^B#
}#
#
survival(0.6)#
plot(sapply(seq(0,1, by=0.1), survival))
279.93+17.54
(279.93+17.54)/2
69/12
(69/12)/2
29.79+15.75
sample(1:4, 4, replace=FALSE)
runif(1,min=0, max=1)
sample(1:4, 3, replace=FALSE)
87.65*2
110+8+29+16+17+44+75+2+8+59+29+66+38+40+25+13+220+29+12+29+50
5400/60
8*60
480/9
480/90
2.7*(480/90)
252+368.96
620.96-367.96
5000000/5000
25.40*8
14.86*2
22000/60000000
36000/328000000
686991/328000000
686991/3280000
36000/3280000
library(broom)
365*24*60*60
264/23
246/23
3090/39
28*(3090/39)
10/8
10000/50
200*1.25
2500/60
rm(list=ls())#
setwd("~/Documents/Florida soapberry project/2019 Dispersal/SBB-dispersal git/Meredith is working on/stats/AB scripts/winter2020/stats/")#
#
# For Modeling#
library(lme4)#
#
# For Data Summaries and Manipulation#
library(dplyr)#
library(mosaic)#
#
# For Plotting#
#
library(ggplotify)#
library(gridExtra) # "grid" graphics
rm(list=ls())#
output_col = FALSE # Recommend changing this to TRUE if working in Base R or RStudio, and FALSE if generating an html#
source("clean_flight_data.R") # Script that loads and cleans up the data#
source("regression_output.R") # A script that cleans up regression outputs and prints in color or black and white#
source("center_flight_data.R")#
#
data <- read_flight_data("all_flight_data-Winter2020.csv")#
data_all <- data[[1]]#
data_tested <- data[[2]]
test_model<-lmer(mass~host_c*sex_c*sym_dist+ (1|trial_type) + (1|ID), data=data_tested) #
tidy_regression(test_model, is_color=output_col)#
getME(test_model, "lower")#
#
##**Experimental Set-Up Effects**#
#
###### No effect of chamber#
tidy_regression(lmer(mass_c~chamber + (1|ID) + (1|trial_type), data=data_tested), is_color=output_col) # shouldn't matter because this measurement was taken seperate from the chamber.
summary(test_model)
###### No effect of chamber#
tidy_regression(lmer(mass_c~chamber + (1|ID) + (1|trial_type), data=data_tested), is_color=output_col) # shouldn't matter because this measurement was taken seperate from the chamber.#
#
####### No effect of test date#
tidy_regression(lmer(mass_c~days_from_start_c + (1|ID) + (1|trial_type), data=data_tested), is_color=output_col)#
#
####### No effect of test time#
tidy_regression(lmer(mass_c~min_from_IncStart_c + (1|ID) + (1|trial_type), data=data_tested), is_color=output_col) #
```#
#
**Biological Effects**#
#
```#
####### Effect of number of eggs laid#
tidy_regression(lmer(mass_c~total_eggs + (1|ID), data=data_tested), is_color=output_col) # model didn't converge with (1|trial_type)#
#
####### Effect of whether eggs were laid or not#
tidy_regression(lmer(mass_c~eggs_b + (1|ID) + (1|trial_type), data=data_tested), is_color=output_col)#
```#
#
**Morphology Effects**#
#
```
data<-data.frame(R=data_tested$mass_c, #
                 A=data_tested$host_c, #
                 B=data_tested$sex_c, #
                 C=data_tested$sym_dist, #
                 X=data_tested$ID, Y=data_tested$trial_type)#
#
source("AICprobabilities.R")#
source("generic models-gaussian glmer 2-RF + 3-FF.R") #
AICs <- sort(summary$AIC)#
models_init <- sort(P, decreasing=TRUE, index.return=TRUE)#
top <- length(models_init$x[which(models_init$x>0.05)])#
#
AICs <- AICs[1:top]#
models <- lapply(models_init$ix[1:top],1,FUN=as.integer)#
probs <- models_init$x[1:top]#
rbind(AICs, models, probs) # holds a combined 96% probability #
m38 <- R ~ B + (1|X) + (1|Y)
source("AICprobabilities.R")#
source("generic models-gaussian glmer 2-RF + 3-FF.R") #
AICs <- sort(summary$AIC)#
models_init <- sort(P, decreasing=TRUE, index.return=TRUE)#
top <- length(models_init$x[which(models_init$x>0.05)])
AICs <- AICs[1:top]#
models <- lapply(models_init$ix[1:top],1,FUN=as.integer)#
probs <- models_init$x[1:top]#
rbind(AICs, models, probs) # holds a combined 96% probability
m38 <- R ~ B + (1|X) + (1|Y) #*effect of sex and the random effects of trial type and ID*#
model_alldata <- lmer(mass_c ~ sex_c + (1|ID) + (1|trial_type), data=data_tested)#
tidy_regression(model_alldata, is_color=output_col)
mean(data$R[data$B=="F"])
mean(data$R[data$B=="F"], na.rm=TRUE)
data$R
data$B
head(data_tested)
data_tested$mass
data_tested$mass[data_tested$sex=="F"]
mean(data_tested$mass[data_tested$sex=="F"])
mean(data_tested$mass[data_tested$sex=="F"], na.rm=TRUE)
mean(data_tested$mass[data_tested$sex=="M"], na.rm=TRUE)
mean(data_tested$mass[data_tested$sex=="F"], na.rm=TRUE)-mean(data_tested$mass[data_tested$sex=="M"], na.rm=TRUE)
m38 <- R ~ B + (1|X) + (1|Y) #*effect of sex and the random effects of trial type and ID*
summary(m38)
precis(m38)
m38 <- lmer(R ~ B + (1|X) + (1|Y), data=data)
model_alldata <- lmer(mass_c ~ sex_c + (1|ID) + (1|trial_type), data=data_tested)#
tidy_regression(model_alldata, is_color=output_col)
summary(model_alldata)
model<-lm(R~B, data=data)
summary(model)
precis(model_alldata)
mean(data_tested$mass[data_tested$sex=="M"], na.rm=TRUE)
mean(data_tested$mass[data_tested$sex=="F"], na.rm=TRUE)
mass_summary<-aggregate(mass~sex, data=data_tested, FUN=mean, na.rm=TRUE)
mass_summary<-aggregate(mass~sex, data=data_tested, FUN=mean, na.rm=TRUE)#
mass_summary$n<-aggregate(mass~sex, data=data_tested, FUN=length)$mass#
mass_summary$CI<-qnorm(0.95)*mass_summary$mass/mass_summary$n
mass_summary
unique(data_tested$ID)
ind_data<-aggregate(mass~ID, data=data_tested, FUN=mean)
ind_data
ind_data<-aggregate(mass~ID, data=data_tested, FUN=mean)#
mass_summary<-aggregate(mass~sex, data=ind_data, FUN=mean, na.rm=TRUE)#
mass_summary$n<-aggregate(mass~sex, data=ind_data, FUN=length)$mass#
mass_summary$CI<-qnorm(0.95)*mass_summary$mass/mass_summary$n
###pare down so each individual is only represented once.#
ind_data<-aggregate(mass~ID*sex, data=data_tested, FUN=mean)#
mass_summary<-aggregate(mass~sex, data=ind_data, FUN=mean, na.rm=TRUE)#
mass_summary$n<-aggregate(mass~sex, data=ind_data, FUN=length)$mass#
mass_summary$CI<-qnorm(0.95)*mass_summary$mass/mass_summary$n
ind_data
mass_summary
data<-data.frame(R=data_tested$mass_c, #
                 A=data_tested$beak_c, #
                 B=data_tested$thorax_c, #
                 C=data_tested$body_c, #
                 D=data_tested$wing_c,#
                 X=data_tested$ID, Y=data_tested$trial_type)#
data <- data %>%#
  filter(!is.na(C))#
#
source("AICprobabilities.R")#
source("generic models-gaussian glmer 2-RF + 4-FF.R") #
AICs <- sort(summary$AIC)#
models_init <- sort(P, decreasing=TRUE, index.return=TRUE)#
top <- length(models_init$x[which(models_init$x>0.05)])#
#
AICs <- AICs[1:top]#
models <- lapply(models_init$ix[1:top],1,FUN=as.integer)#
probs <- models_init$x[1:top]#
rbind(AICs, models, probs) # top model holds a combined 92% probability
allmorph_model <- lmer(mass_c ~ beak_c * wing_c + thorax_c * body_c + (1 | ID) + (1 | trial_type), data=data_tested)#
tidy_regression(allmorph_model, is_color=output_col)
summary(allmorph_model)
plot(data$beak_c~data$mass_c)
plot(data_tested$beak_c~data$mass_c)
plot(data_tested$beak_c~data_tested$mass_c)
plot(data_tested$thorax_c~data_tested$mass_c)
plot(data_tested$thorax_c~data_tested$beak_c)
data<-data.frame(R=data_tested$mass_c, #
                 A=data_tested$beak_c, #
                 B=data_tested$thorax_c, #
                 C=data_tested$wing2body_c,#
				D=data_tested$sex_c,#
                 X=data_tested$ID, Y=data_tested$trial_type)#
data <- data %>%#
  filter(!is.na(A))#
#
source("AICprobabilities.R")#
source("generic models-gaussian glmer 2-RF + 4-FF.R")#
AICs <- sort(summary$AIC)#
models_init <- sort(P, decreasing=TRUE, index.return=TRUE)#
top <- length(models_init$x[which(models_init$x>0.05)])#
#
AICs <- AICs[1:top]#
models <- lapply(models_init$ix[1:top],1,FUN=as.integer)#
probs <- models_init$x[1:top]#
rbind(AICs, models, probs)
m255
data<-data.frame(R=data_tested$mass_c, #
                 A=data_tested$sex_c, #
                 B=data_tested$thorax_c, #
                 C=data_tested$body_c, #
                 D=data_tested$wing_c,#
                 X=data_tested$ID, Y=data_tested$trial_type)#
data <- data %>%#
  filter(!is.na(C))#
#
source("AICprobabilities.R")#
source("generic models-gaussian glmer 2-RF + 4-FF.R") #
AICs <- sort(summary$AIC)#
models_init <- sort(P, decreasing=TRUE, index.return=TRUE)#
top <- length(models_init$x[which(models_init$x>0.05)])#
#
AICs <- AICs[1:top]#
models <- lapply(models_init$ix[1:top],1,FUN=as.integer)#
probs <- models_init$x[1:top]#
rbind(AICs, models, probs) # top model holds a combined 92% probability
m231
###when sex is included:#
allmorph_model_w_sex <- lmer(mass_c ~ sex_c + thorax_c + (1|ID) + (1|trial_type), data=data_tested)
summary(allmorph_model_w_sex)
6/100000
0.000006*100000
0.00006*100000
